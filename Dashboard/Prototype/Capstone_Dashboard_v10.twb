<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20213.21.1018.0949                               -->
<workbook source-build='2021.3.3 (20213.21.1018.0949)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelRelationshipPerfOptions.true...ObjectModelRelationshipPerfOptions />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='vacancies (Vacancies) (2)' inline='true' name='federated.1gmioib0088thf1bsq5b71apq648 (copy)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='group3db.cueberfdee85.us-east-2.rds.amazonaws.com' name='postgres.1yg2bhp1qawoxl1887bx70g7vyd3'>
            <connection authentication='username-password' class='postgres' dbname='Vacancies' odbc-native-protocol='' one-time-sql='' port='5432' server='group3db.cueberfdee85.us-east-2.rds.amazonaws.com' username='postgres' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3' name='MLPmodel_output' table='[public].[MLPmodel_output]' type='table'>
          <columns>
            <column datatype='date' date-parse-format='yyyy-MM-dd' name='REF_DATE' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3' name='vacancies' table='[public].[vacancies]' type='table' />
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3' name='MLPmodel_output' table='[public].[MLPmodel_output]' type='table'>
            <columns>
              <column datatype='date' date-parse-format='yyyy-MM-dd' name='REF_DATE' />
            </columns>
          </relation>
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3' name='TSmodel_output_Canada' table='[public].[TSmodel_output_Canada]' type='table'>
            <columns>
              <column datatype='date' date-parse-format='yyyy-MM-dd' name='ref_date' />
            </columns>
          </relation>
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3' name='averagewage' table='[public].[averagewage]' type='table' />
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3' name='machinelearning' table='[public].[machinelearning]' type='table' />
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3' name='noc' table='[public].[noc]' type='table' />
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[GEO (MLPmodel_output)]' value='[MLPmodel_output].[GEO]' />
          <map key='[JOB_CHAR (MLPmodel_output)]' value='[MLPmodel_output].[JOB_CHAR]' />
          <map key='[NOC (MLPmodel_output)]' value='[MLPmodel_output].[NOC]' />
          <map key='[PREDICTED_VACANCIES (MLPmodel_output)]' value='[MLPmodel_output].[PREDICTED_VACANCIES]' />
          <map key='[REF_DATE (MLPmodel_output)]' value='[MLPmodel_output].[REF_DATE]' />
          <map key='[avg_wage]' value='[averagewage].[avg_wage]' />
          <map key='[geo (TSmodel_output_Canada)]' value='[TSmodel_output_Canada].[geo]' />
          <map key='[geo]' value='[machinelearning].[geo]' />
          <map key='[id]' value='[machinelearning].[id]' />
          <map key='[index]' value='[MLPmodel_output].[index]' />
          <map key='[job_char (TSmodel_output_Canada)]' value='[TSmodel_output_Canada].[job_char]' />
          <map key='[job_char (machinelearning)]' value='[machinelearning].[job_char]' />
          <map key='[job_char]' value='[averagewage].[job_char]' />
          <map key='[job_details]' value='[vacancies].[job_details]' />
          <map key='[location (averagewage)]' value='[averagewage].[location]' />
          <map key='[location]' value='[vacancies].[location]' />
          <map key='[noc_code (TSmodel_output_Canada)]' value='[TSmodel_output_Canada].[noc_code]' />
          <map key='[noc_code (averagewage)]' value='[averagewage].[noc_code]' />
          <map key='[noc_code (machinelearning)]' value='[machinelearning].[noc_code]' />
          <map key='[noc_code (noc)]' value='[noc].[noc_code]' />
          <map key='[noc_code]' value='[vacancies].[noc_code]' />
          <map key='[noc_desc (TSmodel_output_Canada)]' value='[TSmodel_output_Canada].[noc_desc]' />
          <map key='[noc_desc (machinelearning)]' value='[machinelearning].[noc_desc]' />
          <map key='[noc_desc]' value='[noc].[noc_desc]' />
          <map key='[predicted_vacancies (TSmodel_output_Canada)]' value='[TSmodel_output_Canada].[predicted_vacancies]' />
          <map key='[predicted_vacancies]' value='[machinelearning].[predicted_vacancies]' />
          <map key='[quarter (averagewage)]' value='[averagewage].[quarter]' />
          <map key='[quarter]' value='[vacancies].[quarter]' />
          <map key='[ref_date (TSmodel_output_Canada)]' value='[TSmodel_output_Canada].[ref_date]' />
          <map key='[ref_date (averagewage)]' value='[averagewage].[ref_date]' />
          <map key='[ref_date (machinelearning)]' value='[machinelearning].[ref_date]' />
          <map key='[ref_date]' value='[vacancies].[ref_date]' />
          <map key='[total_vacancies (TSmodel_output_Canada)]' value='[TSmodel_output_Canada].[total_vacancies]' />
          <map key='[total_vacancies (machinelearning)]' value='[machinelearning].[total_vacancies]' />
          <map key='[total_vacancies]' value='[vacancies].[total_vacancies]' />
          <map key='[vacancy_id]' value='[vacancies].[vacancy_id]' />
          <map key='[wage_id]' value='[averagewage].[wage_id]' />
          <map key='[year (averagewage)]' value='[averagewage].[year]' />
          <map key='[year]' value='[vacancies].[year]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>vacancy_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[vacancy_id]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>vacancy_id</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[year]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>quarter</remote-name>
            <remote-type>3</remote-type>
            <local-name>[quarter]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>quarter</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_details</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_details]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>job_details</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_vacancies]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>total_vacancies</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>index</remote-name>
            <remote-type>20</remote-type>
            <local-name>[index]</local-name>
            <parent-name>[MLPmodel_output]</parent-name>
            <remote-alias>index</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MLPmodel_output_1F10776D659F4BC1A94EBAC5A65FB4B1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>REF_DATE</remote-name>
            <remote-type>7</remote-type>
            <local-name>[REF_DATE (MLPmodel_output)]</local-name>
            <parent-name>[MLPmodel_output]</parent-name>
            <remote-alias>REF_DATE</remote-alias>
            <ordinal>10</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MLPmodel_output_1F10776D659F4BC1A94EBAC5A65FB4B1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GEO</remote-name>
            <remote-type>130</remote-type>
            <local-name>[GEO (MLPmodel_output)]</local-name>
            <parent-name>[MLPmodel_output]</parent-name>
            <remote-alias>GEO</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MLPmodel_output_1F10776D659F4BC1A94EBAC5A65FB4B1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NOC</remote-name>
            <remote-type>130</remote-type>
            <local-name>[NOC (MLPmodel_output)]</local-name>
            <parent-name>[MLPmodel_output]</parent-name>
            <remote-alias>NOC</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MLPmodel_output_1F10776D659F4BC1A94EBAC5A65FB4B1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>JOB_CHAR</remote-name>
            <remote-type>130</remote-type>
            <local-name>[JOB_CHAR (MLPmodel_output)]</local-name>
            <parent-name>[MLPmodel_output]</parent-name>
            <remote-alias>JOB_CHAR</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MLPmodel_output_1F10776D659F4BC1A94EBAC5A65FB4B1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PREDICTED_VACANCIES</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PREDICTED_VACANCIES (MLPmodel_output)]</local-name>
            <parent-name>[MLPmodel_output]</parent-name>
            <remote-alias>PREDICTED_VACANCIES</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MLPmodel_output_1F10776D659F4BC1A94EBAC5A65FB4B1]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date (TSmodel_output_Canada)]</local-name>
            <parent-name>[TSmodel_output_Canada]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>15</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TSmodel_output_Canada_4A8732E872E442938816A5A081947EC9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geo</remote-name>
            <remote-type>130</remote-type>
            <local-name>[geo (TSmodel_output_Canada)]</local-name>
            <parent-name>[TSmodel_output_Canada]</parent-name>
            <remote-alias>geo</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TSmodel_output_Canada_4A8732E872E442938816A5A081947EC9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>20</remote-type>
            <local-name>[noc_code (TSmodel_output_Canada)]</local-name>
            <parent-name>[TSmodel_output_Canada]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TSmodel_output_Canada_4A8732E872E442938816A5A081947EC9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_desc</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_desc (TSmodel_output_Canada)]</local-name>
            <parent-name>[TSmodel_output_Canada]</parent-name>
            <remote-alias>noc_desc</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TSmodel_output_Canada_4A8732E872E442938816A5A081947EC9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_char</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_char (TSmodel_output_Canada)]</local-name>
            <parent-name>[TSmodel_output_Canada]</parent-name>
            <remote-alias>job_char</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TSmodel_output_Canada_4A8732E872E442938816A5A081947EC9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vacancies</remote-name>
            <remote-type>130</remote-type>
            <local-name>[total_vacancies (TSmodel_output_Canada)]</local-name>
            <parent-name>[TSmodel_output_Canada]</parent-name>
            <remote-alias>total_vacancies</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TSmodel_output_Canada_4A8732E872E442938816A5A081947EC9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predicted_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predicted_vacancies (TSmodel_output_Canada)]</local-name>
            <parent-name>[TSmodel_output_Canada]</parent-name>
            <remote-alias>predicted_vacancies</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[TSmodel_output_Canada_4A8732E872E442938816A5A081947EC9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>wage_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[wage_id]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>wage_id</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>24</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[year (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>25</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>quarter</remote-name>
            <remote-type>3</remote-type>
            <local-name>[quarter (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>quarter</remote-alias>
            <ordinal>26</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>27</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>28</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_char</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_char]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>job_char</remote-alias>
            <ordinal>29</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>avg_wage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[avg_wage]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>avg_wage</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>32</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_CA1390229E114C3E9812CEAE3C66CAFE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>33</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_CA1390229E114C3E9812CEAE3C66CAFE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geo</remote-name>
            <remote-type>130</remote-type>
            <local-name>[geo]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>geo</remote-alias>
            <ordinal>34</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_CA1390229E114C3E9812CEAE3C66CAFE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>35</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_CA1390229E114C3E9812CEAE3C66CAFE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_desc</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_desc (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>noc_desc</remote-alias>
            <ordinal>36</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_CA1390229E114C3E9812CEAE3C66CAFE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_char</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_char (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>job_char</remote-alias>
            <ordinal>37</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_CA1390229E114C3E9812CEAE3C66CAFE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_vacancies (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>total_vacancies</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_CA1390229E114C3E9812CEAE3C66CAFE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predicted_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predicted_vacancies]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>predicted_vacancies</remote-alias>
            <ordinal>39</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_CA1390229E114C3E9812CEAE3C66CAFE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (noc)]</local-name>
            <parent-name>[noc]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>41</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[noc_0B9F870BAAC145558901DAF1A7969D8D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_desc</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_desc]</local-name>
            <parent-name>[noc]</parent-name>
            <remote-alias>noc_desc</remote-alias>
            <ordinal>42</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[noc_0B9F870BAAC145558901DAF1A7969D8D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='NOC_Broad' datatype='string' name='[Calculation_2755077114843037698]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [noc_code (noc)]=&quot;0&quot; THEN &quot;Management&quot;ELSEIF [noc_code (noc)]=&quot;1&quot; THEN &quot;Business, finance and administration&quot;&#10;ELSEIF [noc_code (noc)]=&quot;1&quot; THEN &quot;Business, finance and administration&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2&quot; THEN &quot;Natural and applied sciences&quot;&#10;ELSEIF [noc_code (noc)]=&quot;3&quot; THEN &quot;Health&quot;&#10;ELSEIF [noc_code (noc)]=&quot;4&quot; THEN &quot;Education, law and social, community and government&quot;&#10;ELSEIF [noc_code (noc)]=&quot;5&quot; THEN &quot;Art, culture, recreation and sport&quot;&#10;ELSEIF [noc_code (noc)]=&quot;6&quot; THEN &quot;Sales and service&quot;&#10;ELSEIF [noc_code (noc)]=&quot;7&quot; THEN &quot;Trades, transport and equipment&quot;&#10;ELSEIF [noc_code (noc)]=&quot;8&quot; THEN &quot;Natural resources, agriculture&quot;&#10;ELSEIF [noc_code (noc)]=&quot;9&quot; THEN &quot;Manufacturing&quot;&#10;ELSE &quot;zOthers_nocs&quot;&#10;END' />
      </column>
      <column caption='NOC_Unit' datatype='string' name='[Calculation_2755077114899828740]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [noc_code (noc)]=&quot;2172&quot; THEN &quot;Data administrators&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2174&quot; THEN &quot;Computer programmers&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2175&quot; THEN &quot;Web developers&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2161&quot; THEN &quot;Statistical analyst&quot;&#10;ELSEIF [noc_code (noc)]=&quot;1112&quot; THEN &quot;Financial analyst&quot;&#10;ELSE &quot;zOthers_nocs&quot;&#10;END' />
      </column>
      <column caption='Total_Vacancies_norm' datatype='real' name='[Calculation_2755077114943479815]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[total_vacancies]/ 1000' />
      </column>
      <column caption='GEO (MLPmodel output)' datatype='string' name='[GEO (MLPmodel_output)]' role='dimension' type='nominal' />
      <column caption='JOB CHAR (MLPmodel output)' datatype='string' name='[JOB_CHAR (MLPmodel_output)]' role='dimension' type='nominal' />
      <column caption='NOC (MLPmodel output)' datatype='string' name='[NOC (MLPmodel_output)]' role='dimension' type='nominal' />
      <column caption='NOC_Broad_Units' datatype='string' name='[NOC_Broad (copy)_2755077114930925573]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [noc_code (noc)]=&quot;0&quot; THEN &quot;Management&quot;ELSEIF [noc_code (noc)]=&quot;1&quot; THEN &quot;Business, finance and administration&quot;&#10;ELSEIF [noc_code (noc)]=&quot;1&quot; THEN &quot;Business, finance and administration&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2&quot; THEN &quot;Natural and applied sciences&quot;&#10;ELSEIF [noc_code (noc)]=&quot;3&quot; THEN &quot;Health&quot;&#10;ELSEIF [noc_code (noc)]=&quot;4&quot; THEN &quot;Education, law and social, community and government&quot;&#10;ELSEIF [noc_code (noc)]=&quot;5&quot; THEN &quot;Art, culture, recreation and sport&quot;&#10;ELSEIF [noc_code (noc)]=&quot;6&quot; THEN &quot;Sales and service&quot;&#10;ELSEIF [noc_code (noc)]=&quot;7&quot; THEN &quot;Trades, transport and equipment&quot;&#10;ELSEIF [noc_code (noc)]=&quot;8&quot; THEN &quot;Natural resources, agriculture&quot;&#10;ELSEIF [noc_code (noc)]=&quot;9&quot; THEN &quot;Manufacturing&quot;&#10;ELSEIF  [noc_code (noc)]=&quot;2172&quot; THEN &quot;unitData administrators&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2174&quot; THEN &quot;unitComputer programmers&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2175&quot; THEN &quot;unitWeb developers&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2161&quot; THEN &quot;unitStatistical analyst&quot;&#10;ELSEIF [noc_code (noc)]=&quot;1112&quot; THEN &quot;unitFinancial analyst&quot;&#10;ELSE &quot;zOthers_nocs&quot;&#10;END' />
      </column>
      <column caption='PREDICTED VACANCIES (MLPmodel output)' datatype='integer' name='[PREDICTED_VACANCIES (MLPmodel_output)]' role='measure' type='quantitative' />
      <column caption='REF DATE (MLPmodel output)' datatype='date' datatype-customized='true' name='[REF_DATE (MLPmodel_output)]' role='dimension' type='ordinal' />
      <_.fcp.ObjectModelTableType.true...column caption='MLPmodel_output' datatype='table' name='[__tableau_internal_object_id__].[MLPmodel_output_1F10776D659F4BC1A94EBAC5A65FB4B1]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='TSmodel_output_Canada' datatype='table' name='[__tableau_internal_object_id__].[TSmodel_output_Canada_4A8732E872E442938816A5A081947EC9]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='averagewage' datatype='table' name='[__tableau_internal_object_id__].[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='machinelearning' datatype='table' name='[__tableau_internal_object_id__].[machinelearning_CA1390229E114C3E9812CEAE3C66CAFE]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='noc' datatype='table' name='[__tableau_internal_object_id__].[noc_0B9F870BAAC145558901DAF1A7969D8D]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='vacancies' datatype='table' name='[__tableau_internal_object_id__].[vacancies_1CF9DFD8CD0543D291646770DB3511CD]' role='measure' type='quantitative' />
      <column caption='Avg Wage' datatype='real' name='[avg_wage]' role='measure' type='quantitative' />
      <column caption='Geo' datatype='string' name='[geo]' role='dimension' type='nominal' />
      <column caption='Id' datatype='integer' name='[id]' role='dimension' type='ordinal' />
      <column caption='Index' datatype='integer' name='[index]' role='measure' type='quantitative' />
      <column caption='Job Char (Machinelearning)' datatype='string' name='[job_char (machinelearning)]' role='dimension' type='nominal' />
      <column caption='Job Char' datatype='string' name='[job_char]' role='dimension' type='nominal' />
      <column caption='Job Details' datatype='string' name='[job_details]' role='dimension' type='nominal' />
      <column caption='Location (Averagewage)' datatype='string' name='[location (averagewage)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Noc Code (Averagewage)' datatype='string' name='[noc_code (averagewage)]' role='dimension' type='nominal' />
      <column caption='Noc Code (Machinelearning)' datatype='string' name='[noc_code (machinelearning)]' role='dimension' type='nominal' />
      <column caption='Noc Code (Noc)' datatype='string' name='[noc_code (noc)]' role='dimension' type='nominal' />
      <column caption='Noc Code' datatype='string' name='[noc_code]' role='dimension' type='nominal' />
      <column caption='Noc Desc (Machinelearning)' datatype='string' name='[noc_desc (machinelearning)]' role='dimension' type='nominal' />
      <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
      <column caption='predicted vacancies (TSmodel output Canada)' datatype='real' name='[predicted_vacancies (TSmodel_output_Canada)]' role='measure' type='quantitative' />
      <column caption='ML_Predicted_JV' datatype='real' name='[predicted_vacancies]' role='measure' type='quantitative' />
      <column caption='Quarter (Averagewage)' datatype='integer' name='[quarter (averagewage)]' role='dimension' type='quantitative' />
      <column caption='Quarter' datatype='integer' name='[quarter]' role='dimension' type='ordinal'>
        <aliases>
          <alias key='1' value='Quarter 1' />
          <alias key='2' value='Quarter 2' />
          <alias key='3' value='Quarter 3' />
          <alias key='4' value='Quarter 4' />
        </aliases>
      </column>
      <column caption='ref date (TSmodel output Canada)' datatype='date' datatype-customized='true' name='[ref_date (TSmodel_output_Canada)]' role='dimension' type='ordinal' />
      <column caption='Ref Date (Averagewage)' datatype='date' name='[ref_date (averagewage)]' role='dimension' type='ordinal' />
      <column caption='Ref Date (Machinelearning)' datatype='date' name='[ref_date (machinelearning)]' role='dimension' type='ordinal' />
      <column caption='Ref Date' datatype='date' name='[ref_date]' role='dimension' type='ordinal' />
      <column caption='total vacancies (TSmodel output Canada)' datatype='string' name='[total_vacancies (TSmodel_output_Canada)]' role='dimension' type='nominal' />
      <column caption='ML_Vacancies' datatype='real' name='[total_vacancies (machinelearning)]' role='measure' type='quantitative' />
      <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
      <column caption='Vacancy Id' datatype='integer' name='[vacancy_id]' role='dimension' type='ordinal' />
      <column caption='Wage Id' datatype='integer' name='[wage_id]' role='dimension' type='ordinal' />
      <column caption='Year (Averagewage)' datatype='integer' name='[year (averagewage)]' role='dimension' type='quantitative' />
      <column caption='Year' datatype='integer' name='[year]' role='dimension' type='ordinal' />
      <column-instance column='[__tableau_internal_object_id__].[MLPmodel_output_1F10776D659F4BC1A94EBAC5A65FB4B1]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:MLPmodel_output_1F10776D659F4BC1A94EBAC5A65FB4B1:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:averagewage_7B0632A640E344BEBDE89B6231CEBEDA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[machinelearning_CA1390229E114C3E9812CEAE3C66CAFE]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:machinelearning_CA1390229E114C3E9812CEAE3C66CAFE:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[noc_0B9F870BAAC145558901DAF1A7969D8D]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:noc_0B9F870BAAC145558901DAF1A7969D8D:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[vacancies_1CF9DFD8CD0543D291646770DB3511CD]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:vacancies_1CF9DFD8CD0543D291646770DB3511CD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[avg_wage]' derivation='Avg' name='[avg:avg_wage:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_vacancies]' derivation='Avg' name='[avg:total_vacancies:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_2755077114843037698]' derivation='None' name='[none:Calculation_2755077114843037698:nk]' pivot='key' type='nominal' />
      <column-instance column='[job_char]' derivation='None' name='[none:job_char:nk]' pivot='key' type='nominal' />
      <column-instance column='[job_details]' derivation='None' name='[none:job_details:nk]' pivot='key' type='nominal' />
      <column-instance column='[location (averagewage)]' derivation='None' name='[none:location (averagewage):nk]' pivot='key' type='nominal' />
      <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
      <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_2755077114943479815]' derivation='Sum' name='[sum:Calculation_2755077114943479815:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PREDICTED_VACANCIES (MLPmodel_output)]' derivation='Sum' name='[sum:PREDICTED_VACANCIES (MLPmodel_output):qk]' pivot='key' type='quantitative' />
      <column-instance column='[avg_wage]' derivation='Sum' name='[sum:avg_wage:qk]' pivot='key' type='quantitative' />
      <column-instance column='[index]' derivation='Sum' name='[sum:index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[predicted_vacancies (TSmodel_output_Canada)]' derivation='Sum' name='[sum:predicted_vacancies (TSmodel_output_Canada):qk]' pivot='key' type='quantitative' />
      <column-instance column='[predicted_vacancies]' derivation='Sum' name='[sum:predicted_vacancies:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_vacancies (machinelearning)]' derivation='Sum' name='[sum:total_vacancies (machinelearning):qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
      <group caption='Action (Job Char)' hidden='true' name='[Action (Job Char)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[job_char]' />
        </groupfilter>
      </group>
      <group caption='Action (Job Details)' hidden='true' name='[Action (Job Details)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[job_details]' />
        </groupfilter>
      </group>
      <group caption='Action (Location (Averagewage))' hidden='true' name='[Action (Location (Averagewage))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[location (averagewage)]' />
        </groupfilter>
      </group>
      <group caption='Action (Location)' hidden='true' name='[Action (Location)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[location]' />
        </groupfilter>
      </group>
      <group caption='Action (NOC_Broad)' hidden='true' name='[Action (NOC_Broad)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_2755077114843037698]' />
        </groupfilter>
      </group>
      <group caption='Action (Noc Code,Noc Desc)' hidden='true' name='[Action (Noc Code,Noc Desc)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[noc_code]' />
          <groupfilter function='level-members' level='[noc_desc]' />
        </groupfilter>
      </group>
      <group caption='Action (Noc Desc)' hidden='true' name='[Action (Noc Desc)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[noc_desc]' />
        </groupfilter>
      </group>
      <group caption='Action (Noc Desc,Quarter)' hidden='true' name='[Action (Noc Desc,Quarter)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[noc_desc]' />
          <groupfilter function='level-members' level='[quarter]' />
        </groupfilter>
      </group>
      <group caption='Action (Quarter)' hidden='true' name='[Action (Quarter)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[quarter]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' rowDisplayCount='10' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:location:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Ontario&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Alberta&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Newfoundland and Labrador&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yukon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Prince Edward Island&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Northwest Territories&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;British Columbia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nova Scotia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>%null%</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Quebec&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nunavut&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Manitoba&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saskatchewan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;New Brunswick&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:location (averagewage):nk]' palette='blue_teal_10_0' type='palette'>
            <map to='#2c5985'>
              <bucket>&quot;Nunavut&quot;</bucket>
            </map>
            <map to='#2e648e'>
              <bucket>&quot;Northwest Territories&quot;</bucket>
            </map>
            <map to='#317097'>
              <bucket>&quot;Yukon&quot;</bucket>
            </map>
            <map to='#347da0'>
              <bucket>&quot;Prince Edward Island&quot;</bucket>
            </map>
            <map to='#3589a9'>
              <bucket>&quot;Newfoundland and Labrador&quot;</bucket>
            </map>
            <map to='#3b95b1'>
              <bucket>&quot;Saskatchewan&quot;</bucket>
            </map>
            <map to='#45a2b9'>
              <bucket>&quot;New Brunswick&quot;</bucket>
            </map>
            <map to='#5aadbf'>
              <bucket>&quot;Nova Scotia&quot;</bucket>
            </map>
            <map to='#6eb8c5'>
              <bucket>&quot;Manitoba&quot;</bucket>
            </map>
            <map to='#81c3cb'>
              <bucket>&quot;Alberta&quot;</bucket>
            </map>
            <map to='#93cdcf'>
              <bucket>&quot;British Columbia&quot;</bucket>
            </map>
            <map to='#a7d8d3'>
              <bucket>&quot;Quebec&quot;</bucket>
            </map>
            <map to='#bce4d8'>
              <bucket>&quot;Ontario&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:noc_desc:nk]' palette='color_blind_10_0' type='palette'>
            <map to='#1170aa'>
              <bucket>&quot;Management occupations&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;Occupations in art, culture, recreation and sport&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;Occupations in education, law and social, community and government services&quot;</bucket>
            </map>
            <map to='#7b848f'>
              <bucket>&quot;Business, finance and administration occupations&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;Health occupations&quot;</bucket>
            </map>
            <map to='#a3cce9'>
              <bucket>&quot;Natural resources, agriculture and related production occupations&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;Trades, transport and equipment operators and related occupations&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot;Sales and service occupations&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;Natural and applied sciences and related occupations&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;Occupations in manufacturing and utilities&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:job_details:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Full-time&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>%null%</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Part-time&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:job_char:nk]' palette='blue_teal_10_0' type='palette'>
            <map to='#2c5985'>
              <bucket>&quot;Part-time&quot;</bucket>
            </map>
            <map to='#bce4d8'>
              <bucket>&quot;Full-time&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_2755077114843037698:nk]' palette='tableau20_10_0' type='palette'>
            <map to='#1170aa'>
              <bucket>&quot;zOthers_nocs&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Manufacturing&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Management&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Education, law and social, community and government&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sales and service&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Natural and applied sciences&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Business, finance and administration&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Trades, transport and equipment&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Natural resources, agriculture&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Health&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Test&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Art, culture, recreation and sport&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:predicted_vacancies (canada_vacancies):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[avg:Calculation_2016346038876459008:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[avg:total_vacancies:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:Calculation_2016346038876459008:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:Calculation_2755077114943479815:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:total_vacancies (canada_vacancies):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:total_vacancies:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:avg_wage:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:predicted_vacancies (TSmodel_output_Canada):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:total_vacancies (machinelearning):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:total_vacancies:qk]:1&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[__tableau_internal_object_id__].[cnt:in_1A6F6E30587840348400577EA8B13DB1:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:index:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[__tableau_internal_object_id__].[cnt:MLPmodel_output_1F10776D659F4BC1A94EBAC5A65FB4B1:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[__tableau_internal_object_id__].[cnt:MLPmodel_output_current_prediction_A75ACD725516431FAC8F7853171D1B71:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[__tableau_internal_object_id__].[cnt:TSmodel_output_Canada_C99A40D972C44778BA35E2213C24C911:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[__tableau_internal_object_id__].[cnt:machinelearning_CA1390229E114C3E9812CEAE3C66CAFE:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[__tableau_internal_object_id__].[cnt:averagewage_7B0632A640E344BEBDE89B6231CEBEDA:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[__tableau_internal_object_id__].[cnt:noc_0B9F870BAAC145558901DAF1A7969D8D:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[avg:PREDICTED_VACANCIES:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:PREDICTED_VACANCIES (MLPmodel_output_current_prediction):qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:PREDICTED_VACANCIES (MLPmodel_output_future_prediction):qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:index (MLPmodel_output_future_prediction):qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:predicted_vacancies:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[__tableau_internal_object_id__].[cnt:vacancies_1CF9DFD8CD0543D291646770DB3511CD:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[avg:avg_wage:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:PREDICTED_VACANCIES (MLPmodel_output):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[sum:PREDICTED_VACANCIES:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[__tableau_internal_object_id__].[cnt:MLP!Test!case0_1781A7A0FAFE4F9DB35790486C9A7324:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[usr:Calculation_3842907531804069888:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[__tableau_internal_object_id__].[cnt:canada_vacancies_38BA6DF68145489DB5DFB279E00FD78E:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy)].[__tableau_internal_object_id__].[cnt:MLPmodel_output_future_prediction_794643BBBC4C4D0B9D95F08A383126BE:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='MLPmodel_output' id='MLPmodel_output_1F10776D659F4BC1A94EBAC5A65FB4B1'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3' name='MLPmodel_output' table='[public].[MLPmodel_output]' type='table'>
                <columns>
                  <column datatype='date' date-parse-format='yyyy-MM-dd' name='REF_DATE' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='TSmodel_output_Canada' id='TSmodel_output_Canada_4A8732E872E442938816A5A081947EC9'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3' name='TSmodel_output_Canada' table='[public].[TSmodel_output_Canada]' type='table'>
                <columns>
                  <column datatype='date' date-parse-format='yyyy-MM-dd' name='ref_date' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='averagewage' id='averagewage_7B0632A640E344BEBDE89B6231CEBEDA'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3' name='averagewage' table='[public].[averagewage]' type='table' />
            </properties>
          </object>
          <object caption='machinelearning' id='machinelearning_CA1390229E114C3E9812CEAE3C66CAFE'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3' name='machinelearning' table='[public].[machinelearning]' type='table' />
            </properties>
          </object>
          <object caption='noc' id='noc_0B9F870BAAC145558901DAF1A7969D8D'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3' name='noc' table='[public].[noc]' type='table' />
            </properties>
          </object>
          <object caption='vacancies' id='vacancies_1CF9DFD8CD0543D291646770DB3511CD'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3' name='vacancies' table='[public].[vacancies]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[REF_DATE (MLPmodel_output)]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[GEO (MLPmodel_output)]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[JOB_CHAR (MLPmodel_output)]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point object-id='MLPmodel_output_1F10776D659F4BC1A94EBAC5A65FB4B1' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[ref_date]' />
              <expression op='[ref_date (TSmodel_output_Canada)]' />
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point object-id='TSmodel_output_Canada_4A8732E872E442938816A5A081947EC9' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[ref_date (averagewage)]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[location (averagewage)]' />
              </expression>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[noc_code (averagewage)]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[job_char]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point object-id='averagewage_7B0632A640E344BEBDE89B6231CEBEDA' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[ref_date (machinelearning)]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[geo]' />
              </expression>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[noc_code (machinelearning)]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[job_char (machinelearning)]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point object-id='machinelearning_CA1390229E114C3E9812CEAE3C66CAFE' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[noc_code]' />
              <expression op='[noc_code (noc)]' />
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point _.fcp.ObjectModelRelationshipPerfOptions.true...is-db-set-unique-key='true' object-id='noc_0B9F870BAAC145558901DAF1A7969D8D' unique-key='true' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='vacancies (Vacancies) (3)' inline='true' name='federated.1gmioib0088thf1bsq5b71apq648 (copy 2)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='group3db.cueberfdee85.us-east-2.rds.amazonaws.com' name='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy)'>
            <connection authentication='username-password' class='postgres' dbname='Vacancies' odbc-native-protocol='' one-time-sql='' port='5432' server='group3db.cueberfdee85.us-east-2.rds.amazonaws.com' username='postgres' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy)' name='averagewage' table='[public].[averagewage]' type='table' />
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy)' name='vacancies' table='[public].[vacancies]' type='table' />
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy)' name='averagewage' table='[public].[averagewage]' type='table' />
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy)' name='machinelearning' table='[public].[machinelearning]' type='table' />
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy)' name='mlpoutputcod' table='[public].[mlpoutputcod]' type='table'>
            <columns>
              <column datatype='date' date-parse-format='yyyy-MM-dd' name='REF_DATE' />
            </columns>
          </relation>
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy)' name='noc' table='[public].[noc]' type='table' />
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[GEO]' value='[mlpoutputcod].[GEO]' />
          <map key='[JOB_CHAR]' value='[mlpoutputcod].[JOB_CHAR]' />
          <map key='[NOC]' value='[mlpoutputcod].[NOC]' />
          <map key='[NocCode]' value='[mlpoutputcod].[NocCode]' />
          <map key='[PREDICTED_VACANCIES]' value='[mlpoutputcod].[PREDICTED_VACANCIES]' />
          <map key='[REF_DATE]' value='[mlpoutputcod].[REF_DATE]' />
          <map key='[avg_wage]' value='[averagewage].[avg_wage]' />
          <map key='[composedid (averagewage)]' value='[averagewage].[composedid]' />
          <map key='[composedid]' value='[vacancies].[composedid]' />
          <map key='[geo (machinelearning)]' value='[machinelearning].[geo]' />
          <map key='[id]' value='[machinelearning].[id]' />
          <map key='[index]' value='[mlpoutputcod].[index]' />
          <map key='[job_char (machinelearning)]' value='[machinelearning].[job_char]' />
          <map key='[job_char]' value='[averagewage].[job_char]' />
          <map key='[job_details]' value='[vacancies].[job_details]' />
          <map key='[location (averagewage)]' value='[averagewage].[location]' />
          <map key='[location]' value='[vacancies].[location]' />
          <map key='[noc_code (averagewage)]' value='[averagewage].[noc_code]' />
          <map key='[noc_code (machinelearning)]' value='[machinelearning].[noc_code]' />
          <map key='[noc_code (noc)]' value='[noc].[noc_code]' />
          <map key='[noc_code]' value='[vacancies].[noc_code]' />
          <map key='[noc_desc (machinelearning)]' value='[machinelearning].[noc_desc]' />
          <map key='[noc_desc]' value='[noc].[noc_desc]' />
          <map key='[predicted_vacancies]' value='[machinelearning].[predicted_vacancies]' />
          <map key='[quarter (averagewage)]' value='[averagewage].[quarter]' />
          <map key='[quarter]' value='[vacancies].[quarter]' />
          <map key='[ref_date (averagewage)]' value='[averagewage].[ref_date]' />
          <map key='[ref_date (machinelearning)]' value='[machinelearning].[ref_date]' />
          <map key='[ref_date]' value='[vacancies].[ref_date]' />
          <map key='[total_vacancies (machinelearning)]' value='[machinelearning].[total_vacancies]' />
          <map key='[total_vacancies]' value='[vacancies].[total_vacancies]' />
          <map key='[year (averagewage)]' value='[averagewage].[year]' />
          <map key='[year]' value='[vacancies].[year]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>composedid</remote-name>
            <remote-type>130</remote-type>
            <local-name>[composedid]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>composedid</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>130</remote-type>
            <local-name>[year]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>quarter</remote-name>
            <remote-type>130</remote-type>
            <local-name>[quarter]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>quarter</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_details</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_details]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>job_details</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_vacancies]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>total_vacancies</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>composedid</remote-name>
            <remote-type>130</remote-type>
            <local-name>[composedid (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>composedid</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>11</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[year (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>quarter</remote-name>
            <remote-type>3</remote-type>
            <local-name>[quarter (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>quarter</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_char</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_char]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>job_char</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>avg_wage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[avg_wage]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>avg_wage</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>20</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geo</remote-name>
            <remote-type>130</remote-type>
            <local-name>[geo (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>geo</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_desc</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_desc (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>noc_desc</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_char</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_char (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>job_char</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_vacancies (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>total_vacancies</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predicted_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predicted_vacancies]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>predicted_vacancies</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>index</remote-name>
            <remote-type>20</remote-type>
            <local-name>[index]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>index</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_91425FB6E3164355AB8B0FF83712BFE9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>REF_DATE</remote-name>
            <remote-type>7</remote-type>
            <local-name>[REF_DATE]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>REF_DATE</remote-alias>
            <ordinal>28</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_91425FB6E3164355AB8B0FF83712BFE9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GEO</remote-name>
            <remote-type>130</remote-type>
            <local-name>[GEO]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>GEO</remote-alias>
            <ordinal>29</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_91425FB6E3164355AB8B0FF83712BFE9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NOC</remote-name>
            <remote-type>130</remote-type>
            <local-name>[NOC]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>NOC</remote-alias>
            <ordinal>30</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_91425FB6E3164355AB8B0FF83712BFE9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>JOB_CHAR</remote-name>
            <remote-type>130</remote-type>
            <local-name>[JOB_CHAR]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>JOB_CHAR</remote-alias>
            <ordinal>31</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_91425FB6E3164355AB8B0FF83712BFE9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PREDICTED_VACANCIES</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PREDICTED_VACANCIES]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>PREDICTED_VACANCIES</remote-alias>
            <ordinal>32</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_91425FB6E3164355AB8B0FF83712BFE9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NocCode</remote-name>
            <remote-type>130</remote-type>
            <local-name>[NocCode]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>NocCode</remote-alias>
            <ordinal>33</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_91425FB6E3164355AB8B0FF83712BFE9]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (noc)]</local-name>
            <parent-name>[noc]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>35</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[noc_0B9F870BAAC145558901DAF1A7969D8D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_desc</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_desc]</local-name>
            <parent-name>[noc]</parent-name>
            <remote-alias>noc_desc</remote-alias>
            <ordinal>36</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[noc_0B9F870BAAC145558901DAF1A7969D8D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='NOC_Broad' datatype='string' name='[Calculation_2755077114843037698]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [noc_code (noc)]=&quot;0&quot; THEN &quot;Management&quot;ELSEIF [noc_code (noc)]=&quot;1&quot; THEN &quot;Business, finance and administration&quot;&#10;ELSEIF [noc_code (noc)]=&quot;1&quot; THEN &quot;Business, finance and administration&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2&quot; THEN &quot;Natural and applied sciences&quot;&#10;ELSEIF [noc_code (noc)]=&quot;3&quot; THEN &quot;Health&quot;&#10;ELSEIF [noc_code (noc)]=&quot;4&quot; THEN &quot;Education, law and social, community and government&quot;&#10;ELSEIF [noc_code (noc)]=&quot;5&quot; THEN &quot;Art, culture, recreation and sport&quot;&#10;ELSEIF [noc_code (noc)]=&quot;6&quot; THEN &quot;Sales and service&quot;&#10;ELSEIF [noc_code (noc)]=&quot;7&quot; THEN &quot;Trades, transport and equipment&quot;&#10;ELSEIF [noc_code (noc)]=&quot;8&quot; THEN &quot;Natural resources, agriculture&quot;&#10;ELSEIF [noc_code (noc)]=&quot;9&quot; THEN &quot;Manufacturing&quot;&#10;ELSE &quot;zOthers_nocs&quot;&#10;END' />
      </column>
      <column caption='NOC_Unit' datatype='string' name='[Calculation_2755077114899828740]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [noc_code (noc)]=&quot;2172&quot; THEN &quot;Data administrators&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2174&quot; THEN &quot;Computer programmers&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2175&quot; THEN &quot;Web developers&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2161&quot; THEN &quot;Statistical analyst&quot;&#10;ELSEIF [noc_code (noc)]=&quot;1112&quot; THEN &quot;Financial analyst&quot;&#10;ELSE &quot;zOthers_nocs&quot;&#10;END' />
      </column>
      <column caption='Total_Vacancies_norm' datatype='real' name='[Calculation_2755077114943479815]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[total_vacancies]/ 1000' />
      </column>
      <column caption='Job Char1' datatype='string' name='[JOB_CHAR]' role='dimension' type='nominal' />
      <column caption='NOC_Broad_Units' datatype='string' name='[NOC_Broad (copy)_2755077114930925573]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [noc_code (noc)]=&quot;0&quot; THEN &quot;Management&quot;ELSEIF [noc_code (noc)]=&quot;1&quot; THEN &quot;Business, finance and administration&quot;&#10;ELSEIF [noc_code (noc)]=&quot;1&quot; THEN &quot;Business, finance and administration&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2&quot; THEN &quot;Natural and applied sciences&quot;&#10;ELSEIF [noc_code (noc)]=&quot;3&quot; THEN &quot;Health&quot;&#10;ELSEIF [noc_code (noc)]=&quot;4&quot; THEN &quot;Education, law and social, community and government&quot;&#10;ELSEIF [noc_code (noc)]=&quot;5&quot; THEN &quot;Art, culture, recreation and sport&quot;&#10;ELSEIF [noc_code (noc)]=&quot;6&quot; THEN &quot;Sales and service&quot;&#10;ELSEIF [noc_code (noc)]=&quot;7&quot; THEN &quot;Trades, transport and equipment&quot;&#10;ELSEIF [noc_code (noc)]=&quot;8&quot; THEN &quot;Natural resources, agriculture&quot;&#10;ELSEIF [noc_code (noc)]=&quot;9&quot; THEN &quot;Manufacturing&quot;&#10;ELSEIF  [noc_code (noc)]=&quot;2172&quot; THEN &quot;unitData administrators&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2174&quot; THEN &quot;unitComputer programmers&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2175&quot; THEN &quot;unitWeb developers&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2161&quot; THEN &quot;unitStatistical analyst&quot;&#10;ELSEIF [noc_code (noc)]=&quot;1112&quot; THEN &quot;unitFinancial analyst&quot;&#10;ELSE &quot;zOthers_nocs&quot;&#10;END' />
      </column>
      <column caption='Noc Code1' datatype='string' name='[NocCode]' role='dimension' type='nominal' />
      <column caption='Predicted Vacancies' datatype='integer' name='[PREDICTED_VACANCIES]' role='measure' type='quantitative' />
      <column aggregation='Count' caption='Ref Date1' datatype='date' datatype-customized='true' name='[REF_DATE]' role='dimension' type='ordinal' />
      <_.fcp.ObjectModelTableType.true...column caption='averagewage' datatype='table' name='[__tableau_internal_object_id__].[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='machinelearning' datatype='table' name='[__tableau_internal_object_id__].[machinelearning_E01031A8C8E941618050649479DAA80A]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='mlpoutputcod' datatype='table' name='[__tableau_internal_object_id__].[mlpoutputcod_91425FB6E3164355AB8B0FF83712BFE9]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='noc' datatype='table' name='[__tableau_internal_object_id__].[noc_0B9F870BAAC145558901DAF1A7969D8D]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='vacancies' datatype='table' name='[__tableau_internal_object_id__].[vacancies_1CF9DFD8CD0543D291646770DB3511CD]' role='measure' type='quantitative' />
      <column caption='Avg Wage' datatype='real' name='[avg_wage]' role='measure' type='quantitative' />
      <column caption='Geo (Machinelearning)' datatype='string' name='[geo (machinelearning)]' role='dimension' type='nominal' />
      <column caption='Id' datatype='integer' name='[id]' role='dimension' type='ordinal' />
      <column caption='Index' datatype='string' datatype-customized='true' default-role='measure' default-type='quantitative' name='[index]' role='dimension' type='nominal' />
      <column caption='Job Char (Machinelearning)' datatype='string' name='[job_char (machinelearning)]' role='dimension' type='nominal' />
      <column caption='Job Char' datatype='string' name='[job_char]' role='dimension' type='nominal' />
      <column caption='Job Details' datatype='string' name='[job_details]' role='dimension' type='nominal' />
      <column caption='Location (Averagewage)' datatype='string' name='[location (averagewage)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Noc Code (Averagewage)' datatype='string' name='[noc_code (averagewage)]' role='dimension' type='nominal' />
      <column caption='Noc Code (Machinelearning)' datatype='string' name='[noc_code (machinelearning)]' role='dimension' type='nominal' />
      <column caption='Noc Code (Noc)' datatype='string' name='[noc_code (noc)]' role='dimension' type='nominal' />
      <column caption='Noc Code' datatype='string' name='[noc_code]' role='dimension' type='nominal' />
      <column caption='Noc Desc (Machinelearning)' datatype='string' name='[noc_desc (machinelearning)]' role='dimension' type='nominal' />
      <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
      <column caption='Predicted Vacancies1' datatype='real' name='[predicted_vacancies]' role='measure' type='quantitative' />
      <column caption='Quarter (Averagewage)' datatype='integer' name='[quarter (averagewage)]' role='dimension' type='quantitative' />
      <column caption='Quarter' datatype='string' name='[quarter]' role='dimension' type='nominal' />
      <column caption='Ref Date (Averagewage)' datatype='date' name='[ref_date (averagewage)]' role='dimension' type='ordinal' />
      <column caption='Ref Date (Machinelearning)' datatype='date' name='[ref_date (machinelearning)]' role='dimension' type='ordinal' />
      <column caption='Ref Date' datatype='date' name='[ref_date]' role='dimension' type='ordinal' />
      <column caption='Total Vacancies (Machinelearning)' datatype='real' name='[total_vacancies (machinelearning)]' role='measure' type='quantitative' />
      <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
      <column caption='Year (Averagewage)' datatype='integer' name='[year (averagewage)]' role='dimension' type='quantitative' />
      <column caption='Year' datatype='string' name='[year]' role='dimension' type='nominal' />
      <column-instance column='[__tableau_internal_object_id__].[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:averagewage_7B0632A640E344BEBDE89B6231CEBEDA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[noc_0B9F870BAAC145558901DAF1A7969D8D]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:noc_0B9F870BAAC145558901DAF1A7969D8D:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[vacancies_1CF9DFD8CD0543D291646770DB3511CD]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:vacancies_1CF9DFD8CD0543D291646770DB3511CD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[avg_wage]' derivation='Avg' name='[avg:avg_wage:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_vacancies]' derivation='Avg' name='[avg:total_vacancies:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_2755077114843037698]' derivation='None' name='[none:Calculation_2755077114843037698:nk]' pivot='key' type='nominal' />
      <column-instance column='[job_char]' derivation='None' name='[none:job_char:nk]' pivot='key' type='nominal' />
      <column-instance column='[job_details]' derivation='None' name='[none:job_details:nk]' pivot='key' type='nominal' />
      <column-instance column='[location (averagewage)]' derivation='None' name='[none:location (averagewage):nk]' pivot='key' type='nominal' />
      <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
      <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_2755077114943479815]' derivation='Sum' name='[sum:Calculation_2755077114943479815:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PREDICTED_VACANCIES]' derivation='Sum' name='[sum:PREDICTED_VACANCIES:qk]' pivot='key' type='quantitative' />
      <column-instance column='[avg_wage]' derivation='Sum' name='[sum:avg_wage:qk]' pivot='key' type='quantitative' />
      <column-instance column='[predicted_vacancies]' derivation='Sum' name='[sum:predicted_vacancies:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_vacancies (machinelearning)]' derivation='Sum' name='[sum:total_vacancies (machinelearning):qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
      <group caption='Action (Job Char)' hidden='true' name='[Action (Job Char)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[job_char]' />
        </groupfilter>
      </group>
      <group caption='Action (Job Details)' hidden='true' name='[Action (Job Details)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[job_details]' />
        </groupfilter>
      </group>
      <group caption='Action (Location (Averagewage))' hidden='true' name='[Action (Location (Averagewage))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[location (averagewage)]' />
        </groupfilter>
      </group>
      <group caption='Action (Location)' hidden='true' name='[Action (Location)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[location]' />
        </groupfilter>
      </group>
      <group caption='Action (NOC_Broad)' hidden='true' name='[Action (NOC_Broad)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_2755077114843037698]' />
        </groupfilter>
      </group>
      <group caption='Action (Noc Code,Noc Desc)' hidden='true' name='[Action (Noc Code,Noc Desc)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[noc_code]' />
          <groupfilter function='level-members' level='[noc_desc]' />
        </groupfilter>
      </group>
      <group caption='Action (Noc Desc)' hidden='true' name='[Action (Noc Desc)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[noc_desc]' />
        </groupfilter>
      </group>
      <group caption='Action (Noc Desc,Quarter)' hidden='true' name='[Action (Noc Desc,Quarter)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[noc_desc]' />
          <groupfilter function='level-members' level='[quarter]' />
        </groupfilter>
      </group>
      <group caption='Action (Quarter)' hidden='true' name='[Action (Quarter)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[quarter]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' rowDisplayCount='10' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:location:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Ontario&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Alberta&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Newfoundland and Labrador&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yukon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Prince Edward Island&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Northwest Territories&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;British Columbia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nova Scotia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>%null%</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Quebec&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nunavut&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Manitoba&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saskatchewan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;New Brunswick&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:location (averagewage):nk]' palette='blue_teal_10_0' type='palette'>
            <map to='#2c5985'>
              <bucket>&quot;Nunavut&quot;</bucket>
            </map>
            <map to='#2e648e'>
              <bucket>&quot;Northwest Territories&quot;</bucket>
            </map>
            <map to='#317097'>
              <bucket>&quot;Yukon&quot;</bucket>
            </map>
            <map to='#347da0'>
              <bucket>&quot;Prince Edward Island&quot;</bucket>
            </map>
            <map to='#3589a9'>
              <bucket>&quot;Newfoundland and Labrador&quot;</bucket>
            </map>
            <map to='#3b95b1'>
              <bucket>&quot;Saskatchewan&quot;</bucket>
            </map>
            <map to='#45a2b9'>
              <bucket>&quot;New Brunswick&quot;</bucket>
            </map>
            <map to='#5aadbf'>
              <bucket>&quot;Nova Scotia&quot;</bucket>
            </map>
            <map to='#6eb8c5'>
              <bucket>&quot;Manitoba&quot;</bucket>
            </map>
            <map to='#81c3cb'>
              <bucket>&quot;Alberta&quot;</bucket>
            </map>
            <map to='#93cdcf'>
              <bucket>&quot;British Columbia&quot;</bucket>
            </map>
            <map to='#a7d8d3'>
              <bucket>&quot;Quebec&quot;</bucket>
            </map>
            <map to='#bce4d8'>
              <bucket>&quot;Ontario&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:noc_desc:nk]' palette='color_blind_10_0' type='palette'>
            <map to='#1170aa'>
              <bucket>&quot;Management occupations&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;Occupations in art, culture, recreation and sport&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;Occupations in education, law and social, community and government services&quot;</bucket>
            </map>
            <map to='#7b848f'>
              <bucket>&quot;Business, finance and administration occupations&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;Health occupations&quot;</bucket>
            </map>
            <map to='#a3cce9'>
              <bucket>&quot;Natural resources, agriculture and related production occupations&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;Trades, transport and equipment operators and related occupations&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot;Sales and service occupations&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;Natural and applied sciences and related occupations&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;Occupations in manufacturing and utilities&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:job_details:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Full-time&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>%null%</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Part-time&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:job_char:nk]' palette='blue_teal_10_0' type='palette'>
            <map to='#2c5985'>
              <bucket>&quot;Part-time&quot;</bucket>
            </map>
            <map to='#bce4d8'>
              <bucket>&quot;Full-time&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_2755077114843037698:nk]' palette='tableau20_10_0' type='palette'>
            <map to='#1170aa'>
              <bucket>&quot;zOthers_nocs&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Manufacturing&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Management&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Education, law and social, community and government&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sales and service&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Natural and applied sciences&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Business, finance and administration&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Trades, transport and equipment&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Natural resources, agriculture&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Health&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Test&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Art, culture, recreation and sport&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:predicted_vacancies (canada_vacancies):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[avg:Calculation_2016346038876459008:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[avg:total_vacancies:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:Calculation_2016346038876459008:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:Calculation_2755077114943479815:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:total_vacancies (canada_vacancies):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:total_vacancies:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:avg_wage:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:total_vacancies (machinelearning):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:total_vacancies:qk]:1&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[__tableau_internal_object_id__].[cnt:in_1A6F6E30587840348400577EA8B13DB1:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[__tableau_internal_object_id__].[cnt:TSmodel_output_Canada_C99A40D972C44778BA35E2213C24C911:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[__tableau_internal_object_id__].[cnt:machinelearning_CA1390229E114C3E9812CEAE3C66CAFE:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[__tableau_internal_object_id__].[cnt:averagewage_7B0632A640E344BEBDE89B6231CEBEDA:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[__tableau_internal_object_id__].[cnt:noc_0B9F870BAAC145558901DAF1A7969D8D:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[avg:PREDICTED_VACANCIES:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:predicted_vacancies (TSmodel_output_Canada):qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:predicted_vacancies:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[__tableau_internal_object_id__].[cnt:vacancies_1CF9DFD8CD0543D291646770DB3511CD:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[avg:avg_wage:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:PREDICTED_VACANCIES:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[__tableau_internal_object_id__].[cnt:MLP!Test!case0_1781A7A0FAFE4F9DB35790486C9A7324:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[usr:Calculation_3842907531804069888:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[__tableau_internal_object_id__].[cnt:canada_vacancies_38BA6DF68145489DB5DFB279E00FD78E:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='averagewage' id='averagewage_7B0632A640E344BEBDE89B6231CEBEDA'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy)' name='averagewage' table='[public].[averagewage]' type='table' />
            </properties>
          </object>
          <object caption='machinelearning' id='machinelearning_E01031A8C8E941618050649479DAA80A'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy)' name='machinelearning' table='[public].[machinelearning]' type='table' />
            </properties>
          </object>
          <object caption='mlpoutputcod' id='mlpoutputcod_91425FB6E3164355AB8B0FF83712BFE9'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy)' name='mlpoutputcod' table='[public].[mlpoutputcod]' type='table'>
                <columns>
                  <column datatype='date' date-parse-format='yyyy-MM-dd' name='REF_DATE' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='noc' id='noc_0B9F870BAAC145558901DAF1A7969D8D'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy)' name='noc' table='[public].[noc]' type='table' />
            </properties>
          </object>
          <object caption='vacancies' id='vacancies_1CF9DFD8CD0543D291646770DB3511CD'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy)' name='vacancies' table='[public].[vacancies]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[ref_date (averagewage)]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[location (averagewage)]' />
              </expression>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[noc_code (averagewage)]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[job_char]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point object-id='averagewage_7B0632A640E344BEBDE89B6231CEBEDA' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[ref_date (machinelearning)]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[geo (machinelearning)]' />
              </expression>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[noc_code (machinelearning)]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[job_char (machinelearning)]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point object-id='machinelearning_E01031A8C8E941618050649479DAA80A' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[REF_DATE]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[GEO]' />
              </expression>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[NocCode]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[JOB_CHAR]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point object-id='mlpoutputcod_91425FB6E3164355AB8B0FF83712BFE9' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[noc_code]' />
              <expression op='[noc_code (noc)]' />
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point _.fcp.ObjectModelRelationshipPerfOptions.true...is-db-set-unique-key='true' object-id='noc_0B9F870BAAC145558901DAF1A7969D8D' unique-key='true' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='vacancies (Vacancies) (4)' inline='true' name='federated.1gmioib0088thf1bsq5b71apq648 (copy 3)' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='group3db.cueberfdee85.us-east-2.rds.amazonaws.com' name='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)'>
            <connection authentication='username-password' class='postgres' dbname='Vacancies' odbc-native-protocol='' one-time-sql='' port='5432' server='group3db.cueberfdee85.us-east-2.rds.amazonaws.com' username='postgres' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='averagewage' table='[public].[averagewage]' type='table' />
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='vacancies' table='[public].[vacancies]' type='table' />
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='averagewage' table='[public].[averagewage]' type='table' />
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='machinelearning' table='[public].[machinelearning]' type='table' />
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='mlpoutputcod' table='[public].[mlpoutputcod]' type='table'>
            <columns>
              <column datatype='date' date-parse-format='yyyy-MM-dd' name='REF_DATE' />
            </columns>
          </relation>
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='noc' table='[public].[noc]' type='table' />
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='tsoutputcanada' table='[public].[tsoutputcanada]' type='table' />
          <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='tsoutputprovinces' table='[public].[tsoutputprovinces]' type='table' />
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[GEO]' value='[mlpoutputcod].[GEO]' />
          <map key='[JOB_CHAR]' value='[mlpoutputcod].[JOB_CHAR]' />
          <map key='[NOC]' value='[mlpoutputcod].[NOC]' />
          <map key='[NocCode]' value='[mlpoutputcod].[NocCode]' />
          <map key='[PREDICTED_VACANCIES]' value='[mlpoutputcod].[PREDICTED_VACANCIES]' />
          <map key='[REF_DATE]' value='[mlpoutputcod].[REF_DATE]' />
          <map key='[avg_wage]' value='[averagewage].[avg_wage]' />
          <map key='[composedid (averagewage)]' value='[averagewage].[composedid]' />
          <map key='[composedid]' value='[vacancies].[composedid]' />
          <map key='[geo (machinelearning)]' value='[machinelearning].[geo]' />
          <map key='[geo (tsoutputprovinces)]' value='[tsoutputprovinces].[geo]' />
          <map key='[geo]' value='[tsoutputcanada].[geo]' />
          <map key='[id]' value='[machinelearning].[id]' />
          <map key='[idtspr]' value='[tsoutputprovinces].[idtspr]' />
          <map key='[index]' value='[mlpoutputcod].[index]' />
          <map key='[job_char (machinelearning)]' value='[machinelearning].[job_char]' />
          <map key='[job_char (tsoutputcanada)]' value='[tsoutputcanada].[job_char]' />
          <map key='[job_char (tsoutputprovinces)]' value='[tsoutputprovinces].[job_char]' />
          <map key='[job_char]' value='[averagewage].[job_char]' />
          <map key='[job_details]' value='[vacancies].[job_details]' />
          <map key='[location (averagewage)]' value='[averagewage].[location]' />
          <map key='[location]' value='[vacancies].[location]' />
          <map key='[noc_code (averagewage)]' value='[averagewage].[noc_code]' />
          <map key='[noc_code (machinelearning)]' value='[machinelearning].[noc_code]' />
          <map key='[noc_code (noc)]' value='[noc].[noc_code]' />
          <map key='[noc_code (tsoutputcanada)]' value='[tsoutputcanada].[noc_code]' />
          <map key='[noc_code (tsoutputprovinces)]' value='[tsoutputprovinces].[noc_code]' />
          <map key='[noc_code]' value='[vacancies].[noc_code]' />
          <map key='[noc_desc (machinelearning)]' value='[machinelearning].[noc_desc]' />
          <map key='[noc_desc (tsoutputcanada)]' value='[tsoutputcanada].[noc_desc]' />
          <map key='[noc_desc (tsoutputprovinces)]' value='[tsoutputprovinces].[noc_desc]' />
          <map key='[noc_desc]' value='[noc].[noc_desc]' />
          <map key='[predicted_vacancies (tsoutputcanada)]' value='[tsoutputcanada].[predicted_vacancies]' />
          <map key='[predicted_vacancies (tsoutputprovinces)]' value='[tsoutputprovinces].[predicted_vacancies]' />
          <map key='[predicted_vacancies]' value='[machinelearning].[predicted_vacancies]' />
          <map key='[quarter (averagewage)]' value='[averagewage].[quarter]' />
          <map key='[quarter]' value='[vacancies].[quarter]' />
          <map key='[ref_date (averagewage)]' value='[averagewage].[ref_date]' />
          <map key='[ref_date (machinelearning)]' value='[machinelearning].[ref_date]' />
          <map key='[ref_date (tsoutputcanada)]' value='[tsoutputcanada].[ref_date]' />
          <map key='[ref_date (tsoutputprovinces)]' value='[tsoutputprovinces].[ref_date]' />
          <map key='[ref_date]' value='[vacancies].[ref_date]' />
          <map key='[total_vacancies (machinelearning)]' value='[machinelearning].[total_vacancies]' />
          <map key='[total_vacancies (tsoutputcanada)]' value='[tsoutputcanada].[total_vacancies]' />
          <map key='[total_vacancies (tsoutputprovinces)]' value='[tsoutputprovinces].[total_vacancies]' />
          <map key='[total_vacancies]' value='[vacancies].[total_vacancies]' />
          <map key='[year (averagewage)]' value='[averagewage].[year]' />
          <map key='[year]' value='[vacancies].[year]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>composedid</remote-name>
            <remote-type>130</remote-type>
            <local-name>[composedid]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>composedid</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>130</remote-type>
            <local-name>[year]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>quarter</remote-name>
            <remote-type>130</remote-type>
            <local-name>[quarter]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>quarter</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_details</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_details]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>job_details</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_vacancies]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>total_vacancies</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_1CF9DFD8CD0543D291646770DB3511CD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>composedid</remote-name>
            <remote-type>130</remote-type>
            <local-name>[composedid (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>composedid</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>11</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[year (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>quarter</remote-name>
            <remote-type>3</remote-type>
            <local-name>[quarter (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>quarter</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_char</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_char]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>job_char</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>avg_wage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[avg_wage]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>avg_wage</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>20</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geo</remote-name>
            <remote-type>130</remote-type>
            <local-name>[geo (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>geo</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_desc</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_desc (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>noc_desc</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_char</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_char (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>job_char</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_vacancies (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>total_vacancies</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predicted_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predicted_vacancies]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>predicted_vacancies</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_E01031A8C8E941618050649479DAA80A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>index</remote-name>
            <remote-type>20</remote-type>
            <local-name>[index]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>index</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_2B60116364E74DE095315743401CF120]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>REF_DATE</remote-name>
            <remote-type>7</remote-type>
            <local-name>[REF_DATE]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>REF_DATE</remote-alias>
            <ordinal>28</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_2B60116364E74DE095315743401CF120]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GEO</remote-name>
            <remote-type>130</remote-type>
            <local-name>[GEO]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>GEO</remote-alias>
            <ordinal>29</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_2B60116364E74DE095315743401CF120]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NOC</remote-name>
            <remote-type>130</remote-type>
            <local-name>[NOC]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>NOC</remote-alias>
            <ordinal>30</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_2B60116364E74DE095315743401CF120]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>JOB_CHAR</remote-name>
            <remote-type>130</remote-type>
            <local-name>[JOB_CHAR]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>JOB_CHAR</remote-alias>
            <ordinal>31</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_2B60116364E74DE095315743401CF120]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PREDICTED_VACANCIES</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PREDICTED_VACANCIES]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>PREDICTED_VACANCIES</remote-alias>
            <ordinal>32</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_2B60116364E74DE095315743401CF120]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NocCode</remote-name>
            <remote-type>130</remote-type>
            <local-name>[NocCode]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>NocCode</remote-alias>
            <ordinal>33</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_2B60116364E74DE095315743401CF120]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (noc)]</local-name>
            <parent-name>[noc]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>35</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[noc_0B9F870BAAC145558901DAF1A7969D8D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_desc</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_desc]</local-name>
            <parent-name>[noc]</parent-name>
            <remote-alias>noc_desc</remote-alias>
            <ordinal>36</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[noc_0B9F870BAAC145558901DAF1A7969D8D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date (tsoutputcanada)]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>38</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_1692DAA117F4418D9436CFF252A1F957]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geo</remote-name>
            <remote-type>130</remote-type>
            <local-name>[geo]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>geo</remote-alias>
            <ordinal>39</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_1692DAA117F4418D9436CFF252A1F957]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (tsoutputcanada)]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>40</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_1692DAA117F4418D9436CFF252A1F957]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_desc</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_desc (tsoutputcanada)]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>noc_desc</remote-alias>
            <ordinal>41</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_1692DAA117F4418D9436CFF252A1F957]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_char</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_char (tsoutputcanada)]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>job_char</remote-alias>
            <ordinal>42</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_1692DAA117F4418D9436CFF252A1F957]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_vacancies (tsoutputcanada)]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>total_vacancies</remote-alias>
            <ordinal>43</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_1692DAA117F4418D9436CFF252A1F957]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predicted_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predicted_vacancies (tsoutputcanada)]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>predicted_vacancies</remote-alias>
            <ordinal>44</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_1692DAA117F4418D9436CFF252A1F957]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>idtspr</remote-name>
            <remote-type>130</remote-type>
            <local-name>[idtspr]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>idtspr</remote-alias>
            <ordinal>46</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>47</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geo</remote-name>
            <remote-type>130</remote-type>
            <local-name>[geo (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>geo</remote-alias>
            <ordinal>48</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predicted_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predicted_vacancies (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>predicted_vacancies</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>50</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_desc</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_desc (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>noc_desc</remote-alias>
            <ordinal>51</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_char</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_char (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>job_char</remote-alias>
            <ordinal>52</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_vacancies (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>total_vacancies</remote-alias>
            <ordinal>53</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='NOC_Broad' datatype='string' name='[Calculation_2755077114843037698]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [noc_code (noc)]=&quot;0&quot; THEN &quot;Management&quot;ELSEIF [noc_code (noc)]=&quot;1&quot; THEN &quot;Business, finance and administration&quot;&#10;ELSEIF [noc_code (noc)]=&quot;1&quot; THEN &quot;Business, finance and administration&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2&quot; THEN &quot;Natural and applied sciences&quot;&#10;ELSEIF [noc_code (noc)]=&quot;3&quot; THEN &quot;Health&quot;&#10;ELSEIF [noc_code (noc)]=&quot;4&quot; THEN &quot;Education, law and social, community and government&quot;&#10;ELSEIF [noc_code (noc)]=&quot;5&quot; THEN &quot;Art, culture, recreation and sport&quot;&#10;ELSEIF [noc_code (noc)]=&quot;6&quot; THEN &quot;Sales and service&quot;&#10;ELSEIF [noc_code (noc)]=&quot;7&quot; THEN &quot;Trades, transport and equipment&quot;&#10;ELSEIF [noc_code (noc)]=&quot;8&quot; THEN &quot;Natural resources, agriculture&quot;&#10;ELSEIF [noc_code (noc)]=&quot;9&quot; THEN &quot;Manufacturing&quot;&#10;ELSE &quot;zOthers_nocs&quot;&#10;END' />
      </column>
      <column caption='NOC_Unit' datatype='string' name='[Calculation_2755077114899828740]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [noc_code (noc)]=&quot;2172&quot; THEN &quot;Data administrators&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2174&quot; THEN &quot;Computer programmers&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2175&quot; THEN &quot;Web developers&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2161&quot; THEN &quot;Statistical analyst&quot;&#10;ELSEIF [noc_code (noc)]=&quot;1112&quot; THEN &quot;Financial analyst&quot;&#10;ELSE &quot;zOthers_nocs&quot;&#10;END' />
      </column>
      <column caption='Total_Vacancies_norm' datatype='real' name='[Calculation_2755077114943479815]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[total_vacancies]/ 1000' />
      </column>
      <column caption='Job Char1' datatype='string' name='[JOB_CHAR]' role='dimension' type='nominal' />
      <column caption='NOC_Broad_Units' datatype='string' name='[NOC_Broad (copy)_2755077114930925573]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [noc_code (noc)]=&quot;0&quot; THEN &quot;Management&quot;ELSEIF [noc_code (noc)]=&quot;1&quot; THEN &quot;Business, finance and administration&quot;&#10;ELSEIF [noc_code (noc)]=&quot;1&quot; THEN &quot;Business, finance and administration&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2&quot; THEN &quot;Natural and applied sciences&quot;&#10;ELSEIF [noc_code (noc)]=&quot;3&quot; THEN &quot;Health&quot;&#10;ELSEIF [noc_code (noc)]=&quot;4&quot; THEN &quot;Education, law and social, community and government&quot;&#10;ELSEIF [noc_code (noc)]=&quot;5&quot; THEN &quot;Art, culture, recreation and sport&quot;&#10;ELSEIF [noc_code (noc)]=&quot;6&quot; THEN &quot;Sales and service&quot;&#10;ELSEIF [noc_code (noc)]=&quot;7&quot; THEN &quot;Trades, transport and equipment&quot;&#10;ELSEIF [noc_code (noc)]=&quot;8&quot; THEN &quot;Natural resources, agriculture&quot;&#10;ELSEIF [noc_code (noc)]=&quot;9&quot; THEN &quot;Manufacturing&quot;&#10;ELSEIF  [noc_code (noc)]=&quot;2172&quot; THEN &quot;unitData administrators&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2174&quot; THEN &quot;unitComputer programmers&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2175&quot; THEN &quot;unitWeb developers&quot;&#10;ELSEIF [noc_code (noc)]=&quot;2161&quot; THEN &quot;unitStatistical analyst&quot;&#10;ELSEIF [noc_code (noc)]=&quot;1112&quot; THEN &quot;unitFinancial analyst&quot;&#10;ELSE &quot;zOthers_nocs&quot;&#10;END' />
      </column>
      <column caption='Noc Code1' datatype='string' name='[NocCode]' role='dimension' type='nominal' />
      <column caption='Predicted Vacancies' datatype='integer' name='[PREDICTED_VACANCIES]' role='measure' type='quantitative' />
      <column aggregation='Count' caption='Ref Date1' datatype='date' datatype-customized='true' name='[REF_DATE]' role='dimension' type='ordinal' />
      <_.fcp.ObjectModelTableType.true...column caption='averagewage' datatype='table' name='[__tableau_internal_object_id__].[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='machinelearning' datatype='table' name='[__tableau_internal_object_id__].[machinelearning_E01031A8C8E941618050649479DAA80A]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='mlpoutputcod' datatype='table' name='[__tableau_internal_object_id__].[mlpoutputcod_2B60116364E74DE095315743401CF120]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='noc' datatype='table' name='[__tableau_internal_object_id__].[noc_0B9F870BAAC145558901DAF1A7969D8D]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='tsoutputcanada' datatype='table' name='[__tableau_internal_object_id__].[tsoutputcanada_1692DAA117F4418D9436CFF252A1F957]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='tsoutputprovinces' datatype='table' name='[__tableau_internal_object_id__].[tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='vacancies' datatype='table' name='[__tableau_internal_object_id__].[vacancies_1CF9DFD8CD0543D291646770DB3511CD]' role='measure' type='quantitative' />
      <column caption='Avg Wage' datatype='real' name='[avg_wage]' role='measure' type='quantitative' />
      <column caption='Geo (Machinelearning)' datatype='string' name='[geo (machinelearning)]' role='dimension' type='nominal' />
      <column caption='Geo (Tsoutputprovinces)' datatype='string' name='[geo (tsoutputprovinces)]' role='dimension' semantic-role='' type='nominal' />
      <column caption='Geo' datatype='string' name='[geo]' role='dimension' type='nominal' />
      <column caption='Id' datatype='integer' name='[id]' role='dimension' type='ordinal' />
      <column caption='Idtspr' datatype='string' name='[idtspr]' role='dimension' type='nominal' />
      <column caption='Index' datatype='string' datatype-customized='true' default-role='measure' default-type='quantitative' name='[index]' role='dimension' type='nominal' />
      <column caption='Job Char (Machinelearning)' datatype='string' name='[job_char (machinelearning)]' role='dimension' type='nominal' />
      <column caption='Job Char (Tsoutputcanada)' datatype='string' name='[job_char (tsoutputcanada)]' role='dimension' type='nominal' />
      <column caption='Job Char (Tsoutputprovinces)' datatype='string' name='[job_char (tsoutputprovinces)]' role='dimension' semantic-role='' type='nominal' />
      <column caption='Job Char' datatype='string' name='[job_char]' role='dimension' type='nominal' />
      <column caption='Job Details' datatype='string' name='[job_details]' role='dimension' type='nominal' />
      <column caption='Location (Averagewage)' datatype='string' name='[location (averagewage)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Noc Code (Averagewage)' datatype='string' name='[noc_code (averagewage)]' role='dimension' type='nominal' />
      <column caption='Noc Code (Machinelearning)' datatype='string' name='[noc_code (machinelearning)]' role='dimension' type='nominal' />
      <column caption='Noc Code (Noc)' datatype='string' name='[noc_code (noc)]' role='dimension' type='nominal' />
      <column caption='Noc Code (Tsoutputcanada)' datatype='string' name='[noc_code (tsoutputcanada)]' role='dimension' type='nominal' />
      <column caption='Noc Code (Tsoutputprovinces)' datatype='string' name='[noc_code (tsoutputprovinces)]' role='dimension' semantic-role='' type='nominal' />
      <column caption='Noc Code' datatype='string' name='[noc_code]' role='dimension' type='nominal' />
      <column caption='Noc Desc (Machinelearning)' datatype='string' name='[noc_desc (machinelearning)]' role='dimension' type='nominal' />
      <column caption='Noc Desc (Tsoutputcanada)' datatype='string' name='[noc_desc (tsoutputcanada)]' role='dimension' type='nominal' />
      <column caption='Noc Desc (Tsoutputprovinces)' datatype='string' name='[noc_desc (tsoutputprovinces)]' role='dimension' semantic-role='' type='nominal' />
      <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
      <column caption='predicted vacancies (TSmodel output Canada)' datatype='real' name='[predicted_vacancies (TSmodel_output_Canada)]' role='measure' type='quantitative' />
      <column caption='Predicted Vacancies (Tsoutputcanada)' datatype='real' name='[predicted_vacancies (tsoutputcanada)]' role='measure' type='quantitative' />
      <column caption='Predicted Vacancies (Tsoutputprovinces)' datatype='real' name='[predicted_vacancies (tsoutputprovinces)]' role='measure' type='quantitative' />
      <column caption='Predicted Vacancies1' datatype='real' name='[predicted_vacancies]' role='measure' type='quantitative' />
      <column caption='Quarter (Averagewage)' datatype='integer' name='[quarter (averagewage)]' role='dimension' type='quantitative' />
      <column caption='Quarter' datatype='string' name='[quarter]' role='dimension' type='nominal' />
      <column caption='ref date (TSmodel output Canada)' datatype='date' datatype-customized='true' name='[ref_date (TSmodel_output_Canada)]' role='dimension' type='ordinal' />
      <column caption='Ref Date (Averagewage)' datatype='date' name='[ref_date (averagewage)]' role='dimension' type='ordinal' />
      <column caption='Ref Date (Machinelearning)' datatype='date' name='[ref_date (machinelearning)]' role='dimension' type='ordinal' />
      <column caption='Ref Date (Tsoutputcanada)' datatype='date' name='[ref_date (tsoutputcanada)]' role='dimension' type='ordinal' />
      <column caption='Ref Date (Tsoutputprovinces)' datatype='date' name='[ref_date (tsoutputprovinces)]' role='dimension' type='ordinal' />
      <column caption='Ref Date' datatype='date' name='[ref_date]' role='dimension' type='ordinal' />
      <column caption='Total Vacancies (Machinelearning)' datatype='real' name='[total_vacancies (machinelearning)]' role='measure' type='quantitative' />
      <column caption='Total Vacancies (Tsoutputcanada)' datatype='real' name='[total_vacancies (tsoutputcanada)]' role='measure' type='quantitative' />
      <column caption='Total Vacancies (Tsoutputprovinces)' datatype='real' name='[total_vacancies (tsoutputprovinces)]' role='measure' type='quantitative' />
      <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
      <column caption='Year (Averagewage)' datatype='integer' name='[year (averagewage)]' role='dimension' type='quantitative' />
      <column caption='Year' datatype='string' name='[year]' role='dimension' type='nominal' />
      <column-instance column='[__tableau_internal_object_id__].[averagewage_7B0632A640E344BEBDE89B6231CEBEDA]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:averagewage_7B0632A640E344BEBDE89B6231CEBEDA:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[machinelearning_E01031A8C8E941618050649479DAA80A]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:machinelearning_E01031A8C8E941618050649479DAA80A:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[mlpoutputcod_2B60116364E74DE095315743401CF120]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:mlpoutputcod_2B60116364E74DE095315743401CF120:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[noc_0B9F870BAAC145558901DAF1A7969D8D]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:noc_0B9F870BAAC145558901DAF1A7969D8D:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[tsoutputcanada_1692DAA117F4418D9436CFF252A1F957]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:tsoutputcanada_1692DAA117F4418D9436CFF252A1F957:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07:qk]' pivot='key' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[vacancies_1CF9DFD8CD0543D291646770DB3511CD]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:vacancies_1CF9DFD8CD0543D291646770DB3511CD:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PREDICTED_VACANCIES]' derivation='Avg' name='[avg:PREDICTED_VACANCIES:qk]' pivot='key' type='quantitative' />
      <column-instance column='[avg_wage]' derivation='Avg' name='[avg:avg_wage:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_vacancies]' derivation='Avg' name='[avg:total_vacancies:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_2755077114843037698]' derivation='None' name='[none:Calculation_2755077114843037698:nk]' pivot='key' type='nominal' />
      <column-instance column='[job_char]' derivation='None' name='[none:job_char:nk]' pivot='key' type='nominal' />
      <column-instance column='[job_details]' derivation='None' name='[none:job_details:nk]' pivot='key' type='nominal' />
      <column-instance column='[location (averagewage)]' derivation='None' name='[none:location (averagewage):nk]' pivot='key' type='nominal' />
      <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
      <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_2755077114943479815]' derivation='Sum' name='[sum:Calculation_2755077114943479815:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PREDICTED_VACANCIES]' derivation='Sum' name='[sum:PREDICTED_VACANCIES:qk]' pivot='key' type='quantitative' />
      <column-instance column='[avg_wage]' derivation='Sum' name='[sum:avg_wage:qk]' pivot='key' type='quantitative' />
      <column-instance column='[predicted_vacancies (TSmodel_output_Canada)]' derivation='Sum' name='[sum:predicted_vacancies (TSmodel_output_Canada):qk]' pivot='key' type='quantitative' />
      <column-instance column='[predicted_vacancies (tsoutputcanada)]' derivation='Sum' name='[sum:predicted_vacancies (tsoutputcanada):qk]' pivot='key' type='quantitative' />
      <column-instance column='[predicted_vacancies (tsoutputprovinces)]' derivation='Sum' name='[sum:predicted_vacancies (tsoutputprovinces):qk]' pivot='key' type='quantitative' />
      <column-instance column='[predicted_vacancies]' derivation='Sum' name='[sum:predicted_vacancies:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_vacancies (machinelearning)]' derivation='Sum' name='[sum:total_vacancies (machinelearning):qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_vacancies (tsoutputcanada)]' derivation='Sum' name='[sum:total_vacancies (tsoutputcanada):qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_vacancies (tsoutputprovinces)]' derivation='Sum' name='[sum:total_vacancies (tsoutputprovinces):qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
      <group caption='Action (Job Char)' hidden='true' name='[Action (Job Char)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[job_char]' />
        </groupfilter>
      </group>
      <group caption='Action (Job Details)' hidden='true' name='[Action (Job Details)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[job_details]' />
        </groupfilter>
      </group>
      <group caption='Action (Location (Averagewage))' hidden='true' name='[Action (Location (Averagewage))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[location (averagewage)]' />
        </groupfilter>
      </group>
      <group caption='Action (Location)' hidden='true' name='[Action (Location)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[location]' />
        </groupfilter>
      </group>
      <group caption='Action (NOC_Broad)' hidden='true' name='[Action (NOC_Broad)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_2755077114843037698]' />
        </groupfilter>
      </group>
      <group caption='Action (Noc Code,Noc Desc)' hidden='true' name='[Action (Noc Code,Noc Desc)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[noc_code]' />
          <groupfilter function='level-members' level='[noc_desc]' />
        </groupfilter>
      </group>
      <group caption='Action (Noc Desc)' hidden='true' name='[Action (Noc Desc)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[noc_desc]' />
        </groupfilter>
      </group>
      <group caption='Action (Noc Desc,Quarter)' hidden='true' name='[Action (Noc Desc,Quarter)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[noc_desc]' />
          <groupfilter function='level-members' level='[quarter]' />
        </groupfilter>
      </group>
      <group caption='Action (Quarter)' hidden='true' name='[Action (Quarter)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[quarter]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' rowDisplayCount='10' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:location:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Ontario&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Alberta&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Newfoundland and Labrador&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yukon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Prince Edward Island&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Northwest Territories&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;British Columbia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nova Scotia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>%null%</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Quebec&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nunavut&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Manitoba&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saskatchewan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;New Brunswick&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:location (averagewage):nk]' palette='blue_teal_10_0' type='palette'>
            <map to='#2c5985'>
              <bucket>&quot;Nunavut&quot;</bucket>
            </map>
            <map to='#2e648e'>
              <bucket>&quot;Northwest Territories&quot;</bucket>
            </map>
            <map to='#317097'>
              <bucket>&quot;Yukon&quot;</bucket>
            </map>
            <map to='#347da0'>
              <bucket>&quot;Prince Edward Island&quot;</bucket>
            </map>
            <map to='#3589a9'>
              <bucket>&quot;Newfoundland and Labrador&quot;</bucket>
            </map>
            <map to='#3b95b1'>
              <bucket>&quot;Saskatchewan&quot;</bucket>
            </map>
            <map to='#45a2b9'>
              <bucket>&quot;New Brunswick&quot;</bucket>
            </map>
            <map to='#5aadbf'>
              <bucket>&quot;Nova Scotia&quot;</bucket>
            </map>
            <map to='#6eb8c5'>
              <bucket>&quot;Manitoba&quot;</bucket>
            </map>
            <map to='#81c3cb'>
              <bucket>&quot;Alberta&quot;</bucket>
            </map>
            <map to='#93cdcf'>
              <bucket>&quot;British Columbia&quot;</bucket>
            </map>
            <map to='#a7d8d3'>
              <bucket>&quot;Quebec&quot;</bucket>
            </map>
            <map to='#bce4d8'>
              <bucket>&quot;Ontario&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:noc_desc:nk]' palette='color_blind_10_0' type='palette'>
            <map to='#1170aa'>
              <bucket>&quot;Management occupations&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;Occupations in art, culture, recreation and sport&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;Occupations in education, law and social, community and government services&quot;</bucket>
            </map>
            <map to='#7b848f'>
              <bucket>&quot;Business, finance and administration occupations&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;Health occupations&quot;</bucket>
            </map>
            <map to='#a3cce9'>
              <bucket>&quot;Natural resources, agriculture and related production occupations&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;Trades, transport and equipment operators and related occupations&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot;Sales and service occupations&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;Natural and applied sciences and related occupations&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;Occupations in manufacturing and utilities&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:job_details:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Full-time&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>%null%</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Part-time&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:job_char:nk]' palette='blue_teal_10_0' type='palette'>
            <map to='#2c5985'>
              <bucket>&quot;Part-time&quot;</bucket>
            </map>
            <map to='#bce4d8'>
              <bucket>&quot;Full-time&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_2755077114843037698:nk]' palette='tableau20_10_0' type='palette'>
            <map to='#1170aa'>
              <bucket>&quot;zOthers_nocs&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Manufacturing&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Management&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Education, law and social, community and government&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sales and service&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Natural and applied sciences&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Business, finance and administration&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Trades, transport and equipment&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Natural resources, agriculture&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Health&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Test&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Art, culture, recreation and sport&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[__tableau_internal_object_id__].[cnt:tsoutputcanada_1692DAA117F4418D9436CFF252A1F957:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:predicted_vacancies (canada_vacancies):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[avg:Calculation_2016346038876459008:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[avg:total_vacancies:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:Calculation_2016346038876459008:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:Calculation_2755077114943479815:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:total_vacancies (canada_vacancies):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:total_vacancies (tsoutputcanada):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:total_vacancies:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:avg_wage:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:total_vacancies (machinelearning):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:total_vacancies:qk]:1&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[__tableau_internal_object_id__].[cnt:in_1A6F6E30587840348400577EA8B13DB1:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:predicted_vacancies (tsoutputprovinces):qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[__tableau_internal_object_id__].[cnt:TSmodel_output_Canada_C99A40D972C44778BA35E2213C24C911:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[__tableau_internal_object_id__].[cnt:tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[__tableau_internal_object_id__].[cnt:machinelearning_CA1390229E114C3E9812CEAE3C66CAFE:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[__tableau_internal_object_id__].[cnt:mlpoutputcod_2B60116364E74DE095315743401CF120:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[__tableau_internal_object_id__].[cnt:averagewage_7B0632A640E344BEBDE89B6231CEBEDA:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[__tableau_internal_object_id__].[cnt:noc_0B9F870BAAC145558901DAF1A7969D8D:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[avg:PREDICTED_VACANCIES:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:predicted_vacancies (TSmodel_output_Canada):qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:predicted_vacancies (tsoutputcanada):qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:predicted_vacancies:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[__tableau_internal_object_id__].[cnt:vacancies_1CF9DFD8CD0543D291646770DB3511CD:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[avg:avg_wage:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:PREDICTED_VACANCIES:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:total_vacancies (tsoutputprovinces):qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[__tableau_internal_object_id__].[cnt:MLP!Test!case0_1781A7A0FAFE4F9DB35790486C9A7324:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[usr:Calculation_3842907531804069888:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[__tableau_internal_object_id__].[cnt:canada_vacancies_38BA6DF68145489DB5DFB279E00FD78E:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[__tableau_internal_object_id__].[cnt:machinelearning_E01031A8C8E941618050649479DAA80A:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='averagewage' id='averagewage_7B0632A640E344BEBDE89B6231CEBEDA'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='averagewage' table='[public].[averagewage]' type='table' />
            </properties>
          </object>
          <object caption='machinelearning' id='machinelearning_E01031A8C8E941618050649479DAA80A'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='machinelearning' table='[public].[machinelearning]' type='table' />
            </properties>
          </object>
          <object caption='mlpoutputcod' id='mlpoutputcod_2B60116364E74DE095315743401CF120'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='mlpoutputcod' table='[public].[mlpoutputcod]' type='table'>
                <columns>
                  <column datatype='date' date-parse-format='yyyy-MM-dd' name='REF_DATE' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='noc' id='noc_0B9F870BAAC145558901DAF1A7969D8D'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='noc' table='[public].[noc]' type='table' />
            </properties>
          </object>
          <object caption='tsoutputcanada' id='tsoutputcanada_1692DAA117F4418D9436CFF252A1F957'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='tsoutputcanada' table='[public].[tsoutputcanada]' type='table' />
            </properties>
          </object>
          <object caption='tsoutputprovinces' id='tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='tsoutputprovinces' table='[public].[tsoutputprovinces]' type='table' />
            </properties>
          </object>
          <object caption='vacancies' id='vacancies_1CF9DFD8CD0543D291646770DB3511CD'>
            <properties context=''>
              <relation connection='postgres.1yg2bhp1qawoxl1887bx70g7vyd3 (copy 2)' name='vacancies' table='[public].[vacancies]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[ref_date (averagewage)]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[location (averagewage)]' />
              </expression>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[noc_code (averagewage)]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[job_char]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point object-id='averagewage_7B0632A640E344BEBDE89B6231CEBEDA' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[ref_date (machinelearning)]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[geo (machinelearning)]' />
              </expression>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[noc_code (machinelearning)]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[job_char (machinelearning)]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point object-id='machinelearning_E01031A8C8E941618050649479DAA80A' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[REF_DATE]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[GEO]' />
              </expression>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[NocCode]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[JOB_CHAR]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point object-id='mlpoutputcod_2B60116364E74DE095315743401CF120' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[noc_code]' />
              <expression op='[noc_code (noc)]' />
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point _.fcp.ObjectModelRelationshipPerfOptions.true...is-db-set-unique-key='true' object-id='noc_0B9F870BAAC145558901DAF1A7969D8D' unique-key='true' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[ref_date (tsoutputcanada)]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[geo]' />
              </expression>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[noc_code (tsoutputcanada)]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[job_char (tsoutputcanada)]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point _.fcp.ObjectModelRelationshipPerfOptions.true...is-db-set-unique-key='true' object-id='tsoutputcanada_1692DAA117F4418D9436CFF252A1F957' unique-key='true' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[ref_date (tsoutputprovinces)]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[geo (tsoutputprovinces)]' />
              </expression>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[noc_code (tsoutputprovinces)]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[job_char (tsoutputprovinces)]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_1CF9DFD8CD0543D291646770DB3511CD' />
            <second-end-point object-id='tsoutputprovinces_EEC26D88BF544238B54241E56C40AF07' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='vacancies (Vacancies)' inline='true' name='federated.1gmioib0088thf1bsq5b71apq648' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='group3db.cueberfdee85.us-east-2.rds.amazonaws.com' name='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1'>
            <connection authentication='username-password' class='postgres' dbname='Vacancies' odbc-native-protocol='' one-time-sql='' port='5432' server='group3db.cueberfdee85.us-east-2.rds.amazonaws.com' username='postgres' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='averagewage' table='[public].[averagewage]' type='table' />
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='vacancies' table='[public].[vacancies]' type='table' />
          <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='averagewage' table='[public].[averagewage]' type='table' />
          <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='machinelearning' table='[public].[machinelearning]' type='table' />
          <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='mlpoutputcod' table='[public].[mlpoutputcod]' type='table'>
            <columns>
              <column datatype='date' date-parse-format='yyyy-MM-dd' name='REF_DATE' />
            </columns>
          </relation>
          <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='noc' table='[public].[noc]' type='table' />
          <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='tsoutputcanada' table='[public].[tsoutputcanada]' type='table' />
          <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='tsoutputprovinces' table='[public].[tsoutputprovinces]' type='table' />
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[GEO]' value='[mlpoutputcod].[GEO]' />
          <map key='[JOB_CHAR]' value='[mlpoutputcod].[JOB_CHAR]' />
          <map key='[NOC]' value='[mlpoutputcod].[NOC]' />
          <map key='[NocCode]' value='[mlpoutputcod].[NocCode]' />
          <map key='[PREDICTED_VACANCIES]' value='[mlpoutputcod].[PREDICTED_VACANCIES]' />
          <map key='[REF_DATE]' value='[mlpoutputcod].[REF_DATE]' />
          <map key='[avg_wage]' value='[averagewage].[avg_wage]' />
          <map key='[composedid (averagewage)]' value='[averagewage].[composedid]' />
          <map key='[composedid]' value='[vacancies].[composedid]' />
          <map key='[geo (tsoutputcanada)]' value='[tsoutputcanada].[geo]' />
          <map key='[geo (tsoutputprovinces)]' value='[tsoutputprovinces].[geo]' />
          <map key='[geo]' value='[machinelearning].[geo]' />
          <map key='[id]' value='[machinelearning].[id]' />
          <map key='[idtspr]' value='[tsoutputprovinces].[idtspr]' />
          <map key='[index]' value='[mlpoutputcod].[index]' />
          <map key='[job_char (averagewage)]' value='[averagewage].[job_char]' />
          <map key='[job_char (tsoutputcanada)]' value='[tsoutputcanada].[job_char]' />
          <map key='[job_char (tsoutputprovinces)]' value='[tsoutputprovinces].[job_char]' />
          <map key='[job_char]' value='[machinelearning].[job_char]' />
          <map key='[job_details]' value='[vacancies].[job_details]' />
          <map key='[location (averagewage)]' value='[averagewage].[location]' />
          <map key='[location]' value='[vacancies].[location]' />
          <map key='[noc_code (averagewage)]' value='[averagewage].[noc_code]' />
          <map key='[noc_code (machinelearning)]' value='[machinelearning].[noc_code]' />
          <map key='[noc_code (noc)]' value='[noc].[noc_code]' />
          <map key='[noc_code (tsoutputcanada)]' value='[tsoutputcanada].[noc_code]' />
          <map key='[noc_code (tsoutputprovinces)]' value='[tsoutputprovinces].[noc_code]' />
          <map key='[noc_code]' value='[vacancies].[noc_code]' />
          <map key='[noc_desc (machinelearning)]' value='[machinelearning].[noc_desc]' />
          <map key='[noc_desc (tsoutputcanada)]' value='[tsoutputcanada].[noc_desc]' />
          <map key='[noc_desc (tsoutputprovinces)]' value='[tsoutputprovinces].[noc_desc]' />
          <map key='[noc_desc]' value='[noc].[noc_desc]' />
          <map key='[predicted_vacancies (machinelearning)]' value='[machinelearning].[predicted_vacancies]' />
          <map key='[predicted_vacancies (tsoutputprovinces)]' value='[tsoutputprovinces].[predicted_vacancies]' />
          <map key='[predicted_vacancies]' value='[tsoutputcanada].[predicted_vacancies]' />
          <map key='[quarter (averagewage)]' value='[averagewage].[quarter]' />
          <map key='[quarter]' value='[vacancies].[quarter]' />
          <map key='[ref_date (averagewage)]' value='[averagewage].[ref_date]' />
          <map key='[ref_date (machinelearning)]' value='[machinelearning].[ref_date]' />
          <map key='[ref_date (tsoutputcanada)]' value='[tsoutputcanada].[ref_date]' />
          <map key='[ref_date (tsoutputprovinces)]' value='[tsoutputprovinces].[ref_date]' />
          <map key='[ref_date]' value='[vacancies].[ref_date]' />
          <map key='[total_vacancies (machinelearning)]' value='[machinelearning].[total_vacancies]' />
          <map key='[total_vacancies (tsoutputcanada)]' value='[tsoutputcanada].[total_vacancies]' />
          <map key='[total_vacancies (tsoutputprovinces)]' value='[tsoutputprovinces].[total_vacancies]' />
          <map key='[total_vacancies]' value='[vacancies].[total_vacancies]' />
          <map key='[year (averagewage)]' value='[averagewage].[year]' />
          <map key='[year]' value='[vacancies].[year]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>composedid</remote-name>
            <remote-type>130</remote-type>
            <local-name>[composedid]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>composedid</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_7D99A32814944484AAAE3182202D4DB0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_7D99A32814944484AAAE3182202D4DB0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>130</remote-type>
            <local-name>[year]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_7D99A32814944484AAAE3182202D4DB0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>quarter</remote-name>
            <remote-type>130</remote-type>
            <local-name>[quarter]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>quarter</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_7D99A32814944484AAAE3182202D4DB0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_7D99A32814944484AAAE3182202D4DB0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_7D99A32814944484AAAE3182202D4DB0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_details</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_details]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>job_details</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_7D99A32814944484AAAE3182202D4DB0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_vacancies]</local-name>
            <parent-name>[vacancies]</parent-name>
            <remote-alias>total_vacancies</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[vacancies_7D99A32814944484AAAE3182202D4DB0]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>composedid</remote-name>
            <remote-type>130</remote-type>
            <local-name>[composedid (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>composedid</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_9FC96C3855A44C6EA50B3DC95B17FD23]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>11</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_9FC96C3855A44C6EA50B3DC95B17FD23]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>3</remote-type>
            <local-name>[year (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_9FC96C3855A44C6EA50B3DC95B17FD23]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>quarter</remote-name>
            <remote-type>3</remote-type>
            <local-name>[quarter (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>quarter</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_9FC96C3855A44C6EA50B3DC95B17FD23]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_9FC96C3855A44C6EA50B3DC95B17FD23]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_9FC96C3855A44C6EA50B3DC95B17FD23]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_char</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_char (averagewage)]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>job_char</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_9FC96C3855A44C6EA50B3DC95B17FD23]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>avg_wage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[avg_wage]</local-name>
            <parent-name>[averagewage]</parent-name>
            <remote-alias>avg_wage</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[averagewage_9FC96C3855A44C6EA50B3DC95B17FD23]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_D42C2410EB704A6B8888C03F6870105A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>20</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_D42C2410EB704A6B8888C03F6870105A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geo</remote-name>
            <remote-type>130</remote-type>
            <local-name>[geo]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>geo</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_D42C2410EB704A6B8888C03F6870105A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_D42C2410EB704A6B8888C03F6870105A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_desc</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_desc (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>noc_desc</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_D42C2410EB704A6B8888C03F6870105A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_char</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_char]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>job_char</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_D42C2410EB704A6B8888C03F6870105A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_vacancies (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>total_vacancies</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_D42C2410EB704A6B8888C03F6870105A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predicted_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predicted_vacancies (machinelearning)]</local-name>
            <parent-name>[machinelearning]</parent-name>
            <remote-alias>predicted_vacancies</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[machinelearning_D42C2410EB704A6B8888C03F6870105A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>index</remote-name>
            <remote-type>20</remote-type>
            <local-name>[index]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>index</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_4D35A8A922964695BB103E66FE98C7D2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>REF_DATE</remote-name>
            <remote-type>7</remote-type>
            <local-name>[REF_DATE]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>REF_DATE</remote-alias>
            <ordinal>28</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_4D35A8A922964695BB103E66FE98C7D2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GEO</remote-name>
            <remote-type>130</remote-type>
            <local-name>[GEO]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>GEO</remote-alias>
            <ordinal>29</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_4D35A8A922964695BB103E66FE98C7D2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NOC</remote-name>
            <remote-type>130</remote-type>
            <local-name>[NOC]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>NOC</remote-alias>
            <ordinal>30</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_4D35A8A922964695BB103E66FE98C7D2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>JOB_CHAR</remote-name>
            <remote-type>130</remote-type>
            <local-name>[JOB_CHAR]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>JOB_CHAR</remote-alias>
            <ordinal>31</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_4D35A8A922964695BB103E66FE98C7D2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PREDICTED_VACANCIES</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PREDICTED_VACANCIES]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>PREDICTED_VACANCIES</remote-alias>
            <ordinal>32</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_BIGINT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SBIGINT&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_4D35A8A922964695BB103E66FE98C7D2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NocCode</remote-name>
            <remote-type>130</remote-type>
            <local-name>[NocCode]</local-name>
            <parent-name>[mlpoutputcod]</parent-name>
            <remote-alias>NocCode</remote-alias>
            <ordinal>33</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>8190</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WLONGVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[mlpoutputcod_4D35A8A922964695BB103E66FE98C7D2]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (noc)]</local-name>
            <parent-name>[noc]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>35</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[noc_ED5CBABE8E054CBEA8842485B7CAAB0B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_desc</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_desc]</local-name>
            <parent-name>[noc]</parent-name>
            <remote-alias>noc_desc</remote-alias>
            <ordinal>36</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[noc_ED5CBABE8E054CBEA8842485B7CAAB0B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date (tsoutputcanada)]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>38</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_333BB0D92E2042EBBEF19FE8E48FB481]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geo</remote-name>
            <remote-type>130</remote-type>
            <local-name>[geo (tsoutputcanada)]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>geo</remote-alias>
            <ordinal>39</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_333BB0D92E2042EBBEF19FE8E48FB481]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (tsoutputcanada)]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>40</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_333BB0D92E2042EBBEF19FE8E48FB481]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_desc</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_desc (tsoutputcanada)]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>noc_desc</remote-alias>
            <ordinal>41</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_333BB0D92E2042EBBEF19FE8E48FB481]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_char</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_char (tsoutputcanada)]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>job_char</remote-alias>
            <ordinal>42</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_333BB0D92E2042EBBEF19FE8E48FB481]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_vacancies (tsoutputcanada)]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>total_vacancies</remote-alias>
            <ordinal>43</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_333BB0D92E2042EBBEF19FE8E48FB481]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predicted_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predicted_vacancies]</local-name>
            <parent-name>[tsoutputcanada]</parent-name>
            <remote-alias>predicted_vacancies</remote-alias>
            <ordinal>44</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputcanada_333BB0D92E2042EBBEF19FE8E48FB481]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>idtspr</remote-name>
            <remote-type>130</remote-type>
            <local-name>[idtspr]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>idtspr</remote-alias>
            <ordinal>46</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_0C1A3ABC02A0416C96FD9D07AF86339C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ref_date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[ref_date (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>ref_date</remote-alias>
            <ordinal>47</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_TYPE_DATE&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_TYPE_DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_0C1A3ABC02A0416C96FD9D07AF86339C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geo</remote-name>
            <remote-type>130</remote-type>
            <local-name>[geo (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>geo</remote-alias>
            <ordinal>48</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_0C1A3ABC02A0416C96FD9D07AF86339C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>predicted_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[predicted_vacancies (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>predicted_vacancies</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_0C1A3ABC02A0416C96FD9D07AF86339C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_code</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_code (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>noc_code</remote-alias>
            <ordinal>50</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_0C1A3ABC02A0416C96FD9D07AF86339C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noc_desc</remote-name>
            <remote-type>130</remote-type>
            <local-name>[noc_desc (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>noc_desc</remote-alias>
            <ordinal>51</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_0C1A3ABC02A0416C96FD9D07AF86339C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_char</remote-name>
            <remote-type>130</remote-type>
            <local-name>[job_char (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>job_char</remote-alias>
            <ordinal>52</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>false</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_WVARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_WCHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_0C1A3ABC02A0416C96FD9D07AF86339C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_vacancies</remote-name>
            <remote-type>5</remote-type>
            <local-name>[total_vacancies (tsoutputprovinces)]</local-name>
            <parent-name>[tsoutputprovinces]</parent-name>
            <remote-alias>total_vacancies</remote-alias>
            <ordinal>53</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_FLOAT&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_DOUBLE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[tsoutputprovinces_0C1A3ABC02A0416C96FD9D07AF86339C]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Job Char1' datatype='string' name='[JOB_CHAR]' role='dimension' type='nominal' />
      <column caption='Noc Code1' datatype='string' name='[NocCode]' role='dimension' type='nominal' />
      <column caption='Predicted Vacancies' datatype='integer' name='[PREDICTED_VACANCIES]' role='measure' type='quantitative' />
      <column aggregation='Count' caption='Ref Date1' datatype='date' datatype-customized='true' name='[REF_DATE]' role='dimension' type='ordinal' />
      <_.fcp.ObjectModelTableType.true...column caption='averagewage' datatype='table' name='[__tableau_internal_object_id__].[averagewage_9FC96C3855A44C6EA50B3DC95B17FD23]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='machinelearning' datatype='table' name='[__tableau_internal_object_id__].[machinelearning_D42C2410EB704A6B8888C03F6870105A]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='mlpoutputcod' datatype='table' name='[__tableau_internal_object_id__].[mlpoutputcod_4D35A8A922964695BB103E66FE98C7D2]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='noc' datatype='table' name='[__tableau_internal_object_id__].[noc_ED5CBABE8E054CBEA8842485B7CAAB0B]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='tsoutputcanada' datatype='table' name='[__tableau_internal_object_id__].[tsoutputcanada_333BB0D92E2042EBBEF19FE8E48FB481]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='tsoutputprovinces' datatype='table' name='[__tableau_internal_object_id__].[tsoutputprovinces_0C1A3ABC02A0416C96FD9D07AF86339C]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='vacancies' datatype='table' name='[__tableau_internal_object_id__].[vacancies_7D99A32814944484AAAE3182202D4DB0]' role='measure' type='quantitative' />
      <column caption='Avg Wage' datatype='real' name='[avg_wage]' role='measure' type='quantitative' />
      <column caption='Geo (Tsoutputcanada)' datatype='string' name='[geo (tsoutputcanada)]' role='dimension' type='nominal' />
      <column caption='Geo (Tsoutputprovinces)' datatype='string' name='[geo (tsoutputprovinces)]' role='dimension' semantic-role='' type='nominal' />
      <column caption='Geo' datatype='string' name='[geo]' role='dimension' type='nominal' />
      <column caption='Id' datatype='integer' name='[id]' role='dimension' type='ordinal' />
      <column caption='Idtspr' datatype='string' name='[idtspr]' role='dimension' type='nominal' />
      <column caption='Index' datatype='string' datatype-customized='true' default-role='measure' default-type='quantitative' name='[index]' role='dimension' type='nominal' />
      <column caption='Job Char (Averagewage)' datatype='string' name='[job_char (averagewage)]' role='dimension' type='nominal' />
      <column caption='Job Char (Tsoutputcanada)' datatype='string' name='[job_char (tsoutputcanada)]' role='dimension' type='nominal' />
      <column caption='Job Char (Tsoutputprovinces)' datatype='string' name='[job_char (tsoutputprovinces)]' role='dimension' semantic-role='' type='nominal' />
      <column caption='Job Char' datatype='string' name='[job_char]' role='dimension' type='nominal' />
      <column caption='Job Details' datatype='string' name='[job_details]' role='dimension' type='nominal' />
      <column caption='Location (Averagewage)' datatype='string' name='[location (averagewage)]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Noc Code (Averagewage)' datatype='string' name='[noc_code (averagewage)]' role='dimension' type='nominal' />
      <column caption='Noc Code (Machinelearning)' datatype='string' name='[noc_code (machinelearning)]' role='dimension' type='nominal' />
      <column caption='Noc Code (Noc)' datatype='string' name='[noc_code (noc)]' role='dimension' type='nominal' />
      <column caption='Noc Code (Tsoutputcanada)' datatype='string' name='[noc_code (tsoutputcanada)]' role='dimension' type='nominal' />
      <column caption='Noc Code (Tsoutputprovinces)' datatype='string' name='[noc_code (tsoutputprovinces)]' role='dimension' semantic-role='' type='nominal' />
      <column caption='Noc Code' datatype='string' name='[noc_code]' role='dimension' type='nominal' />
      <column caption='Noc Desc (Machinelearning)' datatype='string' name='[noc_desc (machinelearning)]' role='dimension' type='nominal' />
      <column caption='Noc Desc (Tsoutputcanada)' datatype='string' name='[noc_desc (tsoutputcanada)]' role='dimension' type='nominal' />
      <column caption='Noc Desc (Tsoutputprovinces)' datatype='string' name='[noc_desc (tsoutputprovinces)]' role='dimension' semantic-role='' type='nominal' />
      <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
      <column caption='Predicted Vacancies (Machinelearning)' datatype='real' name='[predicted_vacancies (machinelearning)]' role='measure' type='quantitative' />
      <column caption='Predicted Vacancies (Tsoutputprovinces)' datatype='real' name='[predicted_vacancies (tsoutputprovinces)]' role='measure' type='quantitative' />
      <column caption='Predicted Vacancies1' datatype='real' name='[predicted_vacancies]' role='measure' type='quantitative' />
      <column caption='Quarter (Averagewage)' datatype='integer' name='[quarter (averagewage)]' role='dimension' type='quantitative' />
      <column caption='Quarter' datatype='string' name='[quarter]' role='dimension' type='nominal' />
      <column caption='Ref Date (Averagewage)' datatype='date' name='[ref_date (averagewage)]' role='dimension' type='ordinal' />
      <column caption='Ref Date (Machinelearning)' datatype='date' name='[ref_date (machinelearning)]' role='dimension' type='ordinal' />
      <column caption='Ref Date (Tsoutputcanada)' datatype='date' name='[ref_date (tsoutputcanada)]' role='dimension' type='ordinal' />
      <column caption='Ref Date (Tsoutputprovinces)' datatype='date' name='[ref_date (tsoutputprovinces)]' role='dimension' type='ordinal' />
      <column caption='Ref Date' datatype='date' name='[ref_date]' role='dimension' type='ordinal' />
      <column caption='Total Vacancies (Machinelearning)' datatype='real' name='[total_vacancies (machinelearning)]' role='measure' type='quantitative' />
      <column caption='Total Vacancies (Tsoutputcanada)' datatype='real' name='[total_vacancies (tsoutputcanada)]' role='measure' type='quantitative' />
      <column caption='Total Vacancies (Tsoutputprovinces)' datatype='real' name='[total_vacancies (tsoutputprovinces)]' role='measure' type='quantitative' />
      <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
      <column caption='Year (Averagewage)' datatype='integer' name='[year (averagewage)]' role='dimension' type='quantitative' />
      <column caption='Year' datatype='string' name='[year]' role='dimension' type='nominal' />
      <column-instance column='[job_char (averagewage)]' derivation='None' name='[none:job_char (averagewage):nk]' pivot='key' type='nominal' />
      <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
      <column-instance column='[noc_code (noc)]' derivation='None' name='[none:noc_code (noc):nk]' pivot='key' type='nominal' />
      <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
      <group caption='Action (Job Details)' hidden='true' name='[Action (Job Details)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[job_details]' />
        </groupfilter>
      </group>
      <group caption='Action (Location)' hidden='true' name='[Action (Location)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[location]' />
        </groupfilter>
      </group>
      <group caption='Action (Noc Code,Noc Desc)' hidden='true' name='[Action (Noc Code,Noc Desc)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[noc_code]' />
          <groupfilter function='level-members' level='[noc_desc]' />
        </groupfilter>
      </group>
      <group caption='Action (Noc Desc)' hidden='true' name='[Action (Noc Desc)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[noc_desc]' />
        </groupfilter>
      </group>
      <group caption='Action (Noc Desc,Quarter)' hidden='true' name='[Action (Noc Desc,Quarter)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[noc_desc]' />
          <groupfilter function='level-members' level='[quarter]' />
        </groupfilter>
      </group>
      <group caption='Action (Quarter)' hidden='true' name='[Action (Quarter)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[quarter]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:noc_code (noc):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;0012&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;0412&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;0822&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;091&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;1226&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;1431&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;2123&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;216&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;2173&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;2254&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;3141&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;3413&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;402&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;4212&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;43&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;5134&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;6235&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;631&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;6525&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;7205&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;724&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;7313&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;7534&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;823&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;8614&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;9417&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;95&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;9532&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;0125&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;060&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;0631&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;101&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;1213&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;1313&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;1525&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;2148&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;22&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;2234&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;3011&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;312&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;3222&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;4163&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;5111&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;521&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;5243&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;6342&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;661&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;6722&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;7271&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;74&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;745&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;7452&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;8252&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;9227&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;942&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;9463&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;9619&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;0212&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;071&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;0714&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;1222&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;1414&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;2113&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;212&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;2154&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;2244&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;3&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;3124&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;322&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;3234&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;34&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;4167&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;5123&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;525&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;6221&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;6512&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;673&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;6741&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;7302&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;7521&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;761&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;84&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;8431&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;9243&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;947&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;9523&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;2&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;0016&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;01-05&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;012&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;0422&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;1112&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;121&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;1242&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;1451&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;2134&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;2212&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;223&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;2263&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;3211&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;4021&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;416&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;4217&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;5221&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;62&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;6314&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;641&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;6551&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;7241&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;729&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;7322&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;7621&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;842&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;9212&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;9423&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;9537&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;0013&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;0413&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;0911&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;1227&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;1432&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;145&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;2131&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;217&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;2174&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;2255&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;3142&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;3414&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;403&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;4214&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;44&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;5136&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;6311&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;632&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;6531&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;7231&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;725&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;7315&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;7535&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;824&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;8615&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;9418&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;9533&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;96&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;0213&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;073&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;0731&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;1223&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;1415&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;21&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;2115&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;213&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;2161&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;2251&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;3125&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;323&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;3236&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;40&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;4168&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;5125&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;621&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;6222&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;6513&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;674&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;6742&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;7305&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;7522&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;762&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;8432&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;86&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;9411&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;952&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;9525&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;7&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;0122&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;043&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;0601&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;12&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;1211&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;1311&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;142&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;1523&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;2146&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;2232&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;2282&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;301&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;3217&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;4161&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;4422&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;512&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;5241&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;6332&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;655&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;6711&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;72&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;7252&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;738&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;7442&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;8232&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;9224&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;924&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;9461&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;9617&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;0131&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;062&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;0632&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;1214&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;1314&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;14&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;151&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;1526&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;2151&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;2241&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;30&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;3012&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;313&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;3223&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;4164&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;5112&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;522&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;5252&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;6411&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;662&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;6731&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;7291&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;75&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;751&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;7511&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;8255&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;9231&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;943&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;9465&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;X&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;0114&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;041&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;0512&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;1122&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;1253&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;131&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;1521&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;2144&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;2225&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;227&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;2274&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;3215&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;4153&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;4412&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;442&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;5&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;5226&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;6322&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;653&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;66&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;6622&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;7247&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;733&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;7384&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;8222&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;9217&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;922&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;9437&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;9614&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;0311&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;081&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;0811&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;1224&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;1416&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;2121&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;214&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;2171&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;2252&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;3131&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;3237&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;341&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;41&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;4169&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;5131&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;622&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;6231&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;6523&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;720&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;7201&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;7311&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;7532&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;821&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;8611&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;92&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;9415&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;9526&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;953&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;0111&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;013&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;0423&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;1113&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;122&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;1243&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;1452&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;2141&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;2221&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;224&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;2264&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;3212&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;4112&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;421&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;4311&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;5222&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;63&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;6315&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;642&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;6552&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;7242&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;730&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;7333&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;7622&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;8&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;843&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;9&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;9213&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;9431&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;9611&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;0112&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;021&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;0432&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;06&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;1114&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;124&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;1251&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;1454&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;2142&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;2222&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;225&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;2271&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;3213&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;4151&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;431&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;4312&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;5223&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;6316&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;64&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;651&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;6563&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;7244&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;731&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;7361&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;8211&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;861&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;9214&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;9433&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;9612&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;0121&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;042&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;0513&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;11&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;1123&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;1254&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;141&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;1522&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;2145&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;2231&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;228&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;2281&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;3216&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;4156&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;4413&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;511&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;5227&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;6331&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;654&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;6623&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;67&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;7251&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;736&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;7441&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;8231&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;9221&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;923&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;9446&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;9615&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;0124&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;051&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;0621&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;1212&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;13&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;1312&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;143&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;1524&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;2147&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;2233&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;2283&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;311&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;3219&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;4162&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;4423&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;513&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;5242&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;6341&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;656&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;6721&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;7253&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;73&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;744&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;7445&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;8241&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;9226&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;941&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;9462&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;9618&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;001&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;0014&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;0414&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;0912&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;1&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;111&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;1228&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;1434&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;2132&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;2175&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;221&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;2261&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;3143&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;4011&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;411&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;4215&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;51&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;5211&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;6312&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;633&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;6533&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;7232&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;727&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;7316&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;7611&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;825&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;8616&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;9421&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;9535&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;4&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;0411&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;082&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;0821&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;1225&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;1422&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;2122&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;215&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;2172&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;2253&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;3132&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;3411&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;401&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;42&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;4211&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;5133&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;623&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;6232&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;6524&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;7202&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;723&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;7312&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;7533&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;822&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;8612&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;94&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;9416&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;9527&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;961&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;0&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;0132&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;063&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;0651&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;1215&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;1315&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;152&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;2111&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;2152&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;2242&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;31&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;3111&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;314&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;3231&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;4165&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;5121&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;523&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;5254&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;6421&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;671&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;6732&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;7294&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;7512&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;752&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;76&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;8411&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;9232&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;944&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;9521&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;0113&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;031&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;0511&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;07-09&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;1121&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;125&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;1252&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;1511&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;2143&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;2223&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;226&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;2272&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;3214&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;4152&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;441&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;4411&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;5225&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;6321&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;65&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;652&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;6611&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;7246&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;732&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;7381&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;8221&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;921&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;9215&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;9435&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;9613&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;00&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;0015&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;011&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;0421&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;1111&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;112&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;1241&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;1435&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;2133&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;2211&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;222&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;2262&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;3144&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;4012&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;415&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;4216&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;52&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;5212&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;6313&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;634&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;6541&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;7237&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;728&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;7321&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;7612&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;841&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;9211&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;9422&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;9536&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;6&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;0211&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;065&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;0711&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;1221&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;1411&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;15&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;211&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;2112&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;2153&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;2243&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;3114&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;32&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;321&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;3233&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;4166&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;5122&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;524&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;6211&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;6511&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;672&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;6733&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;7301&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;7514&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;753&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;82&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;8412&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;9241&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;946&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;9522&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:job_char (averagewage):nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Full-time&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Type of work, all types&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Part-time&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:noc_desc:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Administrative and regulatory occupations&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Architects&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bartenders&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Casino occupations&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Computer and information systems managers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Contractors and supervisors, machining, metal forming, shaping and erecting trades and related occupations&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Customer and information services supervisors&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Dentists&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Editors&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Family, marriage and other related counsellors&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Gas fitters&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Heating, refrigeration and air conditioning mechanics&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Industrial, electrical and construction trades&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Labourers in metal fabrication&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Library, archive, museum and art gallery managers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Machinists and machining and tooling inspectors&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Managers in natural resources production and fishing&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Metallurgical and materials engineers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Occupational therapists&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Other business services managers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Other professional occupations in therapy and assessment&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Paper converting machine operators&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Plastic products assemblers, finishers and inspectors&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Professional occupations in advertising, marketing and public relations&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Purchasing managers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Roofers and shinglers&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Service supervisors and specialized service occupations&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Supervisors, assembly and fabrication&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Supervisors, railway transport operations&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Technical occupations in physical sciences&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Train crew operating occupations&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Waterworks and gas maintenance workers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Aircraft assemblers and aircraft assembly inspectors&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Audiologists and speech-language pathologists&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Business, finance and administration occupations &quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;By-law enforcement and other regulatory officers, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Civil engineers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Construction managers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Court officers and justices of the peace&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Dietitians and nutritionists&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Employment insurance, immigration, border services and revenue officers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Food and beverage servers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Funeral directors and embalmers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Graphic designers and illustrators&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Industrial and manufacturing engineers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Interior designers and interior decorators&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Legal administrative assistants&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Machine operators and related workers in food, beverage and associated products processing&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Managers in customer and personal services, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mechanical engineers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Musicians and singers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Oil and gas well drilling and related workers and services operators&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Other metal products machine operators&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Other trades and related occupations, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Patternmakers - textile, leather and fur products&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Photographers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Printing press operators&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Property administrators&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Residential and commercial installers and servicers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Senior management occupations&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Specialized middle management occupations&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Supervisors, mining and quarrying&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Technical occupations in civil, mechanical and industrial engineering&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Tilesetters&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;University professors and post-secondary assistants&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Actors and comedians&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Allied primary health practitioners&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Automotive service technicians, truck and bus mechanics and mechanical repairers&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Care providers and educational, legal and public protection support occupations&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Coaches&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Contractors and supervisors, electrical trades and telecommunications occupations&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Crane operators, drillers and blasters&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Drillers and blasters - surface mining, quarrying and construction&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Estheticians, electrologists and related occupations&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Forestry technologists and technicians&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Harvesting, landscaping and natural resources labourers&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Industrial engineering and manufacturing technologists and technicians&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Judges, lawyers and Quebec notaries&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Librarians&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Machine operators, mineral and metal processing&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Managers in food service and accommodation&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Medical laboratory technologists&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Natural resources, agriculture and related production occupations &quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Non-destructive testers and inspection technicians&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Other administrative services managers&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Other professional engineers, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Other wood products assemblers and inspectors&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Physicians, dentists and veterinarians&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Processing and manufacturing machine operators and related production workers&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Public works maintenance equipment operators and related workers&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Retail and wholesale trade managers&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Senior managers - trade, broadcasting and other services, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Store shelf stockers, clerks and order fillers&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Supervisors, other products manufacturing and assembly&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Technical occupations in geomatics and meteorology&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tourism and amusement services occupations&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Utilities managers&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Natural and applied sciences and related occupations &quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Administrative services managers&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Aerospace engineers&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Archivists&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Boat and cable ferry operators and related occupations&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Chain saw and skidder operators&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Computer programmers and interactive media developers&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Contractors and supervisors, carpentry trades&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Contractors and supervisors, oil and gas drilling and services&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Data entry clerks&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Electrical mechanics&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Financial auditors and accountants&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;General practitioners and family physicians&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Home care providers and educational support occupations&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Inspectors in public and environmental health and occupational health and safety&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Labourers in textile processing&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Light duty cleaners&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Maîtres d&apos;hôtel and hosts/hostesses&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Managers in transportation&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Middle management occupations in trades, transportation, production and utilities&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Occupations in front-line public protection services&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Other financial officers&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Other sales support and related occupations&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Paraprofessional occupations in legal, social, community and education services&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Plumbers, pipefitters and gas fitters&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Professional occupations in education services&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Railway carmen/women&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sales representatives and salespersons - wholesale and retail trade&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Silviculture and forestry workers&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Supervisors, food and beverage processing&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Support occupations in accommodation, travel and amusement services&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Technical sales specialists in wholesale trade and retail and wholesale buyers&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Transportation officers and controllers&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Workers in natural resources, agriculture and related production&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Administrative assistants&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Appliance servicers and repairers&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Architects, urban planners and land surveyors&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Binding and finishing machine operators&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Central control and process operators in processing and manufacturing&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Computer and information systems professionals&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Contractors and supervisors, maintenance trades and heavy equipment and transport operators&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Customer services representatives - financial institutions&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Education policy researchers, consultants and program officers&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Film and video camera operators&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;General farm workers&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Heavy equipment operators&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Information systems analysts and consultants&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Labourers in mineral and metal processing&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Library, correspondence and other clerks&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mail and message distribution occupations&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Managers in public administration&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Metalworking and forging machine operators&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Occupations in art, culture, recreation and sport&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Other construction trades&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Other religious occupations&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Other workers in fishing and trapping and hunting occupations&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Papermaking and finishing machine operators&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Plastics processing machine operators&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Professional occupations in art and culture&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Pursers and flight attendants&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Rubber processing machine operators and related workers&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Service support and other service occupations, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Supervisors, electrical products manufacturing&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Supervisors, supply chain, tracking and scheduling co-ordination occupations&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Technical occupations related to museums and art galleries&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Translators, terminologists and interpreters&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Web designers and developers&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Accounting and related clerks&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Animal health technologists and veterinary technicians&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bakers&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Carpenters&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Collectors&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Contractors and supervisors, heavy equipment operator crews&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Creative and performing artists&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Dry cleaning, laundry and related occupations&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Executive assistants&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Foundry workers&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Health information management occupations&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Image, social and other personal consultants&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Industrial instrument technicians and mechanics&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Labourers in chemical products processing and utilities&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Librarians, archivists, conservators and curators&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Machinery and transportation equipment mechanics (except motor vehicles)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Managers in health care&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Medical radiation technologists&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nurse aides, orderlies and patient service associates&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Other assembly and related occupations&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Other professional occupations in health diagnosing and treating&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Outdoor sport and recreational guides&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Physicists and astronomers&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Practitioners of natural healing&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Processing, manufacturing and utilities supervisors and central control operators&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Pulp mill machine operators&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Retail sales supervisors&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Service representatives and other customer and personal services occupations&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Storekeepers and partspersons&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Supervisors, petroleum, gas and chemical processing and utilities&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Technical occupations in health&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Trades helpers and labourers&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Veterinarians&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Sales and service occupations &quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Air traffic controllers and related occupations&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Athletes, coaches, referees and related occupations&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Boilermakers&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Butchers and bakers&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Chemists&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Construction estimators&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Couriers, messengers and door-to-door distributors&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dental technologists, technicians and laboratory assistants&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Elementary and secondary school teacher assistants&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fish and seafood plant workers&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Government managers - health and social policy development and program administration&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Human resources managers&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Insurance, real estate and financial brokerage managers&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Landscaping and grounds maintenance labourers&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Machine operators and inspectors, electrical apparatus manufacturing&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Managers in aquaculture&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Managers in communication (except broadcasting)&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mechanical assemblers and inspectors&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Motor vehicle body repairers&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oil and gas drilling, servicing and related labourers&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Other mechanics and related repairers&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Other technical occupations in health care&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Pharmacists&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Power system electricians&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Program leaders and instructors in recreation, sport and fitness&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Recreation, sports and fitness program and service directors&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Security guards and related security service occupations&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Specialist physicians&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Supervisors, mail and message distribution occupations&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Technical occupations in architecture, drafting, surveying, geomatics and meteorology&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Theatre, fashion, exhibit and other creative designers&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Underground production and development miners&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Accommodation service managers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Aircraft instrument, electrical and avionics mechanics, technicians and inspectors&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Auditors, accountants and investment professionals&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cabinetmakers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Civil, mechanical, electrical and chemical engineers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Construction millwrights and industrial mechanics&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Court reporters, medical transcriptionists and related occupations&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Dispatchers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Engineer officers, water transport&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Food counter attendants, kitchen helpers and related support occupations&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Glaziers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ground and water transport ticket agents, cargo service representatives and related clerks&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Industrial butchers and meat cutters, poultry preparers and related workers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ironworkers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Legal and public protection support occupations&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Machine operators and related workers in mineral and metal products processing and manufacturing&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Managers in education and social and community services&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mechanical, electrical and electronics assemblers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Natural and applied science policy researchers, consultants and program officers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Operators and attendants in amusement, recreation and sport&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Other occupations in personal service&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Other trades helpers and labourers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Photographers, graphic arts technicians and technical and co-ordinating occupations in motion pictures, broadcasting and the performing arts&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Printing press operators and other trades and related occupations, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Psychologists&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Respiratory therapists, clinical perfusionists and cardiopulmonary technologists&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Senior managers - construction, transportation, production and utilities&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Specialized occupations in personal and customer services&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Supervisors, motor transport and other ground transit operators&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Technical occupations in computer and information systems&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tool and die makers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Urban and land use planners&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Weavers, knitters and other fabric making occupations&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Agriculture and horticulture workers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Artisans and craftspersons&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Assessors, valuators and appraisers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Business development officers and marketing researchers and consultants&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Chemical plant machine operators&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Conservation and fishery officers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Correctional service officers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dental assistants&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Electronic service technicians (household and business equipment)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Fire chiefs and senior firefighting officers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Government managers - economic analysis, policy development and program administration&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Human resources and business service professionals&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Insurance agents and brokers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Landscape and horticulture technicians and specialists&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Longshore workers and material handlers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Managers in agriculture, horticulture and aquaculture&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Material handlers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Motor vehicle and transit drivers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Occupations in education, law and social, community and government services &quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Office equipment operators&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Other labourers in processing, manufacturing and utilities&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Other technical and co-ordinating occupations in motion pictures, broadcasting and the performing arts&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pet groomers and animal care workers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Postal and courier services managers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Professional occupations in nursing&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Records management technicians&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Secondary and elementary school teachers and educational counsellors&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Social workers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Supervisors, library, correspondence and related information workers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tailors, dressmakers, furriers and milliners&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Testers and graders, food and beverage processing&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Underground mine service and support workers&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Accounting technicians and bookkeepers&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Announcers and other broadcasters&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Banking, credit and other investment managers&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Carpenters and cabinetmakers&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;College and other vocational instructors&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Contractors and supervisors, industrial, electrical and construction trades and related workers&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Creative designers and craftspersons&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Early childhood educators and assistants&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Executive housekeepers&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Furniture and fixture assemblers and inspectors&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Health occupations&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Industrial painters, coaters and metal finishing process operators&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Inspectors and graders, textile, fabric, fur and leather products manufacturing&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Labourers in fish and seafood processing&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Library and public archive technicians&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Machining tool operators&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Managers in horticulture&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Medical sonographers&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nursery and greenhouse workers&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Other assisting occupations in support of health services&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Other professional occupations in physical sciences&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Painters and decorators (except interior decorators)&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Physiotherapists&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Producers, directors, choreographers and related occupations&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Purchasing agents and officers&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Retail sales supervisors and specialized sales occupations&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Service station attendants&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Structural metal and platework fabricators and fitters&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Supervisors, plastic and rubber products manufacturing&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Technical occupations in libraries, public archives, museums and art galleries&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Trades helpers, construction labourers and related occupations&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Water and waste treatment plant operators&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Agricultural and fish products inspectors&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Assemblers and inspectors, electrical appliance, apparatus and equipment manufacturing&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bricklayers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Chefs&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Concrete finishers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Contractors and supervisors, other construction trades, installers, repairers and servicers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Database analysts and data administrators&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Electrical power line and cable workers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Elevator constructors and mechanics&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Financial managers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Geological and mineral technologists and technicians&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Home child care providers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Instructors of persons with disabilities&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Labourers in wood, pulp and paper processing&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Logging and forestry labourers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Management occupations&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Manufacturing managers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mine labourers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Occupations in manufacturing and utilities&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Other installers, repairers and servicers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Other service support and related occupations, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Payroll administrators&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Police officers (except commissioned)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Professional occupations in health (except nursing)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Railway yard and track maintenance workers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sales support occupations&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Social and community service professionals&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Supervisors, forest products processing&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Support occupations in accommodation, travel and facilities set-up services&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Telecommunication carriers managers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Trades, transport and equipment operators and related occupations &quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Transportation route and crew schedulers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Writing, translating and related communications professionals&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Administrative services supervisors&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Agricultural representatives, consultants and specialists&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Assemblers in manufacturing&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Broadcast technicians&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Chefs and cooks&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Concrete, clay and stone forming operators&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cooks&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Deck officers, water transport&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Electrical trades and electrical power line and telecommunications workers&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Financial sales representatives&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Fishing vessel masters and fishermen/women&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Geological engineers&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Home support workers, housekeepers and related occupations&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Insulators&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Land survey technologists and technicians&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Logging and forestry workers&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Managers - publishing, motion pictures, broadcasting and performing arts&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Masonry and plastering trades&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mine service workers and operators in oil and gas drilling&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Occupations in travel and accommodation&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Other installers, repairers and servicers and material handlers&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Other service support occupations, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Personnel clerks&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Policy and program researchers, consultants and officers&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Professional occupations in law and social, community and government services&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Real estate agents and salespersons&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sawmill machine operators&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Social and community service workers&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Supervisors, furniture and fixtures manufacturing&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Support occupations in motion pictures, broadcasting, photography and the performing arts&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Telecommunications installation and repair workers&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Travel counsellors&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Air pilots, flight engineers and flying instructors&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Assisting occupations in support of health services&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Boat assemblers and inspectors&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Business, finance and administration occupations&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Chemical technologists and technicians&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Conservators and curators&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Correspondence, publication and regulatory clerks&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Dental hygienists and dental therapists&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Electronics assemblers, fabricators, inspectors and testers&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Firefighters&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Government managers - education policy development and program administration&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Human resources and recruitment officers&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Insurance underwriters&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Landscape architects&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lumber graders and other wood processing inspectors and graders&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Machine fitters&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Managers in art, culture, recreation and sport&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mathematicians, statisticians and actuaries&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Motor vehicle assemblers, inspectors and testers&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Office support occupations&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Other managers in public administration&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Other technical inspectors and regulatory officers&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Petroleum engineers&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Power engineers and power systems operators&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Professional occupations in religion&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Recreation, sports and fitness policy researchers, consultants and program officers&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Securities agents, investment dealers and brokers&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Software engineers and designers&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Supervisors, logging and forestry&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Taxi and limousine drivers and chauffeurs&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Textile fibre and yarn, hide and pelt processing machine operators and workers&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Underground miners, oil and gas drillers and related occupations&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Air transport ramp attendants&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Audio and video recording technicians&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Butchers, meat cutters and fishmongers - retail and wholesale&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Civil engineering technologists and technicians&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Construction inspectors&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Court clerks&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Desktop publishing operators and related occupations&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Employment counsellors&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Fabric, fur and leather cutters&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Floor covering installers&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Graphic arts technicians&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Human resources professionals&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Insurance, real estate and financial sales occupations&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lawyers and Quebec notaries&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Machine operators and related workers in chemical, plastic and rubber processing&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Managers in construction and facility operation and maintenance&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mechanical engineering technologists and technicians&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Motorcycle, all-terrain vehicle and other related mechanics&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Oil and gas well drillers, servicers, testers and related workers&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Other medical technologists and technicians (except dental health)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Other small engine and small equipment repairers&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Other technical occupations in therapy and assessment&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pharmacists, dietitians and nutritionists&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Printing equipment operators and related occupations&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Program officers unique to government&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Registered nurses and registered psychiatric nurses&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Senior government managers and officials&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Specialized cleaners&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Supervisors, mineral and metal processing&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Technical occupations in art, culture, recreation and sport&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Therapy and assessment professionals&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;University professors and lecturers&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Administrators - post-secondary education and vocational training&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aquaculture and marine harvest labourers&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Architectural technologists and technicians&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Biological technologists and technicians&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Central control and process operators, mineral and metal processing&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Computer engineers (except software engineers and designers)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Contractors and supervisors, mechanic trades&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Customs, ship and other brokers&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Electrical and electronics engineering technologists and technicians&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Finance, insurance and related business administrative occupations&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;General office support workers&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Heavy equipment operators (except crane)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Information systems testing technicians&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Labourers in processing, manufacturing and utilities&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Licensed practical nurses&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mail, postal and related workers&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Management occupations &quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Managers in public protection services&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Meteorologists and climatologists&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Occupations in education, law and social, community and government services&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Other customer and information services representatives&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Other repairers and servicers&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Paralegal and related occupations&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Plateless printing equipment operators&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Professional occupations in business and finance&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Railway and motor transport labourers&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sales and account representatives - wholesale trade (non-technical)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sheet metal workers&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sports officials and referees&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Supervisors, electronics manufacturing&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Supervisors, textile, fabric, fur and leather products processing and manufacturing&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Technical occupations related to natural and applied sciences&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Transport and heavy equipment operation and related maintenance occupations&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Welders and related machine operators&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Occupations in art, culture, recreation and sport &quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Administrative and financial supervisors and administrative occupations&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Announcers and other performers, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Banking, insurance and other financial clerks&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cashiers&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Commissioned police officers&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Contractors and supervisors, landscaping, grounds maintenance and horticulture services&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Customer and information services representatives&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Economists and economic policy researchers and analysts&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Facility operation and maintenance managers&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Furniture finishers and refinishers&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Health policy researchers, consultants and program officers&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Industrial sewing machine operators&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Labourers in food and beverage processing&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Library assistants and clerks&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Longshore workers&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Machining, metal forming, shaping and erecting trades&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Managers in manufacturing and utilities&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Medical technologists and technicians (except dental health)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nursing co-ordinators and supervisors&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Other automotive mechanical installers and servicers&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Other professional occupations in social science, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Painters, sculptors and other visual artists&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Plasterers, drywall installers and finishers and lathers&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Production logistics co-ordinators&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Purchasing and inventory control workers&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Retail salespersons&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Service supervisors&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Supervisors and technical occupations in natural resources, agriculture and related production&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Supervisors, processing and manufacturing occupations&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Technical occupations in life sciences&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Trades, transport and equipment operators and related occupations&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Water transport deck and engine room crew&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Aircraft mechanics and aircraft inspectors&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Authors and writers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cable television service and maintenance technicians&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cleaners&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Construction trades helpers and labourers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Contractors and supervisors, pipefitting trades&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Court reporters, transcriptionists, records management technicians and statistical officers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Distribution, tracking and scheduling co-ordination occupations&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Engineering inspectors and regulatory officers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Food service supervisors&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hairstylists and barbers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Health occupations &quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Industrial designers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Janitors, caretakers and building superintendents&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Legislators&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Machine operators and related workers in pulp and paper production and wood processing and manufacturing&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Managers in engineering, architecture, science and information systems&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Medical administrative assistants&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Natural and applied sciences and related occupations&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Opticians&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Other performers, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Other transport equipment operators and related maintenance workers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Photographic and film processors&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Probation and parole officers and related occupations&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Public works and maintenance labourers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Restaurant and food service managers&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Senior managers - financial, communications and other business services&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Statistical officers and related research support occupations&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Supervisors, motor vehicle assembling&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Technical occupations in dental health care&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Total, all occupations&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;User support technicians&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Agricultural service contractors, farm supervisors and specialized livestock workers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Assemblers, fabricators and inspectors, industrial electrical motors and transformers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bus drivers, subway operators and other transit operators&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Chemical engineers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Conference and event planners&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Corporate sales managers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Delivery and courier service drivers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Electricians (except industrial and power system)&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Financial, insurance and related administrative support workers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Geoscientists and oceanographers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Glass forming and finishing machine operators and glass cutters&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hotel front desk clerks&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Insurance adjusters and claims examiners&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Land surveyors&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Logging machinery operators&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Managers in agriculture&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Massage therapists&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mining engineers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Office administrative assistants - general, legal and medical&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Other instructors&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Other services supervisors&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Pest controllers and fumigators&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Post-secondary teaching and research assistants&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Professional occupations in natural and applied sciences&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Receptionists&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;School principals and administrators of elementary and secondary education&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Social policy researchers, consultants and program officers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Supervisors, general office and administrative support workers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Supervisors, printing and related occupations&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Survey interviewers and statistical clerks&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Telecommunications line and cable workers&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Unclassified occupations&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Administrative officers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Advertising, marketing and public relations managers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Architecture and science managers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Biologists and related scientists&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Camera, platemaking and other prepress occupations&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Central control and process operators, petroleum, gas and chemical processing&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Computer network technicians&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Contractors and supervisors, mining, oil and gas&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Dancers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Electrical and electronics engineers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Financial and investment analysts&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;General office workers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Heavy-duty equipment mechanics&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Inspectors and testers, mineral and metal processing&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Labourers in rubber and plastic products manufacturing&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Life science professionals&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Maintenance and equipment operation trades&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Managers in social, community and correctional services&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Middle management occupations in retail and wholesale trade and customer services&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Occupations in food and beverage service&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Other engineers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Other sales related occupations&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Paramedical occupations&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Plumbers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Professional occupations in business management consulting&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Railway and yard locomotive engineers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sales and service occupations&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Shippers and receivers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Supervisors, finance and insurance office workers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Supply chain logistics, tracking and scheduling co-ordination occupations&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Technical sales specialists - wholesale trade&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Transport truck drivers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Upholsterers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Woodworking machine operators&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Occupations in manufacturing and utilities &quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Accommodation, travel, tourism and related services supervisors&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Airline ticket and service agents&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Automotive service technicians&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cardiology technologists and electrophysiological diagnostic technologists, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cleaning supervisors&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Contractors and supervisors, agriculture, horticulture and related operations and services&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Crane operators&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Drafting technologists and technicians&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Engineering managers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Forestry professionals&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Harvesting labourers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Home building and renovation managers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Industrial electricians&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Journalists&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Legislators and senior management&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Machine operators and related workers in textile, fabric, fur and leather products processing and manufacturing&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Managers in financial and business services&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Medical laboratory technicians and pathologists&apos; assistants&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Natural resources, agriculture and related production occupations&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Oil and solid fuel heating mechanics&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Optometrists, chiropractors and other health diagnosing and treating professionals&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Other products assemblers, finishers and inspectors&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Other wood processing machine operators&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Physical science professionals&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Process control and machine operators, food and beverage processing&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Public works and other labourers, not elsewhere classified (n.e.c.)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Retail and wholesale buyers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Senior managers - health, education, social and community services and membership organizations&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Steamfitters, pipefitters and sprinkler system installers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Supervisors, other mechanical and metal products manufacturing&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Technical occupations in electronics and electrical engineering&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tour and travel guides&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Utilities equipment operators and controllers&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:location:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Alberta&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ontario&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Nova Scotia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yukon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Prince Edward Island&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Newfoundland and Labrador&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Saskatchewan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Northwest Territories&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Manitoba&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Quebec&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nunavut&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;British Columbia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;New Brunswick&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
      <filter class='categorical' column='[location]' filter-group='2'>
        <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
          <groupfilter function='member' level='[location]' member='&quot;Alberta&quot;' />
          <groupfilter function='member' level='[location]' member='&quot;British Columbia&quot;' />
          <groupfilter from='&quot;Manitoba&quot;' function='range' level='[location]' to='&quot;Yukon&quot;' />
        </groupfilter>
      </filter>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='averagewage' id='averagewage_9FC96C3855A44C6EA50B3DC95B17FD23'>
            <properties context=''>
              <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='averagewage' table='[public].[averagewage]' type='table' />
            </properties>
          </object>
          <object caption='machinelearning' id='machinelearning_D42C2410EB704A6B8888C03F6870105A'>
            <properties context=''>
              <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='machinelearning' table='[public].[machinelearning]' type='table' />
            </properties>
          </object>
          <object caption='mlpoutputcod' id='mlpoutputcod_4D35A8A922964695BB103E66FE98C7D2'>
            <properties context=''>
              <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='mlpoutputcod' table='[public].[mlpoutputcod]' type='table'>
                <columns>
                  <column datatype='date' date-parse-format='yyyy-MM-dd' name='REF_DATE' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='noc' id='noc_ED5CBABE8E054CBEA8842485B7CAAB0B'>
            <properties context=''>
              <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='noc' table='[public].[noc]' type='table' />
            </properties>
          </object>
          <object caption='tsoutputcanada' id='tsoutputcanada_333BB0D92E2042EBBEF19FE8E48FB481'>
            <properties context=''>
              <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='tsoutputcanada' table='[public].[tsoutputcanada]' type='table' />
            </properties>
          </object>
          <object caption='tsoutputprovinces' id='tsoutputprovinces_0C1A3ABC02A0416C96FD9D07AF86339C'>
            <properties context=''>
              <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='tsoutputprovinces' table='[public].[tsoutputprovinces]' type='table' />
            </properties>
          </object>
          <object caption='vacancies' id='vacancies_7D99A32814944484AAAE3182202D4DB0'>
            <properties context=''>
              <relation connection='postgres.0duhw8j1p5nysk1gaqlxf1dozcf1' name='vacancies' table='[public].[vacancies]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[noc_code]' />
              <expression op='[noc_code (averagewage)]' />
            </expression>
            <first-end-point object-id='vacancies_7D99A32814944484AAAE3182202D4DB0' />
            <second-end-point object-id='averagewage_9FC96C3855A44C6EA50B3DC95B17FD23' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[noc_code (machinelearning)]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[geo]' />
              </expression>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[ref_date (machinelearning)]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_7D99A32814944484AAAE3182202D4DB0' />
            <second-end-point object-id='machinelearning_D42C2410EB704A6B8888C03F6870105A' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[REF_DATE]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[GEO]' />
              </expression>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[NocCode]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[JOB_CHAR]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_7D99A32814944484AAAE3182202D4DB0' />
            <second-end-point object-id='mlpoutputcod_4D35A8A922964695BB103E66FE98C7D2' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[noc_code]' />
              <expression op='[noc_code (noc)]' />
            </expression>
            <first-end-point _.fcp.ObjectModelRelationshipPerfOptions.true...is-db-set-guaranteed-value='true' guaranteed-value='true' object-id='vacancies_7D99A32814944484AAAE3182202D4DB0' />
            <second-end-point _.fcp.ObjectModelRelationshipPerfOptions.true...is-db-set-unique-key='true' object-id='noc_ED5CBABE8E054CBEA8842485B7CAAB0B' unique-key='true' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[ref_date (tsoutputcanada)]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[geo (tsoutputcanada)]' />
              </expression>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[noc_code (tsoutputcanada)]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[job_char (tsoutputcanada)]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_7D99A32814944484AAAE3182202D4DB0' />
            <second-end-point _.fcp.ObjectModelRelationshipPerfOptions.true...is-db-set-unique-key='true' object-id='tsoutputcanada_333BB0D92E2042EBBEF19FE8E48FB481' unique-key='true' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[ref_date]' />
                <expression op='[ref_date (tsoutputprovinces)]' />
              </expression>
              <expression op='='>
                <expression op='[location]' />
                <expression op='[geo (tsoutputprovinces)]' />
              </expression>
              <expression op='='>
                <expression op='[noc_code]' />
                <expression op='[noc_code (tsoutputprovinces)]' />
              </expression>
              <expression op='='>
                <expression op='[job_details]' />
                <expression op='[job_char (tsoutputprovinces)]' />
              </expression>
            </expression>
            <first-end-point object-id='vacancies_7D99A32814944484AAAE3182202D4DB0' />
            <second-end-point object-id='tsoutputprovinces_0C1A3ABC02A0416C96FD9D07AF86339C' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter 2 (generated)' name='[Action2_54655C2312584FEC9EBE2EB5BE7DF425]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='1 Vacancies Trend Dashboard' type='sheet' worksheet='Vacancies by Job Type' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='1 Vacancies Trend Dashboard' />
      </command>
    </action>
    <action caption='Filter 3 (generated)' name='[Action3_06FD5E072C6640AE85F2A9986B756190]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='1 Vacancies Trend Dashboard' type='sheet' worksheet='Vacancies by Province bar' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='1 Vacancies Trend Dashboard' />
      </command>
    </action>
    <action caption='Filter 7 (generated)' name='[Action7_022D8F6E18674EE1A886EE4F9298483D]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='1 Vacancies Trend Dashboard' type='sheet' worksheet='Top 5 NOCs by vacancies' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='1 Vacancies Trend Dashboard' />
      </command>
    </action>
    <action caption='Filter 1 (generated)' name='[Action8_0EF2D039B0C64B118D96EDF8EC57DD93]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='3 Time Series Prediction dashboard (2)' type='sheet' worksheet='Vacancies by Province Map' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='3 Time Series Prediction dashboard (2)' />
      </command>
    </action>
    <action caption='Filter 8 (generated)' name='[Action8_47501E1671074E028659D69BC7A7705C]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='1 Vacancies Trend Dashboard' type='sheet' worksheet='Vacancies by Quarter' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='1 Vacancies Trend Dashboard' />
      </command>
    </action>
    <action caption='Filter 4 (generated)' name='[Action9_41D2F1A0BCA9484393EAAF72F0817FC2]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='4 MLP machine learning' type='sheet' worksheet='Top 5 NOCs by vacancies' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='4 MLP machine learning' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Average Wage by Job Type'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#59a14f'>Average Wage</run>
            <run> by</run>
            <run fontcolor='#9d7660'>Æ </run>
            <run bold='true' fontcolor='#9d7660'>Job Type</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{049F6578-061E-4187-A49D-6B444B78EDEF}' />
    </worksheet>
    <worksheet name='Average Wage by NOC'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#59a14f'>Average wage</run>
            <run> by </run>
            <run bold='true' fontcolor='#d37295'>NOC</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies)' name='federated.1gmioib0088thf1bsq5b71apq648' />
          </datasources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648'>
            <column-instance column='[avg_wage]' derivation='Avg' name='[avg:avg_wage:qk]' pivot='key' type='quantitative' />
            <column caption='Avg Wage' datatype='real' name='[avg_wage]' role='measure' type='quantitative' />
            <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
            <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1gmioib0088thf1bsq5b71apq648].[avg:avg_wage:qk]' value='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' value='-90' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' />
              <text column='[federated.1gmioib0088thf1bsq5b71apq648].[avg:avg_wage:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{C1CB2E2E-826F-45D2-984F-19D66855A0DA}' />
    </worksheet>
    <worksheet name='Average Wage by Province'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#59a14f'>Average Wage</run>
            <run bold='true'>Æ </run>
            <run>by</run>
            <run bold='true'>Æ </run>
            <run bold='true' fontcolor='#f28e2b'>Province</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies)' name='federated.1gmioib0088thf1bsq5b71apq648' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648'>
            <column-instance column='[avg_wage]' derivation='Avg' name='[avg:avg_wage:qk]' pivot='key' type='quantitative' />
            <column caption='Avg Wage' datatype='real' name='[avg_wage]' role='measure' type='quantitative' />
            <column caption='Ref Date (Averagewage)' datatype='date' name='[ref_date (averagewage)]' role='dimension' type='ordinal' />
            <column-instance column='[ref_date (averagewage)]' derivation='Year' name='[yr:ref_date (averagewage):ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date (averagewage):ok]'>
            <groupfilter function='member' level='[yr:ref_date (averagewage):ok]' member='2019' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date (averagewage):ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1gmioib0088thf1bsq5b71apq648].[avg:avg_wage:qk]' value='c&quot;$&quot;#,##0.00;(&quot;$&quot;#,##0.00)' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1gmioib0088thf1bsq5b71apq648].[avg:avg_wage:qk]' palette='green_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1gmioib0088thf1bsq5b71apq648].[avg:avg_wage:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{A0AC9221-CEDA-4618-B85F-CB6E2B7AD694}' />
    </worksheet>
    <worksheet name='Machine Learning - MLP'>
      <layout-options>
        <title>
          <formatted-text>
            <run>MLP</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies) (3)' name='federated.1gmioib0088thf1bsq5b71apq648 (copy 2)' />
          </datasources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648 (copy 2)'>
            <column caption='Predicted Vacancies' datatype='integer' name='[PREDICTED_VACANCIES]' role='measure' type='quantitative' />
            <column aggregation='Count' caption='Ref Date1' datatype='date' datatype-customized='true' name='[REF_DATE]' role='dimension' type='ordinal' />
            <column-instance column='[PREDICTED_VACANCIES]' derivation='Sum' name='[sum:PREDICTED_VACANCIES:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_vacancies (machinelearning)]' derivation='Sum' name='[sum:total_vacancies (machinelearning):qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
            <column caption='Total Vacancies (Machinelearning)' datatype='real' name='[total_vacancies (machinelearning)]' role='measure' type='quantitative' />
            <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
            <column-instance column='[REF_DATE]' derivation='Quarter-Trunc' name='[tqr:REF_DATE:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:PREDICTED_VACANCIES:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:total_vacancies:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:PREDICTED_VACANCIES:qk]&quot;</bucket>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:total_vacancies (machinelearning):qk]&quot;</bucket>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:total_vacancies:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='14' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[:Measure Names]' />
              <text column='[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[Multiple Values]</rows>
        <cols>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[tqr:REF_DATE:qk]</cols>
      </table>
      <simple-id uuid='{2445532E-88DB-47FF-91EC-76E0BB54332D}' />
    </worksheet>
    <worksheet name='Machine Learning - Time Series'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Time series</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies) (4)' name='federated.1gmioib0088thf1bsq5b71apq648 (copy 3)' />
          </datasources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648 (copy 3)'>
            <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Predicted Vacancies (Tsoutputcanada)' datatype='real' name='[predicted_vacancies (tsoutputcanada)]' role='measure' type='quantitative' />
            <column caption='Ref Date' datatype='date' name='[ref_date]' role='dimension' type='ordinal' />
            <column-instance column='[predicted_vacancies (tsoutputcanada)]' derivation='Sum' name='[sum:predicted_vacancies (tsoutputcanada):qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_vacancies (machinelearning)]' derivation='Sum' name='[sum:total_vacancies (machinelearning):qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_vacancies (tsoutputcanada)]' derivation='Sum' name='[sum:total_vacancies (tsoutputcanada):qk]' pivot='key' type='quantitative' />
            <column caption='Total Vacancies (Machinelearning)' datatype='real' name='[total_vacancies (machinelearning)]' role='measure' type='quantitative' />
            <column caption='Total Vacancies (Tsoutputcanada)' datatype='real' name='[total_vacancies (tsoutputcanada)]' role='measure' type='quantitative' />
            <column-instance column='[ref_date]' derivation='Quarter-Trunc' name='[tqr:ref_date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:total_vacancies (tsoutputcanada):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:predicted_vacancies (tsoutputcanada):qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:total_vacancies (machinelearning):qk]&quot;</bucket>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:total_vacancies (tsoutputcanada):qk]&quot;</bucket>
              <bucket>&quot;[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:predicted_vacancies (tsoutputcanada):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[Action (Location)]'>
            <groupfilter function='level-members' level='[location]' user:ui-action-filter='[Action8_0EF2D039B0C64B118D96EDF8EC57DD93]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[Action (Location)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='13' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[:Measure Names]' />
              <text column='[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[Multiple Values]' />
              <lod column='[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[Multiple Values]</rows>
        <cols>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[tqr:ref_date:qk]</cols>
      </table>
      <simple-id uuid='{280DC192-8F07-4C1F-936A-B98AE2DF210E}' />
    </worksheet>
    <worksheet name='Top 5 NOCs by vacancies'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Top 5 </run>
            <run bold='true' fontcolor='#d37295'>NOCs</run>
            <run> by </run>
            <run bold='true' fontcolor='#4e79a7'>Job Vacancies</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies)' name='federated.1gmioib0088thf1bsq5b71apq648' />
          </datasources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648'>
            <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
            <column-instance column='[ref_date]' derivation='Quarter' name='[qr:ref_date:ok]' pivot='key' type='ordinal' />
            <column caption='Quarter' datatype='string' name='[quarter]' role='dimension' type='nominal' />
            <column caption='Ref Date' datatype='date' name='[ref_date]' role='dimension' type='ordinal' />
            <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
            <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
            <column-instance column='[ref_date]' derivation='Year' name='[yr:ref_date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Quarter)]'>
            <groupfilter function='level-members' level='[quarter]' user:ui-action-filter='[Action8_47501E1671074E028659D69BC7A7705C]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]'>
            <groupfilter function='level-members' level='[none:location:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]'>
            <groupfilter count='5' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([total_vacancies])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter from='&quot;Accommodation service managers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Agricultural and fish products inspectors&quot;' />
                  <groupfilter from='&quot;Agricultural service contractors, farm supervisors and specialized livestock workers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;By-law enforcement and other regulatory officers, not elsewhere classified (n.e.c.)&quot;' />
                  <groupfilter from='&quot;Cardiology technologists and electrophysiological diagnostic technologists, not elsewhere classified (n.e.c.)&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Central control and process operators, mineral and metal processing&quot;' />
                  <groupfilter from='&quot;Chefs&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Contractors and supervisors, mining, oil and gas&quot;' />
                  <groupfilter from='&quot;Contractors and supervisors, other construction trades, installers, repairers and servicers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Corporate sales managers&quot;' />
                  <groupfilter from='&quot;Correspondence, publication and regulatory clerks&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Customer services representatives - financial institutions&quot;' />
                  <groupfilter from='&quot;Dancers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Dental assistants&quot;' />
                  <groupfilter from='&quot;Dietitians and nutritionists&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Electrical and electronics engineers&quot;' />
                  <groupfilter from='&quot;Electrical power line and cable workers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Elementary and secondary school teacher assistants&quot;' />
                  <groupfilter from='&quot;Employment insurance, immigration, border services and revenue officers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Executive assistants&quot;' />
                  <groupfilter from='&quot;Facility operation and maintenance managers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Firefighters&quot;' />
                  <groupfilter from='&quot;Food and beverage servers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Food service supervisors&quot;' />
                  <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Forestry technologists and technicians&quot;' />
                  <groupfilter from='&quot;Gas fitters&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Geological and mineral technologists and technicians&quot;' />
                  <groupfilter from='&quot;Geoscientists and oceanographers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Government managers - health and social policy development and program administration&quot;' />
                  <groupfilter from='&quot;Graphic designers and illustrators&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Industrial painters, coaters and metal finishing process operators&quot;' />
                  <groupfilter from='&quot;Industrial, electrical and construction trades&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Labourers in chemical products processing and utilities&quot;' />
                  <groupfilter from='&quot;Labourers in food and beverage processing&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Light duty cleaners&quot;' />
                  <groupfilter from='&quot;Longshore workers and material handlers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Medical technologists and technicians (except dental health)&quot;' />
                  <groupfilter from='&quot;Metalworking and forging machine operators&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Motor vehicle assemblers, inspectors and testers&quot;' />
                  <groupfilter from='&quot;Natural and applied science policy researchers, consultants and program officers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Office support occupations&quot;' />
                  <groupfilter from='&quot;Operators and attendants in amusement, recreation and sport&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Other installers, repairers and servicers and material handlers&quot;' />
                  <groupfilter from='&quot;Other labourers in processing, manufacturing and utilities&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Other religious occupations&quot;' />
                  <groupfilter from='&quot;Other sales related occupations&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Other technical occupations in therapy and assessment&quot;' />
                  <groupfilter from='&quot;Other trades helpers and labourers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Painters and decorators (except interior decorators)&quot;' />
                  <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Paper converting machine operators&quot;' />
                  <groupfilter from='&quot;Paralegal and related occupations&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Personnel clerks&quot;' />
                  <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Pharmacists&quot;' />
                  <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Pharmacists, dietitians and nutritionists&quot;' />
                  <groupfilter from='&quot;Photographers, graphic arts technicians and technical and co-ordinating occupations in motion pictures, broadcasting and the performing arts&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Purchasing managers&quot;' />
                  <groupfilter from='&quot;Railway and yard locomotive engineers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Retail salespersons&quot;' />
                  <groupfilter from='&quot;Rubber processing machine operators and related workers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Sales support occupations&quot;' />
                  <groupfilter from='&quot;School principals and administrators of elementary and secondary education&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Senior managers - health, education, social and community services and membership organizations&quot;' />
                  <groupfilter from='&quot;Service representatives and other customer and personal services occupations&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Statistical officers and related research support occupations&quot;' />
                  <groupfilter from='&quot;Store shelf stockers, clerks and order fillers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Supervisors, forest products processing&quot;' />
                  <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Supervisors, general office and administrative support workers&quot;' />
                  <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Supervisors, library, correspondence and related information workers&quot;' />
                  <groupfilter from='&quot;Supervisors, mail and message distribution occupations&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Supervisors, other mechanical and metal products manufacturing&quot;' />
                  <groupfilter from='&quot;Supervisors, petroleum, gas and chemical processing and utilities&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Support occupations in accommodation, travel and facilities set-up services&quot;' />
                  <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Survey interviewers and statistical clerks&quot;' />
                  <groupfilter from='&quot;Technical occupations in architecture, drafting, surveying, geomatics and meteorology&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Technical occupations in computer and information systems&quot;' />
                  <groupfilter from='&quot;Technical occupations in electronics and electrical engineering&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Testers and graders, food and beverage processing&quot;' />
                  <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Therapy and assessment professionals&quot;' />
                  <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Tool and die makers&quot;' />
                  <groupfilter from='&quot;Tour and travel guides&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Utilities managers&quot;' />
                  <groupfilter from='&quot;Water and waste treatment plant operators&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Writing, translating and related communications professionals&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' direction='DESC' using='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' />
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]'>
            <groupfilter function='member' level='[qr:ref_date:ok]' member='3' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]'>
            <groupfilter function='member' level='[yr:ref_date:ok]' member='2019' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Quarter)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' value='139' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' />
              <text column='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]</rows>
        <cols>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</cols>
      </table>
      <simple-id uuid='{0232D0DE-57B9-40E5-BF45-624F4509DA98}' />
    </worksheet>
    <worksheet name='Vacacnies by NOC by Quarter'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#4e79a7'>Job Vacancies</run>
            <run> by </run>
            <run bold='true' fontcolor='#d37295'>NOC</run>
            <run> by </run>
            <run bold='true'>Quarter</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies)' name='federated.1gmioib0088thf1bsq5b71apq648' />
          </datasources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648'>
            <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Noc Code (Noc)' datatype='string' name='[noc_code (noc)]' role='dimension' type='nominal' />
            <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[noc_code (noc)]' derivation='None' name='[none:noc_code (noc):nk]' pivot='key' type='nominal' />
            <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
            <column-instance column='[quarter]' derivation='None' name='[none:quarter:nk]' pivot='key' type='nominal' />
            <column caption='Quarter' datatype='string' name='[quarter]' role='dimension' type='nominal' />
            <column caption='Ref Date' datatype='date' name='[ref_date]' role='dimension' type='ordinal' />
            <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
            <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
            <column-instance column='[ref_date]' derivation='Year' name='[yr:ref_date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Quarter)]'>
            <groupfilter function='level-members' level='[quarter]' user:ui-action-filter='[Action4_70CF31A8930A4FF3B05A97EB6D5EDFA9]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Alberta&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;British Columbia&quot;' />
              <groupfilter from='&quot;Manitoba&quot;' function='range' level='[none:location:nk]' to='&quot;Yukon&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;0&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;1&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;2&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;3&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;4&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;5&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;6&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;7&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;8&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;9&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]'>
            <groupfilter function='member' level='[yr:ref_date:ok]' member='2019' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Quarter)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.1gmioib0088thf1bsq5b71apq648].[none:quarter:nk]' value='-90' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]</rows>
        <cols>([federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk] / [federated.1gmioib0088thf1bsq5b71apq648].[none:quarter:nk])</cols>
      </table>
      <simple-id uuid='{8E0C4465-2E64-408A-9F49-043C8BBA4B0F}' />
    </worksheet>
    <worksheet name='Vacancies Trend'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#4e79a7'>Job Vacancies</run>
            <run> Trend</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies)' name='federated.1gmioib0088thf1bsq5b71apq648' />
          </datasources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648'>
            <column caption='Job Details' datatype='string' name='[job_details]' role='dimension' type='nominal' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
            <column-instance column='[job_details]' derivation='None' name='[none:job_details:nk]' pivot='key' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
            <column-instance column='[ref_date]' derivation='None' name='[none:ref_date:ok]' pivot='key' type='ordinal' />
            <column caption='Quarter' datatype='string' name='[quarter]' role='dimension' type='nominal' />
            <column caption='Ref Date' datatype='date' name='[ref_date]' role='dimension' type='ordinal' />
            <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
            <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
            <column-instance column='[ref_date]' derivation='Quarter-Trunc' name='[tqr:ref_date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Job Details)]'>
            <groupfilter function='level-members' level='[job_details]' user:ui-action-filter='[Action2_54655C2312584FEC9EBE2EB5BE7DF425]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Location)]'>
            <groupfilter function='level-members' level='[location]' user:ui-action-filter='[Action3_06FD5E072C6640AE85F2A9986B756190]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Quarter)]'>
            <groupfilter function='level-members' level='[quarter]' user:ui-action-filter='[Action8_47501E1671074E028659D69BC7A7705C]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:job_details:nk]'>
            <groupfilter function='member' level='[none:job_details:nk]' member='&quot;Type of work, all types&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]'>
            <groupfilter function='level-members' level='[none:location:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]'>
            <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Total, all occupations&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:ref_date:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2015-04-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2015-07-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2015-10-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2016-01-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2016-04-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2016-07-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2016-10-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2017-01-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2017-04-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2017-07-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2017-10-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2018-01-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2018-04-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2018-07-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2018-10-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2019-01-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2019-04-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2019-07-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2019-10-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2020-01-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2020-10-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2021-01-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2021-04-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2021-07-01#' />
              <groupfilter function='member' level='[none:ref_date:ok]' member='#2021-10-01#' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:ref_date:ok]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Job Details)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Location)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Quarter)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:job_details:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' value='' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <text column='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]</rows>
        <cols>[federated.1gmioib0088thf1bsq5b71apq648].[tqr:ref_date:qk]</cols>
      </table>
      <simple-id uuid='{DE66E26B-12EA-44C7-9BBF-F677AD68C173}' />
    </worksheet>
    <worksheet name='Vacancies by Job Type'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#4e79a7'>Job Vacancies </run>
            <run>by </run>
            <run bold='true' fontcolor='#79706e'>Job Type</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies)' name='federated.1gmioib0088thf1bsq5b71apq648' />
          </datasources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648'>
            <column caption='Job Details' datatype='string' name='[job_details]' role='dimension' type='nominal' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
            <column-instance column='[job_details]' derivation='None' name='[none:job_details:nk]' pivot='key' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
            <column-instance column='[ref_date]' derivation='Quarter' name='[qr:ref_date:ok]' pivot='key' type='ordinal' />
            <column caption='Quarter' datatype='string' name='[quarter]' role='dimension' type='nominal' />
            <column caption='Ref Date' datatype='date' name='[ref_date]' role='dimension' type='ordinal' />
            <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
            <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
            <column-instance column='[ref_date]' derivation='Year' name='[yr:ref_date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Location)]'>
            <groupfilter function='level-members' level='[location]' user:ui-action-filter='[Action3_06FD5E072C6640AE85F2A9986B756190]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Quarter)]'>
            <groupfilter function='level-members' level='[quarter]' user:ui-action-filter='[Action8_47501E1671074E028659D69BC7A7705C]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]'>
            <groupfilter function='level-members' level='[none:location:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]'>
            <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Total, all occupations&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]'>
            <groupfilter function='member' level='[qr:ref_date:ok]' member='3' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]'>
            <groupfilter function='member' level='[yr:ref_date:ok]' member='2019' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Location)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Quarter)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' />
              <text column='[federated.1gmioib0088thf1bsq5b71apq648].[none:job_details:nk]' />
              <text column='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' />
              <color column='[federated.1gmioib0088thf1bsq5b71apq648].[none:job_details:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{D321827C-B438-4BA7-AAAA-12578A763053}' />
    </worksheet>
    <worksheet name='Vacancies by NOC bar'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#4e79a7'>Job Vacancies</run>
            <run> by </run>
            <run bold='true' fontcolor='#d37295'>NOC</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies)' name='federated.1gmioib0088thf1bsq5b71apq648' />
          </datasources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648'>
            <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Noc Code (Noc)' datatype='string' name='[noc_code (noc)]' role='dimension' type='nominal' />
            <column caption='Noc Code' datatype='string' name='[noc_code]' role='dimension' type='nominal' />
            <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
            <column-instance column='[noc_code (noc)]' derivation='None' name='[none:noc_code (noc):nk]' pivot='key' type='nominal' />
            <column-instance column='[noc_code]' derivation='None' name='[none:noc_code:nk]' pivot='key' type='nominal' />
            <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
            <column-instance column='[ref_date]' derivation='Quarter' name='[qr:ref_date:ok]' pivot='key' type='ordinal' />
            <column caption='Ref Date' datatype='date' name='[ref_date]' role='dimension' type='ordinal' />
            <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
            <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
            <column-instance column='[ref_date]' derivation='Year' name='[yr:ref_date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Location)]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[location]' member='&quot;Alberta&quot;' />
              <groupfilter function='member' level='[location]' member='&quot;British Columbia&quot;' />
              <groupfilter from='&quot;Manitoba&quot;' function='range' level='[location]' to='&quot;Yukon&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;0&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;1&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;2&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;3&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;4&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;5&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;6&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;7&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;8&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;9&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]'>
            <groupfilter expression='COUNT([noc_code (noc)]) &lt; 100' function='filter' user:ui-filter-by-field='true' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:noc_desc:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]'>
            <groupfilter function='member' level='[qr:ref_date:ok]' member='3' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]'>
            <groupfilter function='member' level='[yr:ref_date:ok]' member='2019' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Location)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' value='61' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code:nk]' value='false' />
            <format attr='text-orientation' field='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' value='-90' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]</rows>
        <cols>([federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code:nk] / [federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk])</cols>
      </table>
      <simple-id uuid='{FF583DDA-510E-4DFA-A2EF-9B8DB60E58D1}' />
    </worksheet>
    <worksheet name='Vacancies by NOC pie'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#4e79a7'>Job Vacancies</run>
            <run> by </run>
            <run bold='true' fontcolor='#d37295'>NOC</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies)' name='federated.1gmioib0088thf1bsq5b71apq648' />
          </datasources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648'>
            <column caption='Noc Code (Noc)' datatype='string' name='[noc_code (noc)]' role='dimension' type='nominal' />
            <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
            <column-instance column='[noc_code (noc)]' derivation='None' name='[none:noc_code (noc):nk]' pivot='key' type='nominal' />
            <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
            <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
            <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;0&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;1&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;2&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;3&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;4&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;5&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;6&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;7&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;8&quot;' />
              <groupfilter function='member' level='[none:noc_code (noc):nk]' member='&quot;9&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter from='&quot;Accommodation service managers&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Tool and die makers&quot;' />
              <groupfilter from='&quot;Tour and travel guides&quot;' function='range' level='[none:noc_desc:nk]' to='&quot;Writing, translating and related communications professionals&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]' />
              <wedge-size column='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' />
              <size column='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' />
              <text column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{38196E94-B753-4F1C-A4EA-9A8B2C721355}' />
    </worksheet>
    <worksheet name='Vacancies by Province Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#4e79a7'>Job Vacancies</run>
            <run> by </run>
            <run bold='true' fontcolor='#f28e2b'>Province</run>
            <run> Map</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies)' name='federated.1gmioib0088thf1bsq5b71apq648' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648'>
            <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Noc Code' datatype='string' name='[noc_code]' role='dimension' type='nominal' />
            <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
            <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
            <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Noc Code,Noc Desc)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action1_632F78EC6D92451293FEC255EDAE9976]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[noc_code]' />
              <groupfilter function='level-members' level='[noc_desc]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Noc Desc)]'>
            <groupfilter function='level-members' level='[noc_desc]' user:ui-action-filter='[Action3_87C0E39C0C184606BDCB96E5AB5359E4]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]'>
            <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Total, all occupations&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Noc Code,Noc Desc)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Noc Desc)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1gmioib0088thf1bsq5b71apq648].[Longitude (generated)]' field-type='quantitative' max='882730.16066945717' min='-22522921.609138303' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1gmioib0088thf1bsq5b71apq648].[Latitude (generated)]' field-type='quantitative' max='12664553.998318151' min='3196182.2456899732' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' />
              <text column='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]' />
              <lod column='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]' />
              <color column='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' />
              <geometry column='[federated.1gmioib0088thf1bsq5b71apq648].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1gmioib0088thf1bsq5b71apq648].[Latitude (generated)]</rows>
        <cols>[federated.1gmioib0088thf1bsq5b71apq648].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{5B5FE2F0-DCF9-4F18-8DA3-52836B7CFFD6}' />
    </worksheet>
    <worksheet name='Vacancies by Province bar'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#4e79a7'>Job Vacancies</run>
            <run> by </run>
            <run bold='true' fontcolor='#f28e2b'>Province</run>
            <run> Bar</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies)' name='federated.1gmioib0088thf1bsq5b71apq648' />
          </datasources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648'>
            <column caption='Job Details' datatype='string' name='[job_details]' role='dimension' type='nominal' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Noc Code' datatype='string' name='[noc_code]' role='dimension' type='nominal' />
            <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
            <column-instance column='[ref_date]' derivation='Quarter' name='[qr:ref_date:ok]' pivot='key' type='ordinal' />
            <column caption='Quarter' datatype='string' name='[quarter]' role='dimension' type='nominal' />
            <column caption='Ref Date' datatype='date' name='[ref_date]' role='dimension' type='ordinal' />
            <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
            <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
            <column-instance column='[ref_date]' derivation='Year' name='[yr:ref_date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Job Details)]'>
            <groupfilter function='level-members' level='[job_details]' user:ui-action-filter='[Action2_54655C2312584FEC9EBE2EB5BE7DF425]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Noc Code,Noc Desc)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action5_0323B7D9AD2C4556B88569B8C7D6285A]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[noc_code]' />
              <groupfilter function='level-members' level='[noc_desc]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Noc Desc,Quarter)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[noc_desc]' />
              <groupfilter function='level-members' level='[quarter]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Quarter)]'>
            <groupfilter function='level-members' level='[quarter]' user:ui-action-filter='[Action4_70CF31A8930A4FF3B05A97EB6D5EDFA9]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Alberta&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;British Columbia&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Manitoba&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;New Brunswick&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Newfoundland and Labrador&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Northwest Territories&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Nova Scotia&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Nunavut&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Ontario&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Prince Edward Island&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Quebec&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Saskatchewan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Yukon&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]'>
            <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Total, all occupations&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]'>
            <groupfilter function='member' level='[qr:ref_date:ok]' member='3' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]'>
            <groupfilter function='member' level='[yr:ref_date:ok]' member='2019' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Job Details)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Quarter)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Noc Desc,Quarter)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Noc Code,Noc Desc)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]</rows>
        <cols>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</cols>
      </table>
      <simple-id uuid='{EE03D689-4D62-441B-A4C9-B035C2EFE323}' />
    </worksheet>
    <worksheet name='Vacancies by Province trend'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#4e79a7'>Job Vacancies</run>
            <run> by </run>
            <run bold='true' fontcolor='#f28e2b'>Province</run>
            <run> trend</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies)' name='federated.1gmioib0088thf1bsq5b71apq648' />
          </datasources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648'>
            <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[ref_date]' derivation='MY' name='[my:ref_date:ok]' pivot='key' type='ordinal' />
            <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
            <column-instance column='[ref_date]' derivation='None' name='[none:ref_date:ok]' pivot='key' type='ordinal' />
            <column caption='Ref Date' datatype='date' name='[ref_date]' role='dimension' type='ordinal' />
            <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
            <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[my:ref_date:ok]'>
            <groupfilter from='201504' function='range' level='[my:ref_date:ok]' to='202010' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]'>
            <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Total, all occupations&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[my:ref_date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1gmioib0088thf1bsq5b71apq648].[none:ref_date:ok]' value='33' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.1gmioib0088thf1bsq5b71apq648].[none:ref_date:ok]' value='-90' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]' />
              <lod column='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]' />
              <lod column='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' />
              <text column='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]</rows>
        <cols>[federated.1gmioib0088thf1bsq5b71apq648].[none:ref_date:ok]</cols>
      </table>
      <simple-id uuid='{77032847-20CF-4DB1-943C-B09B6FCA5D55}' />
    </worksheet>
    <worksheet name='Vacancies by Quarter'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#4e79a7'>Job Vacancies</run>
            <run> by </run>
            <run bold='true'>Quarter</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='vacancies (Vacancies)' name='federated.1gmioib0088thf1bsq5b71apq648' />
          </datasources>
          <datasource-dependencies datasource='federated.1gmioib0088thf1bsq5b71apq648'>
            <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='Noc Code' datatype='string' name='[noc_code]' role='dimension' type='nominal' />
            <column caption='Noc Desc' datatype='string' name='[noc_desc]' role='dimension' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[noc_desc]' derivation='None' name='[none:noc_desc:nk]' pivot='key' type='nominal' />
            <column-instance column='[quarter]' derivation='None' name='[none:quarter:nk]' pivot='key' type='nominal' />
            <column caption='Quarter' datatype='string' name='[quarter]' role='dimension' type='nominal' />
            <column caption='Ref Date' datatype='date' name='[ref_date]' role='dimension' type='ordinal' />
            <column-instance column='[total_vacancies]' derivation='Sum' name='[sum:total_vacancies:qk]' pivot='key' type='quantitative' />
            <column caption='Total Vacancies' datatype='real' name='[total_vacancies]' role='measure' type='quantitative' />
            <column-instance column='[ref_date]' derivation='Year' name='[yr:ref_date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Location)]'>
            <groupfilter function='level-members' level='[location]' user:ui-action-filter='[Action6_7A150446598346489EB63E6331CE1086]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Noc Code,Noc Desc)]'>
            <groupfilter function='crossjoin' user:ui-action-filter='[Action5_0323B7D9AD2C4556B88569B8C7D6285A]' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[noc_code]' />
              <groupfilter function='level-members' level='[noc_desc]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[Action (Noc Desc,Quarter)]' />
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]'>
            <groupfilter function='level-members' level='[none:location:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]'>
            <groupfilter function='member' level='[none:noc_desc:nk]' member='&quot;Total, all occupations&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]'>
            <groupfilter function='member' level='[yr:ref_date:ok]' member='2019' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Noc Desc,Quarter)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Noc Code,Noc Desc)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[Action (Location)]</column>
            <column>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1gmioib0088thf1bsq5b71apq648].[none:quarter:nk]' />
              <wedge-size column='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' />
              <size column='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' />
              <text column='[federated.1gmioib0088thf1bsq5b71apq648].[none:quarter:nk]' />
              <text column='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{7AD97D80-3F77-4990-92D7-6974FF4CB0EB}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='1 Vacancies Trend Dashboard'>
      <style />
      <size maxheight='1000' maxwidth='1200' minheight='1000' minwidth='1200' sizing-mode='fixed' />
      <zones>
        <zone h='29700' id='3' name='Vacancies Trend' w='97833' x='1000' y='1700' />
        <zone h='28400' id='7' name='Vacancies by Job Type' w='30000' x='66833' y='31600' />
        <zone h='34100' id='8' name='Vacancies by Province bar' w='56333' x='1250' y='32600' />
        <zone h='30100' id='28' name='Top 5 NOCs by vacancies' w='54833' x='44083' y='69600' />
        <zone h='34300' id='30' name='Vacancies by Quarter' w='37667' x='917' y='67600' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1450' minheight='1450' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='80' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98400' id='79' param='vert' type-v2='layout-flow' w='98666' x='667' y='800'>
                <zone fixed-size='280' h='29700' id='3' is-fixed='true' name='Vacancies Trend' w='97833' x='1000' y='1700'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='28400' id='7' is-fixed='true' name='Vacancies by Job Type' w='30000' x='66833' y='31600'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='34100' id='8' is-fixed='true' name='Vacancies by Province bar' w='56333' x='1250' y='32600'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='34300' id='30' is-fixed='true' name='Vacancies by Quarter' w='37667' x='917' y='67600'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='30100' id='28' is-fixed='true' name='Top 5 NOCs by vacancies' w='54833' x='44083' y='69600'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{DD701691-9775-4A87-BD69-BE118E230E8A}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='3 Time Series Prediction dashboard (2)'>
      <style />
      <size maxheight='1000' maxwidth='1200' minheight='1000' minwidth='1200' sizing-mode='fixed' />
      <zones>
        <zone h='50800' id='3' name='Vacancies by Province Map' w='95667' x='917' y='300' />
        <zone h='9500' id='4' name='Vacancies by Province Map' pane-specification-id='0' param='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' type-v2='color' w='14000' x='55000' y='9750' />
        <zone h='44200' id='30' name='Machine Learning - Time Series' w='95417' x='1083' y='52300' />
        <zone h='5800' id='31' name='Machine Learning - Time Series' pane-specification-id='13' param='[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[:Measure Names]' type-v2='color' w='23750' x='72750' y='53300' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='750' minheight='750' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='59' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98400' id='58' param='vert' type-v2='layout-flow' w='98666' x='667' y='800'>
                <zone fixed-size='280' h='50800' id='3' is-fixed='true' name='Vacancies by Province Map' w='95667' x='917' y='300'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='9500' id='4' name='Vacancies by Province Map' pane-specification-id='0' param='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' type-v2='color' w='14000' x='55000' y='9750'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='44200' id='30' is-fixed='true' name='Machine Learning - Time Series' w='95417' x='1083' y='52300'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5800' id='31' name='Machine Learning - Time Series' pane-specification-id='13' param='[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[:Measure Names]' type-v2='color' w='23750' x='72750' y='53300'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{B73FC7F6-A5F5-43EB-AFB2-C5D91C17E8DB}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='4 MLP machine learning'>
      <style />
      <size maxheight='1000' maxwidth='1200' minheight='1000' minwidth='1200' sizing-mode='fixed' />
      <zones>
        <zone h='40400' id='2' name='Top 5 NOCs by vacancies' w='51667' x='2750' y='46800' />
        <zone h='43500' id='7' name='Machine Learning - MLP' w='90583' x='917' y='900' />
        <zone h='5800' id='8' name='Machine Learning - MLP' pane-specification-id='14' param='[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[:Measure Names]' type-v2='color' w='18417' x='51333' y='1700' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='32' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98400' id='31' param='vert' type-v2='layout-flow' w='98666' x='667' y='800'>
                <zone fixed-size='280' h='43500' id='7' is-fixed='true' name='Machine Learning - MLP' w='90583' x='917' y='900'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5800' id='8' name='Machine Learning - MLP' pane-specification-id='14' param='[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[:Measure Names]' type-v2='color' w='18417' x='51333' y='1700'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='40400' id='2' is-fixed='true' name='Top 5 NOCs by vacancies' w='51667' x='2750' y='46800'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{983A3511-956C-417C-B7CE-68C3EA5879F2}' />
    </dashboard>
  </dashboards>
  <windows source-height='93'>
    <window class='worksheet' maximized='true' name='Vacancies by Province Map' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5173BA6F-B89F-4463-8452-9A5F570C7860}' />
    </window>
    <window class='worksheet' name='Vacancies by Province bar' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:total_vacancies (quarterly_vacancies):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3F42A536-3294-4189-BAB0-55E0329358DF}' />
    </window>
    <window class='worksheet' name='Vacancies by Province trend' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[my:ref_date:ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:ref_date:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{948C22CA-08E2-49BC-B989-B8BB1952CD0D}' />
    </window>
    <window class='worksheet' name='Vacancies Trend' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:job_details:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:ref_date:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BA9B4881-2C3E-4609-865A-8D183DE66964}' />
    </window>
    <window class='worksheet' name='Vacancies by Quarter' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:quarter:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:quarter:ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:year:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:year:ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{ADDC2C32-025E-422A-B35B-FDA6ADF11E6D}' />
    </window>
    <window class='worksheet' name='Vacacnies by NOC by Quarter' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:quarter:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:year:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:year:ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{A176FF32-E6B0-4171-A91D-B2985C6F9754}' />
    </window>
    <window class='worksheet' name='Vacancies by Job Type' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gmioib0088thf1bsq5b71apq648].[none:job_details:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:job_details:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{EB3E9451-A770-40B0-847E-EF5036A61606}' />
    </window>
    <window class='worksheet' name='Vacancies by NOC bar' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:total_vacancies (quarterly_vacancies):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{CDAB1122-6F2C-4B2C-AF64-0B326B7D504C}' />
    </window>
    <window class='worksheet' name='Vacancies by NOC pie' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]' type='color' />
            <card pane-specification-id='0' param='[federated.1gmioib0088thf1bsq5b71apq648].[sum:total_vacancies:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{99EE6178-0268-49D8-87BF-25C7B92ECD75}' />
    </window>
    <window class='worksheet' name='Top 5 NOCs by vacancies' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]' type='filter' />
            <card param='[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[io:Top 5 NOCs:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{958D9BE4-0DE3-4F76-AAB7-2802F9B3D3A7}' />
    </window>
    <window class='worksheet' name='Average Wage by Job Type' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:job_char (averagewage):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:location (averagewage):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:quarter (averagewage):qk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:year (averagewage):qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{15FCB6ED-92C2-4CA1-B4FE-350E4BDA490F}' />
    </window>
    <window class='worksheet' name='Average Wage by NOC' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date (averagewage):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{75338525-4747-442D-A4E3-4A28C554453E}' />
    </window>
    <window class='worksheet' name='Average Wage by Province' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date (averagewage):ok]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:location (averagewage):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:location:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code (noc):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_code:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:quarter (averagewage):qk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[none:quarter:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[qr:ref_date:ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648].[yr:ref_date (averagewage):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{49C965E8-C072-485C-AD94-8513D0D0BD92}' />
    </window>
    <window class='worksheet' name='Machine Learning - Time Series' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='250'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='13' param='[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[:Measure Names]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:Calculation_2755077114843037698:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:GEO (MLP!Test!case0):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:GEO:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:JOB_CHAR:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:NOC:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:Noc_code:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:geo (machinelearning):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:geo:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:job_char (TSmodel_output_Canada):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:job_char (machinelearning):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:location (averagewage):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:location:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:noc_code (averagewage):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:noc_code (machinelearning):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:noc_desc (TSmodel_output_Canada):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[none:ref_date:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[qr:ref_date (averagewage):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:PREDICTED_VACANCIES (MLP!Test!case0):qk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[sum:total_vacancies (machinelearning):qk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[tqr:ref_date (machinelearning):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[tqr:ref_date (machinelearning):qk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[tqr:ref_date:ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[yr:REF_DATE (MLP!Test!case0):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[yr:REF_DATE:ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[yr:ref_date (TSmodel_output_Canada):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[yr:ref_date (averagewage):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[yr:ref_date (machinelearning):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[yr:ref_date (tsoutputcanada):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[yr:ref_date (tsoutputprovinces):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[yr:ref_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B4C1317F-8462-47CD-956E-5E18732B5DD5}' />
    </window>
    <window class='worksheet' name='Machine Learning - MLP' tab-color='#f66273'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='14' param='[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[:Measure Names]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[none:Calculation_2755077114843037698:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[none:GEO (MLP!Test!case0):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[none:GEO:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[none:JOB_CHAR:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[none:NOC:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[none:Noc_code:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[none:geo:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[none:location (averagewage):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[none:location:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[none:noc_code (averagewage):nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[none:ref_date:nk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[qr:ref_date (averagewage):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:PREDICTED_VACANCIES (MLP!Test!case0):qk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[sum:total_vacancies (machinelearning):qk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[tqr:ref_date (machinelearning):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[tqr:ref_date (machinelearning):qk]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[tqr:ref_date:ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[yr:REF_DATE (MLP!Test!case0):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[yr:REF_DATE:ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[yr:ref_date (TSmodel_output_Canada):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[yr:ref_date (averagewage):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[yr:ref_date (machinelearning):ok]</field>
            <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[yr:ref_date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1F08644B-590B-4806-A3F8-625B5EFD35E5}' />
    </window>
    <window class='dashboard' name='1 Vacancies Trend Dashboard' tab-color='#dec77b'>
      <viewpoints>
        <viewpoint name='Top 5 NOCs by vacancies'>
          <zoom type='entire-view' />
          <highlight field='[federated.1gmioib0088thf1bsq5b71apq648].[none:noc_desc:nk]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='Vacancies Trend'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Vacancies by Job Type'>
          <highlight field='[federated.1gmioib0088thf1bsq5b71apq648].[none:job_details:nk]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='Vacancies by Province bar'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Vacancies by Quarter'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{D19FEF3D-725A-4D6E-9DA3-9EEE5C3FDAAC}' />
    </window>
    <window class='dashboard' name='3 Time Series Prediction dashboard (2)' tab-color='#dec77b'>
      <viewpoints>
        <viewpoint name='Machine Learning - Time Series'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 3)].[:Measure Names]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Vacancies by Province Map'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='30' />
      <simple-id uuid='{050BC2A4-EAE6-44B2-8789-A78428DC09A5}' />
    </window>
    <window class='dashboard' name='4 MLP machine learning' tab-color='#dec77b'>
      <viewpoints>
        <viewpoint name='Machine Learning - MLP'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1gmioib0088thf1bsq5b71apq648 (copy 2)].[:Measure Names]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Top 5 NOCs by vacancies'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{83A5D6F7-F6DE-488B-B0E6-2EB42057D97F}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='384' name='1 Vacancies Trend Dashboard' width='384'>
      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
      PitGJyenLtfz9fW94Bh7Is6eKEuAEydOkJqaSnJyMoMGDWLfvn1kZ2cjk8lQq9Xs3LkTk8mE
      r68vu3fvprCwkLKyMoKDgwE4cuQImZmZpKenM3DgQJKSkrpczx79Ot0py6KiIuLj48nMzMTX
      1xcHB4eeKUupDzAajZLFYpG2bNkinThxQqqoqJDa2tqkuLg4qa6uTjp69KjU2NgoGY1Gaffu
      3ZLZbLadm5eXJ2VkZEiSJElxcXFSS0tLl+vZM0ZJkqTs7GwpPT1d2rlzpyRJkrRz507JYrFI
      DQ0NUmxsrCRJkrR7926pvb29y/nbt2+XJEmSzGaztHPnTslqtUrbtm2Tdu/ebbcYO+M8l7Ks
      rq6Wjhw5ItXV1dnO7a2yNJlMksVikVpaWqQ9e/ZIu3btkqxWq5ScnCyVlpZKdXV1trJMSEiQ
      KisrpebmZtv5+/bts5VvZ7kePHhQ2r9/v1RdXd3rMXbavn277f/JL2P85fXsxd5xSpL9y1KS
      /vP7s3PnTqm6ulo6ePCg7evm5mapqqpKOn78uCRJkrRlyxapvb1d2rZtmyRJkmSxWGy/byUl
      JdLJkye7XK+trc0uMXb3/2V5ebmUnJws5ebmSpLUM2XZJ5qA2tra2Lx5MxMnTqS1tRWdTodW
      q8VoNOLu7m47TpIkdDodsbGxnDhxAoDGxkY8PT0BcHd3p7m5ucv17EWlUnH06FEqKioYMmSI
      bXKcUqlEJpPh6upqO3bgwIEkJiayceNG25C2zuMVCgVyuZwTJ04QGRkJ2Hc88bmWZX19PaWl
      peTk5PDDDz8AvVeWSqWSwsJC9u3bx7Rp01AoFMhkMnQ6Ha2trV3ibGxs5PTp0yQkJJCdnQ10
      zEzvXIlWqVRSXV1tO99eZdmdGAEaGhpwcnKyzZb/ZYy/vJ692DvOnihL6Bh5tWPHDkJCQrBa
      reh0OqDj98HZ2Rm1Wt3l2Li4OJydnQEwGAw4OTkB4OnpSVNTU5fr2auW0p2y9Pf35+jRo5w6
      dQo3NzegZ8qyTySAvXv3Mn/+fLy8vPD39yc/P5/S0lI8PDy6HGc0GomOjmbGjBm2fQmCgoLI
      zMwEoLCwEE9Pzy7Xs5fMzEzUajVTp05FJpOh1+uRJIn29nZkMlmXY3U6HZMmTcLT0xODwQCA
      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
    </thumbnail>
    <thumbnail height='384' name='3 Time Series Prediction dashboard (2)' width='384'>
      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
      kyZNqpU52gShVqtJ/y4IBkN5Su2WreW1FSEhCGVlmNPScGzdGp9pb1RZBrtywK9Zs2YcPHhQ
      zDg6fPiwWEg1ZcoU5syZw7PPPktERARxcXEMHz6cEydOiGMmT55crYBhbVF2Nhrt7xsxxsWV
      G4Ihg8vvgKtgCCovYLeqj1iwYAGBgYG4urrSoUMHvvrqK1xcXBg2bBhnz55FJpPh7u4udu3L
      ysqyG7NmzRo6d+7MuXPnmDlzJvPnzyc4OJizZ88yZ86cGr9/myBgycyk7PQZin/6WXzcqVNH
      uxuE2saUnEzu3A/BQU7dmW/VerV/BRVV1pIWUC2i1WqZP38+7duX+9dcXFxo1aoVeXl5xMfH
      M3XqVB555BFxvJeXFz///DNarZYXX3yR77//npKSErKzs0lOTqZNmza4ublhtVprbY6SqNbN
      cXB0LNebCR+ALmIXV9euw2YygVxercUf4LXXXrP7u0+fPuLvXbp0EX8vKSlh4MCBNGzY0C4d
      tvKuF6hyxlNt4tS+HU7t25UL1W3YQNHKH7j6+0bcBg9CM6D/n16PigVMplBQ9+3/3XIBy8/P
      p1WrVnTp0oXt27czceJEfHx8WLRoEdnZ2bRp04agoD/OsWfPHrsxarVazMQBmD59OtnZ2eLf
      NUXm4ICyfn2U9evj2Lbc/WI4dx7t5i3kzPovjqGhuI8cUauGwBh/idx588szzP47644EqSuQ
      OTjgHBb24DWFr47Ewt3EarXSt29fHnnkEdasWYNMJqNr165ERUUhCAL169dnypQpbNiwgZ49
      y7MggoOD6d69OwaDAYvFwpgxYwgMDCQpKYnQ0FBSU1MJDg4mKipKLDH/M3Jycli6dCldu3Zl
      2bJl7Nq1i8aNG5OTk8P333/P6dOnxXz8ClauXImTkxPu7u4sXboULy8vPD09OX78OOvXr+f0
      6dM31RD/OyNTKFA3bwYODhjj43Ed0B/njnemuOhONLGvbRQ+Prj0fATH9u2wZOegi9iFbu8+
      bGYzysBAHCp9noyXL5M39yNkTk74vv0/lAG37qVQuWG8r68vLVu2xMXFhcjISLRaLc8//zzf
      ffcdPXv2RKFQcPr0absxrVu3ZseOHURFRTFq1CiOHDnCunXrePPNN+3ca7eD3MMDuYcH6ubN
      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
    </thumbnail>
    <thumbnail height='384' name='4 MLP machine learning' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='Average Wage by Job Type' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAFXUlEQVR4nO3VMQEAIAzAMMC/5yFjRxMF/XpnZg4AOW87AIAdBgAQZQAAUQYAEGUAAFEG
      ABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAA
      UQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBl
      AABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYA
      EGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABR
      BgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUA
      AFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQ
      ZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEG
      ABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAA
      UQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBl
      AABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYA
      EGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABR
      BgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUA
      AFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQ
      ZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEG
      ABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAA
      UQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBl
      AABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYA
      EGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABR
      BgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUA
      AFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQ
      ZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEG
      ABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAA
      UQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBl
      AABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEGABBlAABRBgAQZQAAUQYA
      EGUAAFEGABBlAABRBgAQZQAAUQYAEGUAAFEfFxoG/IiMv0YAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='Average Wage by NOC' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAcQElEQVR4nO3daZAc533f8V93T8+9szd2F8ACCwIQQFK8QNkUJdolOZJiyVKksstlv7Gd
      5E2q/CaV9ymXXuVlKpWk9CaxSqpKqhI7smVdji5KJEWJFEASIAkCxLn3Nbuzszv39JUXvVwA
      xIIRX1go6v/9VKEKnGl2z/T09Pfpp4eSkyRJIgCAOe79fgEAgPuDAACAUQQAAIwiAABgFAEA
      AKMIAAAYRQAAwCgCAABGEQAAMOp9ByBJEvWbvX+K1/Ira+8s3tftx3Gsbqd937afJLHineX7
      tn1JUhRIvcZ923yr11MQRfdt+5IUrq/f1+13Wi3d9/+Qv7FzXzefJJHi/uZ9fQ0fZN6Xv/zl
      L/+qCydxosbyljYvr8rzPfnlnLpbbW1dXVdzpS7Xc5UpZpXEiWrX1tRa21Gn2pBfysnzvXQd
      SaLNy6tqVRtqVxvKlnJyXEfbc5uqz1bV3WorWynIzdzdpiRJtLH4c9248FW5mZyKlcOKgo4W
      r3xLK9f/UVHQVWloRtvVN7R89TvaWn1NtZVXFcd9FSuH71hXsz6rpavf1tCBR+U4juI4VHXh
      RfW7dRXKk/fcB1EUaXVpQUtzs8rl88oXinuvbXH2hlzPUy6XVxRFWlmc1+rCvIJ+X6WBihzH
      2Vu21+1qeWFOg8MjkqQwDLU0d1OrS4tqNxsqVwbluvvsgyhUeO1HCl77n3LyFbmDh5V0thS8
      8bcKrv5Qcn05lYNS1Fdw8ZsK3v6ekl5T7sixve3vvZeVC4rmX5I3fkrafS5ubyq48L/kjp2S
      4/n774SwJ62ck9YvSvlhKVuWkljauiF1t6XCcPrPq+el2jVpe16qz0rFMcnL7n4Aq9LSL9N/
      pzgmeb608opUu54uvz0nlcbTx9+l3mnr57M3VGs3NVwoKZvJKIgivbW2onzGV973lSSJqq2m
      Xp67qfVmQxMDFXm37c/F+pYuri5rsV5Xq9fVWHlg77O5urGu7W5Hw8XSvm8/SRL1b9zQ9t9+
      Q4oiZSYmJMdR+xcvqfX884o2NuUfOSI5jvpXrqr57LPqvX1F/qFDcnO5vXV0L1xQ8wc/VNxo
      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
      4zraulFV9a3l9MsYxVo+e1PzL1xReWpIbsaTm80oDmNV31jUws+uKujcqr6X8xQHkapvLGrx
      xWt7z7XWdzT/whXVZ6uqHB7Zd/vjR35XhYGDWr72XV099xVFYfrlaDeW9MZzf6WJmU8qX57a
      W371+vc1eexTd7zN1va82juLGjv89N5jjuPIcX61XXH0+En1Oh0t3ryhpbl0VDl77YpmTnzo
      rsvEXreji6+d09DomEq7UwzvbG8/a8tLeu0XP1OjXtfw2Pi+y/gf/kMpDhW8+Q31X/l6eoKX
      FFXfVvf7/17ZM38m+SV5U48pmvu5uj/5D4rbm3KHpvfWEa++IfkluSO3vuRJd0fhtR/Lf+j/
      H0E98Ol0SmfhF9LG5fQ13Gv/JbG0fC6Nw+3iULryXenq96QDj9z2eCStvy5NPrbv6jKep2ce
      OKnrG1X95NrbqjYbu5/fnfu0nMup3mnr5bmbevHmNW13OopuC8DkQEWvLs7rOxdf16uL85Kk
      N1eWdHJ8QrlMRu8lMzWlwkefUvvsOdW+9nVFu1d9cbut2n//a2VGR5U7dSp9+1Gkxv/9vtpn
      z2rgc5/bW0fu9Ck1n/2JGj/4gXb+4VuKW20lYSgn6++9FzefV9IP7tq+72d19MRJbayv6tKF
      V9XtdPbdB+/otFuSI+WLtwYVvV5X21s1rSwtaOHGdd28clmStHDjug4dnbljwLKvg4ek4RHp
      xnXplbPp1M4+U5Z75uekw4fvXubGden7/yjV69Lkre+uul2p15UGB++5yuz4J5WELQUbz6lf
      /cnuYCdR1J5VZ+6ryk1+QXI8OY77nlM4SZKoX31W2fHfkyRlBh5Sf/0H6lefVX/jx0rC+3ev
      65/a+7oH4DiO8sMl6Z3vUZwoN5BX+eCQhh8YV/36mnKVonIDeZUmKipNDsrLeuputVUYTkeg
      mZyv0kRlLxbdevqcX8xq8OioirtTQAMHh/bd/sDIhxTHgXKlA2rvzMvL5HT55f+o00/9O1XG
      Htr7oOMo0PXzf60TZ/6NnNsOupuvf01hv6n62gXVVs5JcaSh3RNQr72hXmtdg+MP33MfuK6r
      8kBFGd9Xu9FQkiRaX15Uv99XbaOqxs62BgaHlMSJLl14TccffFhDI6P7HoDV1RWN33bQl8oD
      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
      AKMIAAAYRQAAwCgCAABGEQAAMIoAAIBRBAAAjCIAAGAUAQAAowgAABhFAADAKAIAAEYRAAAw
      igAAgFEEAACMIgAAYBQBAACjCAAAGEUAAMAoAgAARhEAADCKAACAUQQAAIwiAABgFAEAAKMI
      AAAYRQAAwCgCAABGEQAAMIoAAIBRBAAAjCIAAGAUAQAAowgAABhFAADAKAIAAEYRAAAwigAA
      gFEEAACMIgAAYBQBAACjCAAAGEUAAMAoAgAARhEAADCKAACAUQQAAIwiAABgFAEAAKMIAAAY
      RQAAwCgCAABGEQAAMIoAAIBRBAAAjCIAAGAUAQAAowgAABhFAADAKAIAAEYRAAAwigAAgFEE
      AACMIgAAYBQBAACjCAAAGEUAAMAoAgAARhEAADCKAACAUQQAAIwiAABgFAEAAKMIAAAYRQAA
      wCgCAABGEQAAMIoAAIBRBAAAjCIAAGAUAQAAowgAABhFAADAKAIAAEYRAAAwigAAgFEEAACM
      IgAAYBQBAACjCAAAGEUAAMAoAgAARhEAADCKAACAUQQAAIwiAABgFAEAAKMIAAAYRQAAwCgC
      AABGEQAAMIoAAIBRBAAAjCIAAGAUAQAAowgAABhFAADAKAIAAEYRAAAwigAAgFEEAACMIgAA
      YBQBAACjCAAAGEUAAMAoAgAARhEAADCKAACAUQQAAIwiAABgFAEAAKMIAAAYRQAAwCgCAABG
      EQAAMIoAAIBRBAAAjCIAAGAUAQAAowgAABhFAADAKAIAAEYRAAAwigAAgFEEAACMIgAAYBQB
      AACjCAAAGEUAAMAoAgAARhEAADCKAACAUQQAAIwiAABgFAEAAKMIAAAYRQAAwCgCAABGEQAA
      MIoAAIBRBAAAjCIAAGAUAQAAowgAABhFAADAKAIAAEYRAAAwigAAgFEEAACMIgAAYBQBAACj
      CAAAGEUAAMAoAgAARhEAADCKAACAUQQAAIwiAABgFAEAAKMIAAAYRQAAwCgCAABGEQAAMIoA
      AIBRBAAAjCIAAGAUAQAAowgAABhFAADAKAIAAEYRAAAwigAAgFEEAACMIgAAYBQBAACjCAAA
      GEUAAMAoAgAARhEAADCKAACAUQQAAIwiAABgFAEAAKMIAAAYRQAAwCgCAABGEQAAMIoAAIBR
      BAAAjCIAAGAUAQAAowgAABhFAADAKAIAAEYRAAAwigAAgFEEAACMIgAAYBQBAACjCAAAGEUA
      AMAoAgAARhEAADCKAACAUQQAAIwiAABgFAEAAKMIAAAYRQAAwCgCAABGEQAAMIoAAIBRBAAA
      jCIAAGAUAQAAowgAABhFAADAKAIAAEYRAAAwigAAgFEEAACMIgAAYBQBAACjCAAAGEUAAMAo
      AgAARhEAADCKAACAUQQAAIwiAABgFAEAAKMIAAAYRQAAwCgCAABGEQAAMIoAAIBRBAAAjCIA
      AGAUAQAAowgAABhFAADAKAIAAEYRAAAwigAAgFEEAACMIgAAYBQBAACjCAAAGEUAAMAoAgAA
      RhEAADCKAACAUQQAAIwiAABgFAEAAKMIAAAYRQAAwCgCAABGEQAAMIoAAIBRBAAAjCIAAGAU
      AQAAowgAABhFAADAKAIAAEYRAAAwigAAgFEEAACMIgAAYBQBAACjCAAAGEUAAMAoAgAARv0/
      FO84kRaUBAIAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='48' name='Average Wage by Province' width='128'>
      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
    </thumbnail>
    <thumbnail height='384' name='Machine Learning - MLP' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='Machine Learning - Time Series' width='384'>
      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
      DcRaHAUAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='Top 5 NOCs by vacancies' width='384'>
      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
      97Nx40YyMjJobW2NtnWeOXOGkZERiouLozt/AKfTyYIFC1i9ejXp6ek0Njby6KOPkpaWRmZm
      Jk6nk+bmZsbHx9m4cSOpqalMTEwwODjI/PnzmT17NpFIhE2bNmG326mvr2fevHnU1NRw/Phx
      ent7SUhIYPny5RQWFvLwww+TnJwMQFZWFgkJCZw8eRK/38/8+fN57LHHOHPmDEeOHGHt2rW3
      tPFO1aVLl9i+fTtHjx7lyJEjrF+/PrqRTi5fgOPHj5OXl8f69eujNzF0dHSQlZXFpk2buHjx
      IvPnz2fz5s3RAI5EIoyMjOD3+7HZbGzatIlIJEJubi5FRUWsXLmSI0eOkJubS1xcHG1tbTQ1
      NVFdXT0tO3+4fDT+3nvvcfbs2ej6CpfX9YmJCfx+P2VlZTidTnp7ewmFQuTm5rJp0yYuXLjA
      4cOHmT9/PkNDQ/T19TEyMsKiRYtITk6mv7+fefPmMXv27Kves6SkhPLycnJzc+nt7cXv9zNv
      3rzo55yamorX66Wvr4+BgQHi4uKorq5mYmKCuro6li1bxsaNGzl8+DB5eXl4vd7omUR2djYe
      j4fm5mZCoRAZGRls3ryZ7u5uamtrefTRR1m2bNktLauLFy/y61//momJCRISEmhtbWXevHk0
      NTVRVFREaWkpixcvJjMzk4SEBNrb2wkGg9FlOml8fJxgMMjixYuj4RQfH09TU1N0nMn9S39/
      P4ODg4yOjlJSUkJ8fDxut5vq6mr6+/tpbW3F5XKRl5fHsWPHOHXqFBUVFaSmpkZfYxgGgUCA
      TZs23R8BEAgEyM7O5vd+7/c4c+YMH330ERkZGSxevDjaFm6z2TBNE4/HQ2VlJVVVVSxYsICt
      W7dimiZ9fX1cvHiRZcuW4XQ6gcvtyJPXISZPLa/sm7Bhwwa8Xm/0yM/pdFJZWYnT6aSwsBCH
      w8GSJUs4cuQIcXFx0TZFp9OJ3+8nHA5HdxbZ2dkUFBTEdLksWLAAm83GBx98QHFxMQsWLCAc
      Dl81L3a7HYfDwcKFC8nOzuaJJ57g7NmznDp1Cr/fHz2VvPLINj8/H4/Hw+nTpwGorKzENM3o
      sppsf3/yySfx+XwcOnQougx9Ph9xcXEEAgHC4XD0zq+ioqJPvA/Ahx9+yLJly0hLS7vmZwLc
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='Vacacnies by NOC by Quarter' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='Vacancies Trend' width='384'>
      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
      +7MXUDZcAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='Vacancies by Job Type' width='384'>
      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
      /wFuj7ZrwfLFzgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='Vacancies by NOC bar' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOzdV3Bbd3o//O8paARBgGAnTVGsIkUVSpQsiaqULHtdJK8d/yeT7F7Fm504
      7yTzZpKb3Zl3kuxdcpOrZC/SJpPyT3Ymu9au+8qW1SmJqqRIiWIvIsGCQvRT3wsuzhIEKJMi
      DkD5PJ8ZzwgwiN+D057f+bXDqKqqghBCiKEwDMOwuQ6CEEJIblACIIQQg6IEQAghBsWvfCMY
      DCIYDOYilmey2+25DgGyLENVVfB8ymbLOkEQYDabcx3GpolDFEXwPA+GYXIah6qqkCQJJpMp
      p3EAm2ffSJIElmXBsrmtb8qyDADgOC6ncQCbZ9+kXMnsdjtsNlsuYlnV4uIinE5nrsNAMBiE
      JEmbIpbx8XGUlJTkOoxNE8fMzAwKCgpyflIJgoCFhQUUFxfnNA5g8+yb+fl5WCwW5OXl5TQO
      v98PlmVRUFCQ0ziAzbNvUhLAZsjUK22GjE0IId82m+tKTwghJGsoARBCiEFRAiCEEIOiBEAI
      IQZFCYAQQgyKEgAhhBgUJQBCCDEoSgCEEGJQlAAIIcSgKAEQQohBUQIghBCDogRACCEGlft1
      jQkh2fPLDwFJ0rcMngPOvqNvGSQjKAEQYiR+XxYSAF1WXhTUBEQIIQZFCYAQQgyKEgAhhBgU
      JQBCCDEoSgCEEGJQlAAIIcSgdB2vdeXKFbAsi0OHDuHGjRvweDwoKSnBoUOHcP/+fYyNjaGg
      oAAnTpxAV1cXDh06hIcPH6KgoADV1dV6hkYIIYan2x3A9PQ0IpEIwuEw4vE45ufncfbsWczP
      zyMajWJ0dBRvv/02FEWB3+/H/Pw8fD4fnjx5gqqqKr3CIoQQ8hu63AHIsowbN27glVdewfXr
      1xGNRuF0OsEwDEpLSzEzMwOn0wkAKC8vh9frxezsLH72s5/h+9//PliWhaqqEEURACBJEmKx
      mB6hrosgCJBleVPEQnEkkyQJ8XgciqLkPI7Ncrym2zcWAIzO5aqqiviyckVRhCAIYNnctjiL
      ogiWZTftvskFXRLA48ePEQwGcfnyZQwPD6OhoQGCIAAAwuEwHA6H9joSicDlcqGkpARbtmzB
      gwcPcOjQITAMA7PZvBQkz8NqteoR6rqIoghJkjZFLBzHURzL8DwPi8WiHTO5IgjCpjlec7Vv
      GIZJKtdkMsFsNud8m8RiMbAsm/M4gM1z3uiSkltaWvC9730PJ06cQGNjI2pqauD3+3H37l14
      vV4UFxcjHo/j7t27GBoaQkVFBRiGwe7duxEMBjE6OqpHWIQQQpbRJQEwDAOWZWGxWHDkyBGw
      LIu33noLhYWFOHPmDBiGweuvv47CwkKcPXsWLMvi5MmTYBgGp06dQnFxsR5hEUIIWUbXUUAs
      yyIvLw8AYLFYsHXrVu3/mUympNd2ux3A0q1Rfn6+nmERQggBzQMghBDDogRACCEGRQmAEEIM
      ihIAIYQYFCUAQggxKEoAhBBiUJQACCHEoCgBEEKIQVECIIQQg6IEQAghBkUJgBBCDIoSACGE
      GBQlAEIIMShKAIQQYlCUAAghxKAoARBCiEFRAiCEEIOiBEAIIQZFCYAQQgyKEgAhhBgUJQBC
      CDEoSgCEEGJQlAAIIcSgKAEQQohBUQIghBCDogRACCEGRQmAEEIMihIAIYQYlC4JQFVVTE1N
      oaenB4FAAAAwOzuL4eFhjIyMQFVVxGIx9Pb2av/f5/MBAGKxGILBoB5hEUIIWUaXBCCKIiYm
      JuBwOPDJJ59AFEVcvnwZgiBAEAQAwCeffAKbzYZPPvkEkiThypUrUFUVn376KURR1CMsQggh
      y/B6fKnZbMbu3bsxOzsLm80GVVUhCAJsNhtKS0sRjUaRn5+P+vp6BAIBTE9PQ5IkXL9+HU1N
      TXC73VBVFaqqAoD297kmiiJkWd4UsSiKQnEsI8vypqg4bPZjxASA0blcVQXEZeVKkgRRFHO+
      TSRJAsuyOY8D2DznjS4JAFhq8rl37x6sVitYlsXLL7+MQCCAS5cu4a233oLJZAKwlCxEUUQg
      EIDX68Xv/M7vaN8hyzKApY3F87qFumaJGDZDLAzDUBzLsCwLjuNyHouqqmBZNudxADncN0zy
      OZLYL7neJpvlGAE2z3mjSwSCIKCiogJbtmzBZ599hlAohJKSEtTV1WFqagoMw8Dn80FVVUxO
      TuLQoUMoKirCyZMn8dFHH+Hdd9+FyWTSkgTHcWDZ3PdXMwwDhmE2TSwUR2ocuY6FjpGlOwxm
      WbmbZZuwLLsp4gA2z3mjSwKIRqO4dOkSWJaFw+FAXl4eLly4AEEQUFhYCKfTie3bt+PcuXMo
      KyuD0+lEZWUl7HY7Ojo6MDw8jG3btukRGiGEkN/QJQE4nU6cOXMm6b3XXnst6XVzczOam5u1
      1+3t7QCA6upqPUIihBCyQu7vQQghhOQEJQBCCDEoSgCEEGJQlAAIIcSgKAEQQohBUQIghBCD
      ogRACCEGRQmAEEIMihIAIYQYFCUAQggxKEoAhBBiUJQACCHEoCgBEEKIQVECIIQQg6IEQAgh
      BkUJgBBCDIoSACGEGBQlAEIIMShKAIQQYlCUAAghxKAoARBCiEFRAiCEEIOiBEAIIQZFCYAQ
      QgyKEgAhhBgUJQBCCDEoSgCEEGJQlAAIIcSgeD2+VJIkXLp0CfF4HJWVldi1axcGBwfx5MkT
      1NfXo6mpCRMTE+jt7UV1dTV27tyJ/v5+tLS0YGpqCgzDoLKyUo/QCCGE/IYudwAMw2DPnj04
      ffo0hoaGEIlE0NPTg9OnT+PBgwcQRRE3btzA6dOnMTIyglAohMHBQcRiMVy9ehUlJSV6hEUI
      IWQZXe4AOI7D4uIirly5ApfLBUEQUFxcDJPJhKqqKkxPT2uva2trMTc3B5/Ph5///Od49dVX
      YTKZoKoqJEkCsHRHEYvF9Ah1XQRBgCzLmyIWiiOZJEmIx+NQFCXncWyW4zXdvrEAYHQuV1VV
      xJeVK4oiBEEAy+a2xVkURbAsu2n3TS7okgAAoLS0FDt37sStW7cgy7J2YkqSBJPJBFmWASxt
      CI7jYLfbUVBQgIWFBRQXFy8Fxy+Fx3EcrFarXqGumSiKkCRpU8SyWbbJZomD53lYLBaYzeac
      xiEIAnie3xTbJFf7hmGYpHJNJhPMZnPOt0ksFgPLsjmPA9g8540uKdnr9WJychJOpxMAYLFY
      MDs7i9nZWTx9+hRlZWXw+XyYnZ3F48ePUV5eDrPZjFOnTqG3txderxcMwyT9RwghJLN0SQAF
      BQWIxWLo7+9HR0cH8vPz8corr+DJkyd45ZVXwLIsXnvtNTx58gTHjx+H2WxGe3s7WJbFG2+8
      sSlujQgh5NtOlyYgnuexc+fOpPfcbjcOHz6svS4oKEh6nRj1Y7PZYLPZ9AiLEELIMjQPgBBC
      DIoSACGEGBQlAEIIMShKAIQQYlCUAAghxKAoARBCiEFRAiCEEIOiBEAIIQZFCYAQQgyKEgAh
      hBgUJQBCCDEoSgCEEGJQlAAIIcSgKAEQQohBUQIghBCDogRACCEGRQmAEEIMihIAIYQYFCUA
      QggxKEoAhBBiUJQACCHEoCgBEEKIQVECIIQQg6IEQAghBkUJgBBCDIoSACGEGBQlAEIIMShK
      AIQQYlC6JQBZluHz+SCKIgAgHo8jHA4jEolAVVUoigKv1wtJkgBA+5yiKNq/CSGE6GfdCeD6
      9euIxWL4h3/4B3z++edQVTXlM6Io4uc//zl6enrwv//7v5AkCR9//DFu3bqF7u5uAMAXX3yB
      hw8f4he/+AUURcH58+ehqiouXLiAubm5jf8yQgghz8Sv9w+uXbsGm82GsrIy9PX14dSpU+D5
      5K/heR7vvvsuGIbBhx9+CEmSwHEcOjo6YDabEY/HoSgKjh49iq6uLng8HkiShMHBQZjNZlRW
      VqaUm7hTyCVZlqEoyqaIRVVVimMZRVEgy3LOY1EUZdNsk3RxcAAYvcsFIC8rV1GUTXHeyLIM
      YHNcSzbLMbLuBOBwOPAf//Ef+PM//3NMTk6CZVNvIhiGQTQaxeeff45du3bBZDKhqKgIFy5c
      gN/vx3e+8x3k5eVp3xeJRODxeDA2Nob3338fwNIGSjQFSZKU9k4jF1RV3RSxUBypNkMsiRhy
      HcfyWLJfMJLKpW2yeeNYdwJ4//33MTAwALPZjLfffjttAlAUBb/85S/xne98B263G6qqoqOj
      AyzL4vz58xBFEcFgEACwsLCA7du3o6ysDPv378cXX3yBs2fPgmEYmM3mpSB5HiaTaYM/deM4
      joOqqpsiFpZlKY4VcWyG40RV1U21TXIRB8MgqVyO48BxXM63Ccdxht83K607AfzTP/0TQqEQ
      2tra0Nvbiz/5kz9JSQKBQAChUAhdXV1gGAZHjhzBr3/9a9hsNgiCgKKiIrjdbnz88cdQVRVF
      RUWw2+0oLy9HXV0d+vr60NramrEfSQghJNW6E4Df78d7772H0dFRBINBKIqSkgAKCwvxwx/+
      MOm9d955B5Ikged5MAyDjo4OiKIIk8kEhmFw8uRJAMDOnTs38HMIIYSs1boTwOnTp/HP//zP
      CIVC+O53v5vSAbwahmGSbnmWN/EQQgjJvjUnAFEUMTc3h8rKSvzhH/4hAMBsNkNVVTCM3uMK
      CCGEZNqaE0A8Hsfjx48RjUYxNTUFACgqKsI777yjW3CEEEL0s+aJYPn5+ejs7ITVasX777+P
      999/H4WFhXrGRgghREfrngl87do1MAwDhmFw8+ZNbXIFIYSQF8u6O4H379+Pv/7rvwbHcWht
      bQXHcXrERQghRGfrTgAnT57Etm3boCgK3G63HjERQgjJgnUngJ/85CdwOp1gWRalpaX43ve+
      p0dchBBCdLbuBOByufBnf/ZnaZeAIIQQ8uJYdwLgeR4//vGPwfM8Kioq8MEHH1AyIISQF9C6
      E8Cf/umfIhgMJi3rQAgh5MWz7gTw93//9+jr60NZWRkkScJPfvITPeIihBCis3UngFgsht/9
      3d/FSy+9hI8++giyLK95PSBCCCGbx7ob73ft2oXW1lb813/9FxiGofZ/Qgh5Qa376u1wOOB2
      u/GjH/0I+/btoz4AQgh5Qa07AXz11VdgGAYcx+HKlSu0FAQhhLyg1t1439rair/5m78Bz/Oo
      rKykpSAIIeQFte4E8Pbbb2P//v0QRRGVlZV6xEQIISQL1p0A/uVf/gU3btxAUVEROI7DT37y
      E+oHIISQF9C6E4DP58Pv/d7voa6uDr/61a/SPhOYEELI5rfuK3dDQwNaWlrwr//6rwiFQnTx
      J4SQF9Sa7wAURcHVq1fx6quvwmaz4cc//jE4jqMEQAghL6g1JwCGYeD3+/G3f/u3MJlM2LVr
      Fw4cOICSkhLqAyCEkBfQmqvvDMPgzJkz+Mu//Et88MEHmJ2dxY9+9COaB0AIIS+oNd8BqKqK
      L7/8Erdu3UIkEkFLSwv+6q/+iuYBEELIC2pdCUAQBPzgBz9AUVERtf0TQsgLbs0JgGVZvPHG
      G3rGQgghJIvWnABisRjm5uaS3jOZTCgrK6NOYEIIeQGtOQF4vV589NFHSe8VFxfjvffey3hQ
      hBBC9LfmBFBZWYkPPvgAgUAAvb29kGUZ+fn5aT+rqip6e3sxNTWFiooK7Nq1C2NjY+jv78e2
      bdtQW1uL6elpPHjwAFu3bkVzczMGBgbQ1NSEmZkZqKqKioqKjP1IQgghqda9FMRPf/pTqKqK
      2tpajI+PY8+ePSmfkSQJAHDixAl89tlnqKurQ3d3N86cOYNz586huroaV65cwdtvv41PP/0U
      W7ZswePHj7F161ZcvHgR77zzzsZ/GSFk0xJ93ZDDg7qXY6n6P2AYGqm4mnUnAI7jcPToUXAc
      h7GxMUiSBJPJlPQZk8mEnTt3Ynx8HIqiQBRFlJaWwmKxoKqqCtPT0yguLobFYkF9fT08Hg8C
      gQA+/PBDdHZ2wmw2Q1VVLZHIsoxYLJaZX7wBgiBsmlgojmSSJCEej0NRlJzHIUnSptgm6faN
      BYDePXaqqiK+rFxRFCEIQtLIQcnfC8V/RedIABS9CTAmLQ6WZTftvsmFdSeA119/HbW1tfj3
      f/93bNu2Le3zgFVVRXd3N7xeL86cOYNIJAJVVQFAWzxu5WuLxQK73Y5QKITS0lIA0OYYsCwL
      q9X63D8yU0RRhCRJmyIWjuMojmV4nofFYoHZbM5pHIIggOf5TbFNcrVvGIZJKtdkMsFsNie9
      F+U4ZCNVWywWMOzSMRGLxTbNtWSznDfrHsw/ODgIu92OP/qjPwLDMGlrXNFoFP39/Whvb8fi
      4iLy8vLg8Xjg9Xq1foGFhQV4vV4MDAygvLwcVqsV3/nOd3D79m34/X7tecMsy9IoI0II0cG6
      JoJduHABn3zyCSKRCBRFwaNHj3DmzJm0n29sbMTQ0BAAoL29HSdOnEBPTw9OnDgBlmVx+vRp
      PHjwAAcPHoTFYsHu3bvBsixef/11+P1+uFyuzPxCQgghaa2rCaiurg4tLS3axfq73/1u2hnB
      eXl5OHToUNJ7paWlWtMOABQWFuL48ePa6y1btgAA8vPzVx1dRAghJHPWtRjc1q1b8c477+Cj
      jz7CL37xC0xNTekZGyGEEB2tuw/g3/7t3/AHf/AH+OCDD/Df//3f2kgdQgghL5bnGgY6Pz8P
      k8kEhmGog5YQQl5Q604Af/zHf4xf/OIXEEURP/zhD2k5aEIIeUGtOQHIsoy/+7u/w1/8xV/g
      /fff1zMmQgghWbCuYaD379/HT3/6U+29xGJw1AxECCEvnnU1AVVUVOD06dPaa4vFkvGACCGE
      ZMe6HgjT2dmJhoYGPeMhhBCSJWseBpqYpUsIIeTbgR7sSwghBkUJgBBCDIoSACGEGBQlAEII
      MShKAIQQYlCUAAghxKAoARBCiEFRAiCEEIOiBEAIIQZFCYAQQgyKEgAhhBgUJQBCCDEoSgCE
      EGJQlAAIIcSgKAEQQohBUQIghBCDogRACCEGRQmAEEIMihIAIYQYlK4JQBAE7d+iKCIajSIW
      i0FVVaiqisXFRciyDACQJAkAoCiK9m9CCCH60SUBqKqKr7/+Gv/4j/+ovffxxx/j+vXr6Orq
      AgB8+eWXuH37Nj788EOoqoovv/wSqqri8uXL8Hg8eoRFCCFkGV6vL961axdCoRCApVo9wzA4
      evQoTCYT4vE44vE43nzzTVy/fh0ejweCIGB0dBSKoqCqqirl+xJ3CrmkKAoURdkUsaiqSnGs
      iGMz7BtFUTbVNlkZBwuA0btcAMqyctOdN6qq6hzFb8qWFUCVtTiAzXEt2SzHiC4JgGEYuN1u
      7bWqqnA6nfjyyy8RCoVw+vRp2O12AEBBQQHC4TA8Hg/Gxsbwgx/8QPsbURQBLDUPJXZeLiVO
      7s0QC8WRLHGB4Tgu53Fslm2SLo6sdPqpSCo3EcfK97JBVhQwWCo3URHdrPsmF3S7A1iOZVkc
      O3YMLMvi/PnzEARBuzvw+XxoampCWVkZ9u7di/Pnz+PNN98EwzAwm81LQfI8TCZTNkJ9Jp5f
      2lybIRaWZSmOZTiOg8lkynksqqpumm2SqzgYJvkc4Tgu5RyWWBbZqP+aTDwYdqlcnucNv29W
      0iUBxONxXLx4ERMTE/jiiy+wd+9eXLx4Efn5+QiFQigqKoLD4cCnn34KQRBQUlICi8WCqqoq
      eDwe9PX1obW1VY/QCCGE/IYuCcBiseDVV19Neu/dd9+FKIowmUxgGAbHjh2DIAgwm81gGEb7
      /N69e/UIiRBCyApZaQICkNSkk3htsViyVTwhhJAVaCIYIYQYFCUAQggxKEoAhBBiUJQACCHE
      oCgBEEKIQVECIIQQg6IEQAghBkUJgBBCDIoSACGEGBQlAEIIMShKAIQQYlCUAAghxKAoARBC
      iEFRAiCEEIOiBEAIIQZFCYAQQgyKEgAhhBgUJQBCCDGorD0S8ttKjAgQw3HdyzHZLTDlmb/5
      g4QQskaUADYoMDYPz70J3cspa9uC4pYK3cshhBgHNQERQohBUQIghBCDogRACCEGRQmAEEIM
      ihIAIYQYFCUAQggxKEoAhBBiUJQACCHEoHRJAKqqYmhoCP/5n/+pvb5x4wbOnTuH69evQ1VV
      3L9/H+fOncPXX38NVVXR1dUFAOjr68PEhP4TqwghxOh0SwChUAj5+fkAgHg8jrm5OZw9exaz
      s7OIRqMYHh7G22+/DUmS4Pf7MTc3B7/fj8ePH6OqqkqPsAghhCyjy1IQLMti9+7dWk0+Go3C
      6XSCYRiUlpZiZmYGLpcLAFBRUQGfz4fZ2Vn8z//8D77//e+DZVmoqgpRFAEAkiQhFovpEeq6
      CIIAWZaTYpEkKStlr9wGK+PIlc0ShyRJiMfjUBQl53FsluM13b6xAGB0LldVVcSXlSuKIgRB
      AMv+tr4py7LOUSyJx+MAo2hxsCy7afdNLmRlLSCe5yEIAgAgEonA4XAkvXY6nSgpKUF1dTV6
      enpw8OBBMAwDs9ms/b3Vas1GqM8kiiIkSUqKheezs5zSym3Acdym2CabJQ6e52GxWLRjJlcE
      Qdg0x2uu9g3DMEnlmkwmmM3mpPeiHIdspGqLxQKGXTomYrEYWJY19L5ZSZcmIFEU8eDBA3g8
      Hjx48AAcx8Hv9+P+/fvwer0oLi5GLBbD/fv3MTQ0hIqKCjAMg7a2NgQCAYyNjekRFiGEkGV0
      awIqLS3Fm2++CWCpBvDWW29hamoKZ86cAcMweOONNzA5OYmzZ8+C4zh0dnaCYRicOnVqU9wa
      EULIt50uCYDjOJSXl6e8X1dXp/3bZDKhtrZWe53oMOZ5Xvs3IYQQ/dA8AEIIMShKAIQQYlCU
      AAghxKAoARBCiEFRAiCEEIOiBEAIIQZFCYAQQgyKEgAhhBgUJQBCCDGo7KxkRgxDVWT0X/9b
      3csxWQrQuO//0b0cQr7NKAGQjFJVBWMP/6/u5Vjt5ZQACNkgagIihBCDojuAbwk16kf0V/+v
      7uXwLW/CvPP/6F4OIUR/lAC+JVRZgDzVrXs5XGWb7mUQQrKDmoAIIcSgKAEQQohBUQIghBCD
      oj4A8q0lB4NQ44Lu5XDOAjAmk+7lEJJplADIt5bvn/8Fka4bupdT+pf/H6wtLbqXQ0imURMQ
      IYQYFCUAQggxKEoAhBBiUJQACCHEoKgTmBBCckyIxzE1NqJ7OVZbHiqqt2ivX9gE0H31EsLB
      Rd3LOdT5CswWq+7lEEKMSxDiGOx/qHs5hUXF344EIAoChHhc93JUVfciCCEkJ6gPgBBCDIoS
      ACGEGFTWEsDc3BxGR0cxNjYGVVURi8XQ19eHxcWldny/3w8AiMViCAaD2QqLEEIMK2sJ4NKl
      S4hEIohEIgCATz75BCaTCR9//DEkScLly5ehqio+++wziKKYrbAIIcSwstIJLMsyBEGAw+FA
      SUkJotEo8vPz0djYiMXFRUxPT0OSJHR1daGhoQFutxuqqkL9TQ+sqqoQhORFvdQs9c6KogiG
      XcqTkiRBkqSkWGRZzkociW2YoChK0ms1S0nzm+JQlOzEoUJN2Q8rKw6KomQlluXHhCiKKdso
      V1buGwAwAWB0LldVlwZpJKQ7b7K1b0RR1H6wJElgWXZT7htJlLJT7opraVYSAMMw2L9/PxYW
      FvD111/jrbfeguk3qydaLBaIoohAIACv14v33ntP+7vExVVRFPA8n/Kd2cBxnFY2y7JJrxPv
      ZQPLsknlMgyT9FrleWTjsP6mOBQ5O4mZAVL2w8p9k7VjhP1tuaqqpmyjXFm5b7JXcPK+4Tgu
      Zd9IbLbOXx4Mu/r5mysr9w3HcTkpNytbQlEUlJWVob6+HjMzMwAAn88HVVUxNTWFgwcPoqio
      CCdPnsRHH32Ed999FyaTSUsSHMdl7UK7EsuyWtksy0JRlKRYsnWRYRgmpdzlr5VNEgfUbO2n
      9HHkZN+wv42FYZjUbZIjuYqDAbS75kQcKceN7vchS1iW0WJhWXbT7hsmSwmRQXKlNSsJQFVV
      XLt2DYIgwOVyweVyobm5GefOnUNpaSmcTicqKipgt9tx6NAhDA8PY9u2bdkIjRBCDCsrCcBk
      MuG1115Lem/79u3Yvn279nrfvn0AgC1btoAQQoj+cn8vRAghJCcoARBCiEFRAiCEEIOiBEAI
      IQZFCYAQQgyKEgAhhBgUJQBCCDEoSgCEEGJQlAAIIcSgcr8qEiGE5MpcH7AwoH855W2Aa6v+
      5awTJQBCiHEFnwLTd/Qvp6B6UyYAagIihBCDogRACCEGRQmAEEIMihIAIYQYFHUCE6IzfzSC
      4YV53csptudjS6Fb93LItwclAEJ0NhsK4vPHD3Uvp62ymhIAWRdqAiKEEIOiBEAIIQZFCYAQ
      QgyKEgAhhBgUJQBCCDEoSgCEEGJQlAAIIcSgcpYA7ty5g3PnzuHLL7+Eqqq4du0aAKCnpwcT
      ExO5CosQQgwjJwlAFEWMj4/j7bffBgD4fD4sLCzA6/VieHgYVVVVuQiLEEIMJScJIBaLweVy
      AQDKy8vh8/kwOzuLn/3sZzh9+jRYllqmCCFEbzm50ppMJsRiMQBAJBKB1WpFSUkJOjo6cO/e
      PaiqmouwCCHEUHKSAKxWK0RRRHd3N4aGhlBRUQGGYbBr1y5EIhGMjIzkIixCCDGUnC0G9/rr
      r2N6ehqtra1gWRanTp0CAHR2diIej+cqLEIIMYycJQCe51FdXa29zsvLAwBwHKf9mxBCiH4Y
      dUWDeyAQQCAQyFU8aSmKAoZhwDCM9p4oCFBVRfeyzWYL8JtyVVWFoijgOO63sUkKFEnWPQ6W
      58Dyv22xkyQJPL8sf6sK1IhX9zgYkw0w21ePA0A8ov/a9wzDwmz77dLHsiyDYZikAQRKOAJV
      FHSPhc3PB7NsG6zcJrKiICaJusfBsxwsz4gDABCNAtC7j40BbDbtlaIsnafL940qRwFF/33D
      mJy/LTPN+QtZWPpPb7wFYE3ay5X7RlVViIL+LR8Mw8JkNgMAampqmJQEsBn5fDJxgZcAACAA
      SURBVD7wPA+Hw5HrUDA+Po4tW7bkOoxNE8fk5CQqKytzPnIrGo0iFAqhpKQkp3EAm2ffzMzM
      wO12w/ybEz5XBEHAwsICKioqchqHoiiYmppKannIlc1wjDAMw9B4S0IIMShDJQBVVSGK4qYc
      ZpqILRtlPOv352ob6fn74/G41gyRKdneRolh06qqav/Olmwcm5mykeNXVVXE43HIspyRfSvL
      csaPu7VYz+83xCMhZVnGvXv3UFRUhMHBQZSXl2PHjh26lSeKIm7evAmPxwOXywWO4zA/P4+z
      Z8/CZDIlfXZxcRFPnz6FLMvweDyoqalBfX19RuOJRqMYHByE2WzG5OQkXnrpJWzbti3pM4Ig
      oL+/H3a7HWNjY6isrERLS0tG40jH4/EgFothfn4efr8fLS0tqKyszGgZi4uL6O/vB8uyKCkp
      QWNjY1KTVW9vL6anpxGJROByuRAKhdDS0oK6urqk71FVFd3d3di2bRuuXbsGp9OJQ4cOZSzO
      wcFBBAIB7NmzJ6VJ7e7du1pZt2/fxuHDhzNW7moCgQA8Hg8EQcDs7Cxqa2tRW1ubke9WFAVd
      XV2YnZ1Ffn4+TCYT5ubm8MYbbyQNAnn06BGePn0Kn8+H4uJizM/P47XXXkN+fn7S90mShJ6e
      HrhcLm1oeWtr65rj8Xq9uHPnDlRVRXV1NYqLi1FcXJz0GVmW8fnnn2tN0Vu2bEFNTU3Kd3V3
      d6OtrQ2fffYZ7HY7Ojs717NpUgQCAVy+fBkOhwPz8/Nwu93YunVr0r5QVRW3b99GQ0MDurq6
      4HK5cPDgwW/8bkPcASQy4ujoKE6dOoXFxUVdyzOZTDh8+DCqqqpw7NgxHD9+HC0tLWnLjUQi
      4Hkec3NzOHbsGObnM9+BGovFwLIspqencfLkSSwsLKR8JjH0dnJyEidPnoTP58t4HOkEAgFY
      LBaEQiHs379fl99fVFSE+vp68DyP4eFhSJKU9P937Nih/Xf8+HG8+uqr8Hg8Kd+TqF0ODQ3h
      4MGDGavdqaoKWZZRX1+Purq6pPgkScK1a9fw6NEjXLx4ERcvXsxa23EoFILJZML8/DyOHj2K
      2dnZjH03y7Lo6OhIOkf27NmTctw1Nzdj3759aGxsxPHjx7Fv3760x68oilAUBWNjYzh16tS6
      B7IMDg7i6NGjcLlccDgc8Pv9acsoLS3F0aNHcfTo0bQXf2DpXBofH8fOnTsz0v8SCoW0Y/Pl
      l19GfX09pqenkz6jKApEUcTw8DA6Ojogy2sbmGKIOwCLxQKGYVBVVYVwOIytW7dmpdzq6mpc
      vXoVpaWlGB0dRUNDQ8pnSkpKMDo6irq6OgQCgbSf2Sin04knT56gpqYGgUAAjY2NKZ/Jz8+H
      KIqorq5GMBjM+F3Iampra3Hjxg1s27YN4XA4YzXM5fr6+vDkyRMcOHAA+/fvTx4F8hvFxcW4
      cOEC4vE45ufn015kWZZFcXExQqEQnE4nysrKNhybz+fD7du3IcsyqqurUV5ennTR4HkeBw8e
      RGFhYVbuyJYrLy/HzZs3UV9fj0AggKampoyXUVdXh8uXL6OyshKjo6M4fvx4ymfy8/Ph8Xjw
      8OFDzMzM4OWXX075jNVqBQDtHF/vcbRz505cuXIFCwsL8Pv9OHbsWMpnLBYLRkZGtOawl156
      KW2H8pYtWzA+Po6Ojg4IwsZHGJWUlODChQsIBoOYnJzEsWPHUhIAy7Jwu92IRqPIz89f87Fp
      iAQAAGazGR6PR2tmyYaKigqtSaG+vj6l+Wd5bOPj4wCgy0nGMAzy8/MxOjoKp9OZ9gIILN25
      TE9PY3p6OqX5Q09msxmDg4MAoEvT3I4dO9DU1IQnT57g888/x+///u/DYrEkfcZkMuHkyZPw
      er3YsmUL7HZ72u9yOBwYHx/H4uJi0rDk5/XkyRMcO3YM9+/fh8vlgtfrhdvtTvoMwzAYHx9H
      U1PTqvtOL2azGWNjYwCWauOZ5na70dHRgWAwiLq6urQ1ZpZltTvX2tpa2JYNMV3OZDJp5/h6
      K3l+vx8HDx6ExWIBx3Fp9y3DMHjnnXcQj8fB8/yq5zPP81BVFVevXl31OFoPs9mMkydPwu/3
      o6mpCWazGe3t7SmfczgcmJiYQDAYXPOoPEMkgFAohEgkgo6ODgDIyIm7FgMDA3j69Cl4ngfL
      snj55ZdTDpqpqSnk5+ejra1Nt9gWFhYgyzLy8/PhcrnQ1dWlbYsEn88HWZZzso2qq6u1Gose
      5U5OTmJgYAAFBQV47733Ui7+ABAMBnHt2jWt/Xnbtm0oLS1N+owsyxgcHERjYyNisRhmZmY2
      fKfU2tqKy5cvw+fzwefzpa0BJ+bAfPzxxygsLFy17TnTJiYm4HQ6sWfPHi2OTBsdHcXIyIh2
      Xuzfv1+rzSfE43F89dVXWrv/vn37UpJAMBhELBZ77uPXbrfj7t276OjoWPVvVVXF5cuXYTab
      EYvFUFdXl/ZOo7+/H8ePH8/Y9goEArh+/bqWTJqbm1OGO8uyjOHhYTQ0NEAQhDVX4gyRAOx2
      OwRB0G7HeJ5PnSCjA5/Ph6NHjz6zLLfbjf7+fi02k8mU8Vqe1WqF1+sFy7LahXAlh8OBWCyW
      9W1UXl6OqakpFBYWAliq7WT6QlNZWQmO4xCPx+H1epGXl5eyjYPBIJqamp7ZdMAwDERRxOLi
      IsLhcEaWLAkGgzh48CBMJhNMJtOqv/3UqVPweDyw2+1p958eioqKMDAwoOuxOTc3hyNHjjyz
      rTwajaK6uvqZd4d5eXkbOsdlWUYoFMKlS5fAcRz27NmT0tEcDofhcDiwb98+qKqKixcvpj1e
      bDYbotEoeJ4HwzBpKxzrEQwG0dzc/My7GpZlIQgCFhcXEYlE1tz0ZIgEwDAMrFYrHjx4AGCp
      7S7TI03Scblc+Oqrr+B0OsEwDPbu3ZtyUCZqPonY6uvrUVRUlNE47HY7du7ciZGREVgslrTN
      TCzLwmQyaXHU1NRkpI37m1itVsRiMa3c5ubmjF/gHj58CFmWMT8/D1EUtYSwXGFhIT7++GOt
      o7O+vj5lFEii4/Lx48dgGAZHjx7dcGw2mw337t3DoUOHVr34K4qC8+fPo6amBuPj43A6nVnp
      DzCZTJBlWds3DQ0NKc1TG1VeXo4vvvhCq9G2tbWlXDDz8/PR39+PcDgMANi9e3fKXQLLsknn
      eHV19bomnuXl5WH37t3a63QXbbvdjsXFRdy6dUtLSumUlpair69P+96NNmu63W58+umnmJmZ
      AQA0NjamXCNYlsXhw4fR398PVVXT9mGkY5gE4Ha7MTY2BrPZnPEL7GoaGxuxdetWbUxuutqT
      2WxGXl4ePB4P8vLytOckZFI4HMbU1BTa29u1i22iySmBZVk4nU5MTk7CYrFk/ERfTV5eHsxm
      M7xeL5xOZ0qtKxOi0Sh2796N+/fvw+l0wu/3p9xCW61WnDlzRhvZk65Gqqoq7t27hwMHDgAA
      bty4saahds+iKAoWFxdx8eJF8DyftuYZiUTgdrvR3NwMVVVx6dKlrCQAi8WCvLw8zM7OIi8v
      D06n85v/aJ2qqqpQWlqqnSPptjvHcTh79uwz9w3DMHC5XBgfH4fZbF738StJkjZKb3R0FPv3
      70/6jkR8J06cQDgchslkWrVmX1xcjImJCaiqmpERWzabDWfOnNFer6xEJu5Inz59qiXJgYGB
      NR0jhkgAkUgE09PT6OzsRCQSQXd3d1bGUc/MzKC/vx+hUAiKouDMmTMpfQAzMzOQZRmdnZ3w
      +Xy4e/cu9u3bl/FYQqEQVFVFKBRKO0RscXERPp8PnZ2dCIVC6O7uzugY99UMDQ2hoKAAbW1t
      mJiYwKNHj7B9+/aMltHY2AhFUWC1WuHxeNKOtBJFEVeuXEEgEIDJZMKePXvw0ksvpXwuEolA
      URQoioJIJLLh2Ox2e1KH3mo1T0EQcPnyZQiCkLXRQImRJp2dnVhYWMC9e/fSdj5uhNfrxb17
      97Rz5M0330yp3SuKgqtXr8Ln84FlWbz22mspC0ZGIhHMzs6is7MT4XB43ee43W7X5sa4XC7M
      zc0lJYDp6Wnk5eWhp6dHS0Q1NTVpm2Vu376NY8eOgWVZfPnllygvL19zHCs9fvwYL730Erq7
      u7X3Wlpakvqn8vPzYbfbn6scQyQAlmUhiiJEUUQ0Gs3aSIrJyUkcPXoUfX19sFgsCIfDKTV8
      nucRj8chSZI2JyDT7HY7SktLceHCBdjt9rQJhuM4CIKQ9W3E8zzC4TBEUUQsFsvo71cUBbOz
      s1AUBdFoFMXFxSgpKUnb1LKwsIC6ujrMz89j165d6O3tTUkADMNg9+7duHjxotapv1GCIGhz
      H0ZHR3Hw4MG0o4D27duHyclJOJ3OrN3BJvpNJElCNBpdddTLRoyOjuLYsWPo7e2Fy+VCIBBI
      SQDhcBglJSVwOBwoKSmBz+dLSQAbPcd9Ph96enoALPUHrNy3iSbjtrY2OBwOqKqq1bZXYhhG
      O5Y3OqO4qakJ8Xgc7e3tq94dJ0b83Lx5Ey+//DJUVcXNmze1O9VnMUQCsFqtaGpqws2bN2Gz
      2XSpYadTVFQEURTh8/kQjUbT1haKi4sRDAbR1dWFgoIC7Nq1K+NxqKqKYDCIvLw8qKqK+fn5
      lPZ9u92OrVu34ubNm8jLy8t4TW81NTU1GBgYQFdXF4qKijJau02cpMsnbDEMk/akLCgoQCgU
      gtlsxvXr11NqU7FYDPF4HNFoVBuBEwqFNtxklZ+fr93xFBUVaTM9l5NlGefPn8f27dsxNDQE
      v9+vy3yRlUpLSxEKhdDV1QWn04mdO3dmvIyysjJEIhGEw2F4PJ6U0WnAUhMIy7Kw2+3o6+tL
      2+xmtVpRX1//3Od44qJvtVoRCoVSJgsm9PT0oKOjA6qq4u7du2n7gQ4cOIAHDx5AlmXs379/
      XXGsxDAMJEnCnTt3cPTo0VX7ie7cuYO+vj5tYMJal9T/1ieA+fl55OXlwe/3ayNNfD5fVlaN
      TJykJ06cgKIoKbXbp0+fapM3Eif94uJixvsB5ufnwbIs9u7dCyC1L2J2dhYOhwOLi4vaNvL7
      /brXNCcmJlBcXAxJkuB2u7ULdqb6ATiOW/MwTbvdjsbGRqiqmnYZ5cRQzOW14EzUiL1eL3p7
      ewEstUOnu6sQRRHl5eWora3F1q1bce3aNd0TwNTUFIqKihCLxZKOzUz3AyTayI8cOZK6VPNv
      mEwmtLa2QlXVtHMh5ubmtA7a5cfvyk781YiiiJGREZSXl6OgoACTk5MpfR6SJOHmzZt4/Pix
      NhFs5bwISZK0O87EchFer1eL6XnxPI/5+Xn8+te/hs1mSzsMtK2tDW63G9XV1SlL5z/zuzcU
      2QvAbreD5/mkGm+2HzjDsmzaiRkFBQUpsa02yWUjnE4nBgcHtVrNyljy8/Nzso1cLldKuble
      unjlRT7BYrHAYrFgYGAAFosFLS0tGWmuUlUVBw4c0JoI0/XPWK1WTE1NIRKJQFVV+Hw+dHd3
      o729Xbf5GumOzZVNM5m02jmyHMMwabe53W6HyWRKahdfzwSsaDSKmZkZCIIAu92OvLy8lHkW
      PM+jo6MDFRUVqK2thSiKKX1ALMuioKAAqqpq2yoTTalWqxXvvvvuqv8/EAggFAphYWFBm1Ba
      Wlq6pol73/oEYLPZoCgKZmZmsGPHDqiqit7eXl1uZ1cKBoO4d+8e7HY7rFYrmpubkw7y/Px8
      BAIBhMNh1NTUQJZlPHr0aF2LWK0Fx3Ewm83o7+8HsFTrWl6DSIyhnp+f10aaZGMbORwOTE9P
      g+d5lJSUIBwOY2JiQtdlKO7duweWZbFjx46kfRGLxXDt2jWUl5ejvr5+1REe7e3t8Pl8uH79
      OhiGwZEjR547FkmSMDw8jIqKCq3mabPZ0g6Dfe2112A2mzE1NYWysjJd2uOXS6yHE4lEsGXL
      FkiShIGBgYx30CcmAtpsNkxNTcFisaRdhG1iYgIOhwN3797FsWPHkioKeXl5kCQJc3NzaGlp
      WffxmxjSuzyZpmsmFAQBc3NzqK2tBc/z6O3tTepoZlkW+fn56Onp0cru6enZ8B1ANBrFzZs3
      ASzdUbS1tSXNPygoKEBBQcFzDW3/1icAURRx584dDAwMIBgMQhTFrE2k6e3txYEDB3D//n2o
      qopAIJB0MMRiMdy6dUtbETQWi6GqqirjcXAcB5vNBo/Hg7a2tpSDWxAE3Lp1C+Pj4/D5fBAE
      ISvDQIPBILq7u8FxHAoLCxEKhXRZbkBVVe0379q1C6FQKOUzVqsVnZ2d8Hg8OHfuHJxOJw4e
      PJjS5OHxePD48WOYTKYNL5cRDocxPT0NQRCQl5cHm82WdoavLMu4e/cuXC6XNstzo23L3yRx
      0UkMIY7FYmlHRW3E7Owsbt++jcnJSZjNZvj9/rQzocPhsLYOTmNjI6anp5O2kyiK6O7uxsjI
      CPx+P0RRXFdT1cTERMrEqaamppS7YJPJBK/Xi/HxcczNzaW9sA8MDODu3bvaqLtgMLjhipTN
      ZtO2iyAIuH//flICmJ6expMnT5L+prS0lIaBAtDGVjscDjQ0NIDjuKyNcCkqKkJvby/m5+e1
      9svlLBYL2tvbsbi4iIqKCt1iW1hYgKqqcDgcaZeCSAx7LCkpwdatW7O2jRJDIBMJILFkRqb1
      9fVhbm5Om5n58ssvp5QjSRLu378Pn8+H9vZ21NTUoKurK6mGn+hAP3LkSEa2D8/z2pIBidpn
      uppn4hkAExMTOHnyJG7cuLHhsr+J1WpFe3s7wuEwysvLddk3JSUlaG9vR1VVFaxWK1iWTduk
      lZeXh+npaTidToTD4ZQJWDzPo62tDYWFhairq1v38bt9+3ZEIhFtohWQvumGYRi88sorGBkZ
      QXV1dcpSIcDS4naiKKKxsXHVJqv1SlQUgaUEsHL2cWVl5XNPbP3WJ4BEm248HseFCxe0jkE9
      Vp1cqb6+Hj6fD4WFhSguLk7bseh0OjEwMIBHjx5pwwwzPQPXarVqHcGPHj1KuQNiGAY2mw3B
      YBAXLlwAy7Jobm7W/dF5LMuitLQUN27c0GrlL7/88oZvmVcKh8M4fPjwM5tNJElCVVWV1lEu
      imLa0SZPnz7N2F3K6OhoynISzc3NKTVPnufR0NAAs9kMURSzMg8gMbFqcHBQazrcs2dP2ove
      RsqQJAmBQOCZbfayLGvHo6qqKUkiMdM/Go1q53hjY+O61ktafrEeHh6G0+lM2wx4/fp1KIqC
      kZERVFVVpTTX8jwPl8uFr7/+GmazWVsafiM4jsO+fftgtVqhqmpK30OiD2BmZkY7j+gOYJnE
      +Ha3240dO3bg8ePHWSn3zp072LFjB4qLi3H37l00NjamjHBJTDjhOA4NDQ14+vRpxhNAfn4+
      9uzZg+HhYdjt9rSzE8PhMDiO04ZiDg4OZuXZqYmlsKemplBZWZnSTJYJLpcL58+f15bk2Ldv
      X0oyiEQi8Pv9KC8vhyRJuH37dspEuETC/vDDD1FVVYWioqINrd7a2tqKaDSKubk57b3VaozL
      m1/07IxdzuPxoLi4GCzLor6+HrOzsxlNAMDSMNCPPvoIO3fuBMdxaGlpSRkIwPM8BgcHUVZW
      tmrfTCwWgyzLSef4ehKAzWbTzovEMxDSjYJLDPtMHCPpjIyMYMuWLaiqqtJGeG1EIBCA1+tF
      U1MTBEFAb29vUuXE6XTC6XSipKQEZrNZG8m2FoZIADzPQ1EUbbnY1SZwZJrNZsPs7CzKy8vh
      9/tXXQpCFEVIkgSv15uR2aXLjY6Oori4GPfu3QOwNJTPbDanrJPC87z2KLy5ubmMx7Eaq9UK
      QRAQj8cRCAR0ecxiQ0MDXnrpJcRiMTgcjpSLbKK9e3FxER6PB4qirDofo729Hdu3b8/YaKXl
      J2siQS+/8ITD4ZRHQNpstqyM0rJYLFhcXIQkSfD7/bqcNwUFBfjud7+rDQF9VpPJpUuXtKap
      dHdJie94nnN8+UQwhmFW7WO5d+8eFEWBLMurPnQl8eS5x48fb/jhU5FIROuLmZ6e1tYUS+fu
      3bva5K+1zuRn1M34gNwVfD4feJ7XxtY+D1EUwbKslp2f9wQeHx9f8/oeiqKgr69Pm7iTbqp2
      4mlQiZEOtbW1a2q/XGscsiyDZVmoqgqWZbVJUSvbcxNxAEtJo6amZk0jTSYnJ1FZWfnc7cOJ
      ckVRxPT0NLZu3fpc3xWNRhEKhdLO75iYmMDg4CAKCgqwsLCAkydPplxo4vE4YrHYMzsPVVVF
      V1cXfD4f9u7di6GhobS39+s5RpabmZlBIBBIelzn9PQ05ubm8OTJE2zbtg3xeHzV5ql03+d2
      u5/7WF9+bE5OTmr9Q+slCAIWFhbSLs6WmGiWiPHIkSNp97/X68XAwAAqKyu1se4rY5UkCQzD
      YHR0NO05rigKpqam0t7Zer1eMAyDwsJCzMzMwG63p73eJJpYGIZBXl5e2j4LSZLAcRymp6dh
      tVrTDqhYzzESjUbh9/tRUVGBaDQKRVFSmsy6u7vR09OjDUxwu93f2PnMMAxjiDsAVVVx/fp1
      7ZF+iVslvS0sLGBhYQEsy2JwcBBFRUUpF1VJknD58mXwPA9BEPDSSy9ltAOW4zgEg0GMjIxg
      165dEAQBfX19KbWIxAMsGIaBIAgoLy/XfaghsHThvXLlCsxms/ZUrEx3No6OjmrLcvf392N+
      fj4pGScuLInRWsBSW/zKpjhZlsEwDFpbW7X2641aPhFMVdWUiWAVFRUoKSnB4uIiWltboSgK
      rly5suFy12L5sSmKYsaPTWBpFdyjR4/CYrFgaGgIk5OTKRfGaDSqPRP54cOHKXdJQOo5Xlpa
      uq5zfGxsTHtSnizL2uTIhERsiQf2JCbnpVvpc3h4GJOTk2AYBpWVlRseUef1erVRShzH4cGD
      BynLPOzbtw9VVVXrWgEVMEgTUGLK/t69eyGKIm7dupV2ynmmPX78GIcPH37mbe309LT2sO1w
      OIyenp6MD/FjGEYblrbaLanf79dqDYIgpG0D18PQ0BDa2tpQXFyM2dlZDA4OZryTs76+Hl9/
      /TWsVivi8XhKu33i9TctoctxnDbOm2XZjMzGZRgGO3fuRGFhITweT9pmBZ7nUVBQgEuXLkGS
      pIzPE1nN1NQU6uvrUVNTg1AohN7e3owvEVJZWYk7d+6guroaQ0NDac/LxEz5vLw8bbjwygQQ
      CoXgcDiwZ8+e5zrHW1pacPHiRdhsNgiCkLLEQ319Paqrq3H//n3s378fiqLg+vXrab9rZmYG
      nZ2dYBgGly5dSrqjex5utxuXL18Gy7IYHx9fdZ7M1NQUBgYGtLv9tSwJbYgEYLfbMTo6qi3O
      NDMzgydPnqChoUHXJ1+53W709fXB7XaDYRhUVFSk1G4LCwtx8eJFBINByLKMp0+fYnR0NKPP
      Lbbb7aioqMCFCxfgcDhWfZzc0NCQNmZ+enoag4ODqK+v13UblZSU4Pbt26ioqEA4HEYgEIDD
      4cjYmHNVVVFZWYmysjLIsrzqQ1f8fj+uXbum1frSPRGMYRg0NDSgpaUFY2NjGVlOZGRkRLtA
      SJIEj8eTdimMuro6xGIxbcRWNiQuPIFAAJIkYWpqCsXFxRl9GllNTQ0KCgowMzODI0eOpP1t
      hYWFGBsbw1dffQW73Z62gpSXl4exsTHtDiUxNn4t53hipdjTp09DlmVtuPBKJpMJfr8fw8PD
      WFxcXLUfRpIkPHjwAAzDYG5uDg8ePEBTU9Nzd97bbDYcO3YMk5OT2LVr16rNlIn1j1RVxbVr
      19b03YZIAAzD4OTJk9rrmpqarIxzr6qqwsLCAgRBWHURMrvdnjTWPDHLMJMURYHFYsHevXtx
      +/bttOsN8TyPEydOaK+ztY3cbnfK7Wwmm+f6+/u1pTCApb6PxBO4lotGo9i2bdszZyGrqoru
      7m40NDTA6/Viampqww+FSdQ8rVYrRFFMW2uLx+P4+uuvtaHLJSUlWekEttvtSX0cdXV1GW8W
      9Pv9uHXrFvLz87GwsIDDhw+nXHxlWUZpaSn27NkDn8+HYDCYchHkOC7p+N2yZcuaj9+BgQGU
      lpZqncAAsHfv3pQ+AIZh0NnZqY1YW60CcODAAW29oOUji56XIAi4du2aNpDkwIEDafsT79y5
      o3V+0yigFe7fvw9g6WTaunWrLg9fX4llWUxOTmpjvdO1oSZm9gFLIz52796d8dnAgUAAgUAA
      w8PDOHbsWNoRAoqiaHFEo1E0NTVl5cHw0WhUKzcUCuHAgQMZXQxv+/btWFxcxNGjR8GyLEKh
      UNrancvlwuXLl/H06VMA6e8AgKXBBP39/Th48OCqwwDXw2az4bXXXoOiKKtOhOI4DiUlJVlr
      +klYeWzu2bMn4wsVPnr0CCdPnoTJZNL6Z5Zvd1mWk2Zfj42Nobq6OiUBKIqCBw8eaJPm6urq
      tDb9b9Lc3AyPx4P9+/c/M7EmlllODDltbW1NOwFrbGwMc3NzUFUViqIkVT6fx9zcnDYMd8eO
      HXj06FHaBJB4dvN6GCIBMAyTMpU6G/r7+9HW1oaRkRFtlMLKmoDVatViC4VCGBwczHgCsNvt
      GBkZgdPpXHUJY47jtDji8XjSiAI9ORwOrdzZ2Vn4fL41r+K4FqqqYmBgAK2trbBYLBgZGUFl
      ZWVKG7LVasV7772nvU53IWYYBnv27IEgCLBarRnrq2AY5pm1VZ7n4fV6cfnyZQDI2kPhly9B
      kBhIsN5Oxm/idrtx4cIFuFwuTE9Pw+FwoLm5WbuwJha/i8ViWFhYQHl5edp5MhzHaXdPz3OO
      WywW7aHwCSuPgcSTwDo6OqAoCi5fvpw2ASxfL2mtTTHPUlBQoA0BvXXr1qrnx/M01RoiAaiq
      ip6eHm1YWyZGb6yF2WwGy7Lw+XwwmUyIxWIpbZyCIGgzLQVB0GXkjcViwRtvvKG9TjfRSpZl
      PHz4UNtGy9fQ11MkEtHWMVltGOdGPH36FI8ePcLi4iJMJhNsNlvaURnxBcj0nQAAIABJREFU
      eFxbcMvv92PHjh1pE+DyGnCml8tOrImT7s7j+PHjCAQCAKDLYzPTicfjePTokfbvjT7cPJ2G
      hgatv2vXrl0pyZDnebS2tsLlcmF+fh7xeBylpaUpsSiKgt7e3qShq+uRWKvr66+/XvXRnHl5
      efD5fBgYGEAgEFj1WB0bG4Pf7wewNIJnI6amprSVBBobGyEIQspvn5+f1x5BmUgCLpdrTasd
      GCIBAEvNL4kO2PUsFbsRiRUnd+7ciUgkkvb2meO4pKGPG5nrsBEsyyZto2xdZMxmc9Lvz/RC
      fVVVVXjnnXe+cWip1WpNqkHeu3cvbQKYmJjQliSYnJzc8GzpRL8QwzAoLi7GwMAACgoKkjoM
      FUXBpUuXIIoiqqqqwLJsyjOd9cDzvO7H5tTUFBwOBwYGBuD3+3Hs2LGUC1wsFtPuohN9JSs/
      wzDMhs5xh8OR1N/BcVzaZSf27t2LWCyGkpKSVZvD3G631kS11mao1QwMDKCoqAjBYFDrTygq
      KkpqqiooKEBtbS3u3r2rDe9euWDcajK/8tYmJEkShoaG4HK5kJeXp82K1dvk5CQuXryIvr4+
      jI2Npb3z8Pl8mJubg8vlgslkSuqIyoTHjx/jypUruHDhAq5evYqLFy9q7dzLRaNRjI2NweVy
      wWaz4e7duxmNYzWJde4TK10ODQ3pUkZXVxc++eQT/PKXv0y7H+LxOK5du4arV6/i2rVraU9u
      n8+nLSw3NzeHgYGBDcc2MjKiddyFw2EUFRWljBZJLHFQVlaGPXv2ZG0me2Iei8vlAsdxePjw
      YcbL8Hg82tDLlpYWLCwspHxGURTk5+fDYrGgpKREe4TmcoIgYHh4WDvH13v8Dg4Ooq+vDyMj
      Izh//jxu376dsn8ZhsHt27dRWVmJwsLCVZtcenp64HQ64XK5NnweJZqkVFWFIAgQBCHl7txs
      NsPpdGrbKT8/P2V109UY4g6AYRhtKejEbXQ2PH36FMeOHfvG9l2/368tBZHpkTcNDQ1wu93w
      eDxobm5GLBbDo0ePUtouWZbVtpHf79dlVc50TCaT1rabaCrLNJ/Ph8OHD6Onp0d7BsPKdlSz
      2Yz29nYoigKGYdKOREos1TE7OwuWZdf0zNVn8fv9ePDggTbG3efzpa3Z8zyPyspKWK1WfPXV
      V7o+L2FluXoem8DSHIwrV66gra0NCwsLaWutiWWyOY5Df39/2sc9Jua6JM7x9baHS5KExsZG
      FBUVQVVV1NbWpqwZlpj896tf/Qput3vVvhhJkrT+gmg0uq44VrJYLGhubsb4+PiqIwkTsbW1
      tWmTBNfaIWyIBMDzPJqbm/H/t/dlTW1k2dZLqXkekIQQoxmEADMju3DZuKtsR0UNju7o6Ojq
      X9hv/VIvFVFRBTbGYAaDhM0gg8UgEJqF0Dxk5vfgyPMBSrnApHRvNHe9QamciTLP2fvsvfZa
      CwsLUCqVX9Qt/xLodDpMT0/DYDCQB3SZ4mkwGGC1WjE/Pw+dTofh4WFB70EsFkOn08Hj8aCn
      p6dqTVKhUODOnTtYWFiAWq2uS4kB+DQIlEqlMD8/f2NxtWpob29HuVxGqVTCwcEBb2knkUhg
      aWmJHN27u7srarxdXV2ErsiyLE5PT29UKtNqtejr60NDQwOUSiVRj7wMrrwBAE+ePPni610X
      JpOJzEfo9fqa+FUrlUrY7XacnJxU/UyxWMTOzg7u379fVQJDJpOhp6cHCwsLUKlUVfVyqsHp
      dGJ2dhYSiQRisRhyuZy3x/PDDz8gnU5DoVBUTVZcLhfW1tZA07Qgg3MURZGEhGMX8Q0hZrNZ
      UhpKJpNX6lHdigBA0zRisRimpqZQKBSws7NTF0ldp9N5IVvjy6BSqRRYlsXU1BTS6TQ+fvwo
      uN+rTCbD2NgYVldXodPpeBdHsVhEOp3G1NQU8vk8dnZ2amLOchncyH1vby8ikQgCgYDgLChO
      b//+/fvw+/28p5tyuYyurq7P1mxpmobH4yHf302bopxufSqV+lPm0+XMr5bDeRy4THpqagqp
      VAo+n0/w08fq6ira2toIOYJvBkYmk5GBKr1eD7vdziupwvUQisUivF7vtdzLxGIxxsfHybAd
      J8F9HgzD4LfffoPFYkEymYTD4eAdWNzZ2cHk5CREIhE8Hs+N1W3FYjE5sVssFrjd7op7K5fL
      2N3dJQHyqqe1WxEAyuXyBRGnm3bmrwJOd5+raVMUhXv37vHKEJ/XhK/Vve3v7+Ps7AwOhwOh
      UKiCzlcsFkltuV7fEfApAHLZDcMwSCaTggeAvb094p97dnYGjUZTwQRSKpV48eIF6Y/waQFx
      ln8NDQ2CbcBWqxW//PILKX91d3dXMMXK5TJ+++030iBvbW2tCw00m81eqCUnEgnBr2E2m4kh
      0OcwNDT0WaXYUql0wentuu/v0dERDg4OiPDkV199VXFPHANpbGyMSEHwBYDT01PSQBZiHRUK
      BTJzwrIsr8gbZ/vK7S9XLeHeigAgl8uhVqsxPT1NTLhriXK5TCI2lwkA/A/FarWSMXcAN/KY
      rYZIJAKVSgWTyQSTyYT5+fmKAKBWqyEWi/HHH38AQF20kgCQstPOzg4x3hYanZ2dmJ2dhU6n
      I6Jql5FKpTAxMfHZ2QcuM3z16hVh7dz0JKlUKvHjjz+Sn/nKCuVyGVarlbf2XUvYbDYcHh5i
      enr6xv7H1aDT6bC5uUkari6Xq6IJLhKJEA6HEQqF0NPTw0tRVigUpEfCMMy1daxisRhGRkaw
      ubmJjo4OXstHhUKB3d1dZDIZIpeysrJCkgsOTqeTfGdCGE/JZDLY7XaSKFabUVGpVITKbDab
      r1ROvRUBAPhEAz09PYXRaKz5GD3HnxaLxbh79+5nSwUikQhtbW2kMVsLlVKtVguPx4NyuYzF
      xUVenrlIJEJrayvOzs5gNpvrZjpCURTa2trw8eNHtLa2Ci6DAXwKso8ePUI+n4dGo+FdQEaj
      Eb/++iuOj48BVJ8E7u3thdvtxujoqCCEApqmsbq6inw+D5Zl8fjx4wq6pUKhwM7ODmko1msQ
      jHs3vV4vmpuba9KgN5vNsNls5G+rJgWtVCoJ/z8cDlfQb7k+STKZJE3166C7uxulUomI/fEl
      iSKRCP/85z//9N8yGo3Q6/VEVfemOD4+RjweJ39ztT2itbWVzNRc9YR6K2igxWIRKysrePDg
      AUwmkyAj/J8Dp1q4ubmJubk5vHz5Eq9evSL6IOcRj8exu7uLqakpUBQliIPQZXATnU6nE06n
      s2oDaX19HQ8fPoROp6sbDfTo6AjhcPhCnVloHB8fY2FhAWtra/j3v//N+xwUCgWeP38Ol8sF
      l8vF20DjNuu2tjZks1kcHBzc+N44WQmbzYbBwcGqaq0///wzhoaG4HK5vshr4EsQjUaxt7dH
      5iM2NzcFv8bGxgZkMhlyuRzy+TwvRVer1eLk5ATBYBC7u7u8g3z5fJ5M8hqNxmuvcY1GA6PR
      iP7+fjx58uRGzf25uTk4HA6Mj4+T6e2bQKvVQiqVkhM8XwBgGAbv3r2DRCLB0NDQlUtPt+IE
      UCwWodPpIBaLYTaba8I1Pw+RSISenh5iSvG5aJzL5UhN2WazCR4AfD4frFYrWRCHh4dwOBwV
      JaBCoQC9Xk/cjITY3K6CdDqNxsZGiEQiNDY2IhwOC36N5uZm0lfY2tpCKpWq2ETi8TiWl5fJ
      sb+rq6uiMcs9R5qmkc/nb0zxAz6xwM7OzpBOp1EoFHhryizL4sWLF9DpdMhkMmhra6uLp/X5
      d7OxsZFMrAuJUqlEnrvVakUsFqvI3mUyGR49eoRQKASj0cg75FUqlaDVaskav0kicX44j8Pe
      3h4CgcCF4bCWlhbekxjLstBqtYKZwisUCiQSCWIM39PTw0sakMlk0Gg0xNzoKrgVAUCj0UCr
      1WJmZgYikajCdKNWuApLxG63IxQKYWZmBhKJRHANfq6mzWm6VAM3iMaZwl/FcUoIOBwOLC0t
      4cOHD1AoFDXpzwQCARL0U6kU7+bJsiw6Ozs/WzelKAoTExPweDygKEqQmjh3L9y0J192m06n
      odPpMDExAZZl8fLly7oEgJaWFrx9+5a8m7Xoz/T19YFlWVgsFgSDQd7nT9M0ZmdnoVQqsbe3
      h4cPH1awXDQaDdRqNVnjN3mPfD4fTk9PMTo6SkpSbW1tsNls8Hg8mJiYQKFQwObmJm8AGBwc
      xIsXLwBAEEafXC5HZ2cnacLzBRWKonD37l2o1Wq8ffv2yte9FQEA+GTAXW81xfPY3t6G1Wqt
      mCD8nMenENja2qrIqvlOACKRqCY87z9DLYMNJ8BnsVgucPr5FpBUKoXH4yF8dD4WEMuy8Pl8
      YBgGDMPA5/Ndi2r4Ochksqq8bW54bWVlBel0+sbyE1eFSCSqeePZ5/OhsbERXV1dVSmmyWQS
      drsdAwMD+PjxI4LBYAVTTCQS8bpzXRXnGUZtbW0wGo0ol8uk3MKxbFKpFIBPJZdqJ0CLxXJj
      BdDziMfjODk5QS6Xg9VqRTKZ5J1U52ZYrhP8bkUA4CRilUolWJZFoVCoW5OTQ3t7O3w+H/R6
      fV109jn09fURpgrnVVoPDvn/BpTLZayursLv98NqtUIikeDo6Ah/+9vfKuqo2WwW4+Pjn2UB
      MQxDZiWEQrFYxMbGBmG29PX1VZRAOD+Ls7MzKBSKmoiyVQO30cnl8pq8Oy0tLfj9998xNjZG
      +O6XA7RWq8X09DQymQyi0ShZu0LShY+Pj4ncdCqVwujoaMU7IhaLMTQ0hDdv3kAsFgvu3FcN
      pVIJJpMJ0WgUnZ2dWFtbE4wEcGsCAOejybIsVldX60JzPD4+hsFggNfrxdnZGWn0nkcymcT8
      /DxpOlVjn9wE5XKZuCml02lMTk5eEF3b3t5GIBAgUsy5XA7t7e11GZYLh8NYW1sj3HfOHlEI
      SKVSkg1xC3pzc5NXydFgMGBxcfGzLCCKopDNZrG6ukr+n5tKZq+vr6OtrY3UtS8nJoFAACqV
      Cu/evSNBor29XVDHuGrIZrOYn59HoVCAy+VCMpm8sbjZZXADWACqKtBKJBL8+OOPKBQKGBgY
      gFgsvhAkPnz4gOPjY8RiMVgsFuTzeTQ3N1/rRBCNRnHnzh3k83kMDg4iFotVLcel02k8evQI
      iUSiLu5sFosFCoUCOp0Ob968EbRi8F8fAEqlEhYXF7G7u0uodvUwgwE+MVysVivS6TTsdjvi
      8XhF8yaTycDpdNa0phuPx9He3o7e3l6USqUKQxin04mmpiYcHBxgaGgIDMMIomN+FSQSCYyN
      jQkuA30e3d3dmJ2dJaUUvuevVCrx/fffIxAIoKGhgVeVlKZpiMVisgkK0eCz2Ww4PT2tqoLK
      zZOMjIxAq9WCZdkLA0+1RCgUQl9fHwKBAHQ6HXw+n+AB4Pj4mEwCHx8fI5FIVLwLDMPgzZs3
      kMvlyOfzePjw4YXvnpvI3d7extjYGFiWxevXr691H06nE4uLi+jr6yMB5DJyuRwikQhR43S7
      3bx+AEKDYRjs7OyApmnI5fIrC71dBf/1AUAqleLrr7+Gw+EgEb1eQmd2ux1//PEHxsbGcHx8
      zLvJGwwG/PLLLzg6OgJQmxOAXq/H7OwskskkGIbB0dERtra24HQ6yZFeo9EgFAphY2MDp6en
      gt8DH9xuNxKJBDweD+lJDA4OCu46xdlOlkolKJVK3o07k8ng9evX6Onpwbt373gZHmKxGKVS
      iahRqtXqG2eAWq0WR0dHRD9+YGCAl+Xy7t07YkTi8XhqMpR1GS0tLZifn8fJyQkSiYTgvZpo
      NIr19XWEw2HIZDLE43Fei814PA6LxYK7d+/C7/fD7/dX9AsUCgXi8Tg2NjZ4xf7+DJyipt/v
      R2NjY9U+USaTAUVR2N/fr1spLhAIwGg0EvqvkLMy//UBAPh0ClhaWiJNtra2NsHlBvjQ2NgI
      m82Gs7MzGI1G3kEapVKJn3/+Gel0GiqVqibBSSaT4aeffiI/j4yMVFxHLBbj22+/RTgcRltb
      W138AIaHhwnvWyKRgGGYaxt5XAU+nw/hcBg0TUMmk2F4eJjXVKO7uxt37txBS0sLFhcXKwIA
      J+jHzRHctJcTjUahVqsvZJF8GjdLS0vwer0olUoQiUTERL4eGBgYwNTUFLLZrOBGSkajEaOj
      o7BarUTGgO87NRgMWF1dBcMwiEQivEw5iqLw7bffIhQKfdH7u7GxgaamJqK6yZewSSQS3Lt3
      Dx8/fgRN0zUlb5yHxWLBq1evLljLVjOGvy5uRQCgaRp2u71uD4zD+vo6BgYG4Ha7odVq0dDQ
      UDHlWSwW8fLlSxiNRiIHLHT2TdM0Xr16BZlMhkKhgMnJyYr7KJfLePnyJeLxOJ49e4aNjY0b
      sSquAm6hcaPu6XSalKGERDgcxsTEBNxuNyQSCWlqnkdzczPm5uZwfHyMXC7Hm+1y4/8cE8Rs
      Nt/IFYymacJUOn+N8+Dol06nkzQlazEtzodQKIRyuQyz2QypVIr3798LStMVi8VXoitKpVI8
      e/YM8XgcDoeDl8BB0zRevnyJSCSC77//Huvr69dS1lWr1YjFYsjlcjg8PKza29na2sK9e/fA
      siyWl5frQinnfJI5VpqQBJZbEQC4UXpO7Kyjo6MuVDqKooijTzUEAgE4HA50dHSgXC7jzZs3
      ggeAWCyGtra2qj0A4JOAVXNzM3Q6HXQ6XU2Evy7j7OwMq6urkEgk0Ov1YFlWEPncy+jv78fr
      168RjUZht9t5syeWZTEwMACj0YhCocA7LUzTNDKZDB4+fCgIG4Zb0H/WSOY2m0wmA7PZDL1e
      L7hsOB/MZjNevHiBTCaDQCBQc4nwUqkEiUTC+91SFPXZsk4qlYLVaoVWq4VWq606UV0Nd+7c
      gd/vRyaTgd1ur1iD509iuVwOLMvyehPXAnq9HkdHRzVh792KACASifCPf/wDZ2dndbVcHB4e
      xsnJCZqampBMJnmvbbfbMTs7i3g8jkQiwav0d1MYDAa8fv0a6XQaNE0jEAjA6/XC4XCQl8pk
      MmFrawvBYBDJZLIuMwE6nQ7fffcdKIqqKZtCr9fjL3/5y2c/E41Gkc1mSQNyfX29IkhKJJIL
      chUajebGmwDLsmBZFgzDIJPJQKfTVSx0jgZoMpkwMTGBhYWFG13zqlAoFHj27BkikQi6u7tr
      XvPe29tDMBjE5OTkhVJYqVTC4eEhurq6EIlEiBDfeeh0OpyenuLk5KSq4N/nwDkGulwuHBwc
      IBgMXpiV4U5izc3NddFhOg+lUgm9Xo9gMAjgUwlIqGdxKwIATdOYmZlBOp3Gs2fPsLOzUxfD
      k1gshg8fPuDw8BByubxiBoBlWchkMnz77bdIpVJQqVQ1EdySyWT47rvvyM8cle48uAz4q6++
      glgsrssJYHV1lZRTOAwNDQlGA70OTCYT1tfXUSwWcXJywjvgxbIsRkZGSJ9CiGe1t7cHjUZD
      1DAdDkdF9imVSolV5/T0dF2YJ9vb22htbcXKygr5XX9/v+BsrXK5DJZlSVnucnO7VCpha2sL
      Pp8P+XweJycnVdduX18f7t+/D7FYfG0ZZpqmSWafy+V4e3EsyyIQCMDtdkOhUKC9vb0unhky
      maxmQ6y3IgBkMhlYLBbo9XrI5fK60eh2d3fx+PFjrK6uQqFQEKVCDjs7O7Db7YRXDnyiowld
      AmIYBktLSzg9PYVUKsXg4OCFLIZ76Xd3dzE6OkpsI8+bZNcCXE/mfPO3FkNyPp8PBwcHpLxw
      //79is1bLpfj6dOnCIVC6OjoqHoiWV9fx7NnzwQ7jqfTaTKg2N3dTUoZ5yESiWC1WrG3t4ev
      v/6atzwlNJxOJ8rlMsbHx6FWq2s2PPj+/Xt0dXVhZWUFer0earX6QnYvFothtVpRKBTQ2NiI
      jo6OCpYUN9y5s7NDTF22t7evxZRyOBxYWVnB7u4ujEYjb6OdK1HZ7XaMjo5eWLe1Ri6XI72i
      z7mRXRe3IgBotVoUCgViilIvyYO2tja8evUKkUgEWq22IltwOBwolUpwuVxQKpVgGAbZbFbw
      +0gmk2hqaoJGo8Hw8DDW19cvBIBSqQS32w2/30+mhetlCZlMJvHmzRucnZ1BIpHg66+/FjwA
      hkIhPHr06E/pc+edl/ggEomg1Wrx66+/orW1FXq9/sbKnP39/XC73RgeHkYmk+EVgyuVSnj7
      9i0oioJEIoHb7a6LVhPLstja2kIul0NTUxM6OzsFD9BisRgHBwfQarVQq9UVTXCKomC1Wgl1
      GQDGx8cvTEuXy2Wsra1hf38fDMOAoqhr90h8Ph/a29s/++5JpVKwLAuVSoX19fWaMNb4EA6H
      4fF4SGDs6OgQ7JR8KwIAp87JLa56TO8Bn2p1jY2NyOVyUKvVvMfKs7MzRCIRknG9f/9e8MWt
      VqsJBXJ5ebmCIieTyfD1118jkUgIOmRyFQSDQUxMTGBvbw89PT1keE5I6PV6zMzMwGAwkM3h
      c8EglUqhXC7zLrKBgQFBS0CFQgGFQgEbGxsAPtWyL9d3aZomWV+hUBCcjlkNUqkULpcLsVgM
      8/PzoGla8JLHwMAADg8P4XQ6CV36MriTazVdIqlUisnJSfT19RGq5HXp1E1NTfj9999x7949
      SCQSGAyGineEE5Lk/KCFomL+GTiTeqGtYoFbEgCy2SzevHlDvsB66QB5PB5i9ScSieByuS5s
      GrlcDktLS0ilUgiFQgBQE6qqTCYjNe18Ps/795dKJSwvL6NYLMJiscBgMNSlvmmz2ZBOpyEW
      i7G4uFgT6qnD4bjA6f6zLFYikeDdu3fo7++/MJTGsiwODg6wv7+P+/fvw+fz3Zi1tLGxgaGh
      IfJM+AKTXC6HzWaD1+uF2+2uG505l8thYWEBZrMZT58+rUnixDXVDw4OiNTz5QCo1WoRj8dJ
      XZ9PT4umaSwuLqJUKsFms0GlUl2rbs4wDLq6usg11Gr1hWfx8eNHMqzJoV6SHJwExHmhQqF6
      MbciAMhkMhiNRlL2qJcYW7FYxIMHD6rytpVKJZ4+fYpCoUDuqRZN4PP122qLuFAooKmpCfl8
      Hi6Xq25SEBz902Qyoauri3cK9ia4ijdzJBKp0E8fHh6uuBeOBsr50wrhB9DS0oLNzU1SSuI4
      9+fBsizC4TC+//77G1/vOigUCuju7q6pAc3m5iampqawtrZGuPiXy3CcRwXn18zZl55HqVSC
      1WpFuVzGxMTEtd/fcrlMHN5omq74mzm1Uk6Ko9auguehVCrx17/+tSb/9q0IAOVyGUdHRxfE
      tOoxCWwwGPD7778Tcwi+5mOpVMLc3BwxK+/v7xc0q9jZ2UE0GgVN05BIJKBpGl1dXRVWdWq1
      mph/TE9P123aNBgMYn9/H8Vikdj9CXnU5aiu5+mal8sDNE1XNFb5DMjFYjFYloXX6wVFUYLU
      YfV6PREYA8ArQEZRFHK5HLxeL9GhqccGpFarsbi4SKbYq03q3gSdnZ2Ym5tDPB5HNBrFkydP
      Kj5DURRh4PT09PCWd+RyOVF8nZ6evvY7xPktAJ/IG9lstqJUyjAMZmZmEI/H8dNPP2Fra6vm
      pzGv14uWlpYLbKy+vj7ByqS3IgBQFIWOjo66m2r39PT8qXhWMplEb28votEoYRYIGQA6Ojqg
      0+kQCoXQ29uLbDaLvb29CwEgm82iWCySjHd8fLxufZJkMon29nYSoIXuQXCbxec2LpvNRjZ2
      TudHq9VWbAAikQgOhwNSqRQURQkil6FUKhEKhVAqlaBWq6tq4jc1NREpBLPZXJcAQNM0dDod
      sRrs7u7mDVA3QWNjI4xGI7LZLHH0uoxEIkFOiRRFIRQKXWiWc+8v9zzGx8evXeZlGIacAimK
      QjKZrNhkc7kcTCYT6dNwg6W1BJeI/Zmh05fiVgQAqVSKeDxO/DnrMQm8ubkJvV6P3d1dAP/f
      +OTyCcBkMiEUCkGv1+PFixeCK5VKpVJotVpsbW2BoigUi8WKJmI0Gq3g/Tc3N9dF7Kqnpwdv
      374lm2AtRutTqRSkUilCoRCSySQGBwcraI2xWAyFQgFSqRStra1IpVK8ddZkMgm/3w+1Wo3u
      7u4bC9e53W4ygXxwcACfz1eRvTIMg0KhgOHhYZRKJXi93pqqp3KQy+WwWCyIxWLo7OwU9H1g
      GAaLi4s4OjqCwWCATCbDyckJnj9/XlF6U6lUiEQixJtgdHT0wn+Px+OIxWIXftfU1HStIJDN
      ZsmAH+fAdRkqlQqlUgl7e3s4OzsTzAzofxK3IgBwDdidnR0MDAxU1R0XEv39/WBZFna7HcVi
      EcVikbe+XygUQFEUHA5HzWSqlUolent7sby8DIVCUXFsbWtrQ2trK/x+f020eKohkUgQbX5u
      Q+O41kJia2sLIyMj8Pl8MJvNOD095S3fcObkBoMBHo+HdxO4c+cOmpqa8PbtW6ysrODp06c3
      uje9Xo9AIAC9Xo9wOMybmNA0jVQqRcpSnHJorREMBklWrNFo8P79e8FO0RRFYXJyEsvLyxga
      GoJcLofP50MikagIAAqFAl999RX8fj/MZnPFyaulpQXNzc04Pj7Gx48fMTY2dm2mlEajQSaT
      IScJvrkHhmFgMpngcrnqaqrEyVADn0pCIyMjgiUA9dFF/h9GPp+H2+1GuVyGXC4nlLtaw+12
      I5PJYHZ2FktLS7wcf6VSiQ8fPqBQKIBhGN7a803BMAyCwSAkEgnK5TLvlGQqlcLJyQnkcjk0
      Gg02NzcFvw+++6JpGtvb20ilUkQcTWhoNBosLCygubkZhUKBN5M1mUxobW1FX18f1tbWqs5B
      rKyswOPxYHR09MabPwDS+H716hXsdnuFVSfw6RRnMpkwPT2N2dnZus1oSCQS5PN5lMtlHB4e
      1qTs5HA4MDs7i9XVVXi9Xl69n2KxiNevXyMcDmNzc5O3+Z7NZnF4eAilUgm1Wn1tA/v19XU4
      nU588803MJvN2Nvbq/iMWCzG8fFxXUo/5xGLxcCyLPb39/HNN9/91CCXAAAJT0lEQVTcyPD+
      Mm7FCYBlWWJpl8lk6nICAD41nzOZDJlwLBQKFYuIpmlQFIWFhQVIJBJeKYCbIhqNQiwWE4ev
      aqbS3BBYOBwWPAvnQ0NDAzFDb29vr2qKclM4nU60tLSQZ3C5v+H3+9HQ0ACv1wvgU8aZzWZ5
      +yBOpxNra2vweDwYHx+/UVnk48ePaGhoQDAYhFwuh9/vJ1TIy+BKMePj44TrXmuYzWYUi0Uc
      HBwAQE0c4nQ6HZGbHhgY4GXMZbNZ2O32z1KEKYoiaykSiVy7Wa1WqxGJRKDX6z/rhyESibCw
      sACFQoG2tra66AKZzWa8fv0aVqsV8XicN0n4UtyKAKBUKmG327Gzs4Otra26NYPv3r2LjY0N
      jI6OIhgM8taLGYbBwMAALBYLaJomXF8hYTAYsLm5SZgmGo2mYoNXq9XEtzgcDtdElfMyIpEI
      EokEofepVCq0tLQInmlub28jEokQKYjL8xhmsxkymewC84lvY+ecqR4/foxyuYy5uTle1spV
      0dLSAqlUeuG75gu83KAY5wfs8Xh4NfGFRqFQAMuyaGtrw/b2NgnYQiIYDOL9+/fErOj58+cV
      gZc7kXJ9qomJiYrPKBQKdHV1YXd3FycnJ9de4z09Pfjw4QPm5+fR2tpadSJcSD/oq0Iul2No
      aAjFYhGlUknQ/s+tCAAsyyIUCkGr1RJHpd7e3pplnBzi8TgymQzm5+dRLpdhs9kubDycMmc8
      HodIJEI6nUYsFuOVA7gJJBIJLBYLwuEwgE9H2csNskKhgIODAzx69Khu9U2ZTAaVSnWh51AL
      Q5xUKoUHDx5UnbFQKpVIJpMIhUJwOBxIp9PY3d2tyHhZloVEIoFEIhGEDimXy/HhwwfYbDbo
      dDpEIhFks1nerJKjQiaTyZqUyfjA0YcPDg4wNTUFt9steAA4OjrC1NQU3r9/D5PJhNPT04rN
      /ezsDH19fWSwi+/9LJfL2N3d/eL39/T0FCaTiZRabDZb3Zhwf4aTkxP4fD6S+QspQXErAkCx
      WCRuTsFgkBh7P378uKabXXNzM5k3ePv2LWiarggA8XicTALL5fIKhoMQoCgKIpGIUBz5qHxS
      qRThcBiLi4vQ6XSw2WyCU/4uQ6/X12Wc3mg04o8//oBOpwNFURgfH+edx+A8o0ulEm+/RiwW
      o7e3Fy9fvgSAGz+rRCKB9fV1+P1+KJVKZDIZ3pOXXC5HT08PvF4v9vb26naCbWhowNzcHKxW
      Ky8tUgg0Nzcjm82iUCjA6/XyChByLDau9n9+cpoDp2C7sLAAg8EAq9V6LVtIn8+Hvr4+YoR0
      dHR0gcLNTQLHYjE0NDSgVCqhsbGxJvLtlyGXy2E2m6tShG+CWxEAJBIJkskkRCIRSqUSxGJx
      TSZuLyOTyRC540wmg2w2e+HFlclkGBsbQzKZhEwmI160QktVnJ2doVAoQCaTEU31y4NgFEVd
      8GP935L9CIHu7m60tLSgUChUjPhzaGhoQCAQwMzMDGQyWdUSC+cZwA0miUSiLx4I0+v1uH//
      PvR6PRQKBcRiMe/JgqZpeL3emicsl8FNqnO4rs/uVcCyLJRKJSYnJ8EwDO/fL5FI8Pz5c9Kj
      4usTiEQiPHz4kJyOrjtR3tHRgZcvX6K7uxunp6cVJ52uri60trbC4/HA5XKBYZi6+TKoVCrs
      7+8TJtD/SUFcE2KxGHfv3sXS0hK0Wi3u3r3La7whNEqlEnEm6uzs5M2oo9Eo0uk0QqEQ7t69
      KyjVjoNYLCZ/q0gk4qUR8pls/Lfg+PgYu7u70Gq1SCQS+Oabb3iFvtRqNU5PT6sK9zEMg0Ag
      gIGBAZRKJWxvbyMYDOLJkydf9C5xEgfz8/NEi/7x48cVxkFisZjoRjU0NBBzmHqg1mtEJpNh
      fX0dLperalmNYRjMz88TxdwHDx7w3udNylMmkwljY2PIZrMwGAy85WGpVIpEIoHd3V2cnZ3V
      TQ5CqVRifHycyMf/Xw/gC5BOp4mOx8nJieB19ss4OTnBhw8f0N/fj3fv3sFkMvFeU6VS4f37
      9zX1e1Wr1ejv7wfDMPB6vRVlhmQyWaGFo9Vq66p3Ukvs7+9jamoKYrEYW1tbiEajFScgriH9
      4MEDhMNhuN3uihKPSCRCuVyGXq9HsViERCKBQqGomrleBZzHLEeBrOZaNzIyQrLbepxe3717
      h0gkgmKxCKVSiXw+j8HBQcHNaFiWRTQaxezsLCiKgsvlqjgBJ5NJ2Gw2DAwMYHd3F8FgUPD7
      2N/fx+npKTKZDNknLq9XkUiEJ0+eIBAIoL29vW5BOB6PY3t7Gy6XCz6fD16vVzCpllsRAIrF
      IkKhECQSCXp7e3F0dFTzAMDVM//zn//g73//OxYXF1EulysyT51OhwcPHkAul6NcLtfE+Uck
      EhFWCx+HPJvNIhwO4+joCF1dXaT+XS/VyVqjq6sL09PTUKlUyGazvAN3nFy2WCyGUqnkHSQS
      iUQYHBzE3NwcJBIJxsbGCMX2S2EwGIgWUD6frzqhLiT17yoYHByE3+8HwzBob29HNpvF1taW
      oBvvzs4Oenp68MMPP3z2cxqNBm63G6enpwiHw1AoFCiXy4KK1HGSJLu7uyiVSlVPgNPT0yRA
      1YsGmk6nyWRze3s71tfXBfu3b0UAoCgKYrEYEokELMte2zD6S8D1GWw2G2QyGeGgnw8AHz58
      gN1ux9u3b8nvnE6noGbTfNIPMpnswn00NTVBp9OhUCigt7cXNE3XTQ20HmhqaoLNZiOCc3xl
      jcbGRsRiMczMzECpVFaVpLBYLBf8hW+6CXV0dIBhGKjVahSLxbpllVdBQ0MDXr9+DbVajaOj
      I8GVWv1+f8W7rtFoKjZfqVSKf/3rXxd+J3RpanBwEMvLy4jFYhCJRLzJT6FQgMlkqgtF+jxa
      WlqwvLyMw8NDiEQiQZ36bkUAkEgkGBkZAUVR2NzcrMskpUgkwszMDLLZLGZmZlAoFCqye4fD
      AZZla8ot9vv9FZO/fM5HKpUKMpkMs7OzKJfL/zXZ/1U1mWiahsViQVNTEzweD/L5vOAbHh9S
      qRTm5+dhNBqRTqcxNTVVlxLPVaBSqTA5OYmDgwNYLBbByy6ZTIZ4IXMYHBy8MIOxv7+PhoYG
      rK2tkRKYy+USvDy5t7eHzs5O3L9/v+pnlEoltre3ySBea2trzTXFstks5HL5hSE4IanS/w+I
      8K1jkaXxWAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='Vacancies by NOC pie' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOzdeXxV1aH3/88+c+Y5ZCADSUiAQAigiAMiYLVqWzv8rPa29unv3l7vbbW3
      rb1t7+RTf797n77aXmvtVQRa0SoqKBYUBCQIYQhDQIZASAiZ5zk5OfM5+5y9nz9CjsxThpPk
      rPfrlZeYs8/ea++Ts757r732WpKqqiqCIAhC0NEEugCCIAhCYIgAEARBCFIiAARBEIKUCABB
      EIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABBEIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABB
      EIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABBEIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABB
      EIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABBEIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABB
      EIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABBEIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABB
      EIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABBEIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABB
      EIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABBEIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABB
      EIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABBEIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABB
      EIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABBEIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABB
      EIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABBEIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABB
      EIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABBEIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABB
      EIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABBEIQgJQJAEAQhSIkAEARBCFIiAARBEIKUCABB
      EIQgJQJAEILYCy+8wMDAAABHjx7lo48+Cmh5WlpaUBRl1NavqirNzc0AnDt3jtra2lHb1kSg
      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
      Op2OZ555hv/9v/83JpMJvV6P1+tl+fLlpKamsm7dOiIiInjqqad47bXXsNvtaDQaFi1axKuv
      vkp3dzdPPPEEqqry5ptv0tXVxT333MPZs2cxm82YTCZ+8IMfsH//fk6cOEF6ejrJycm0tLSg
      0Wjwer20trYyY8YMQkJCWLlyJQ6HA7fbTW1tLdOnT2fRokUUFxfT1tbGk08+yapVq4iMjOQH
      P/gBer3evy/z589n2rRprF27FkVR+PKXv0xUVBQbNmzg9OnTPPjggwAUFxfT2dlJbGwssixT
      XV3N7NmzmTNnDgCHDh2itLSUsLAwli9fzquvvsr+HVuIsLVxuKIOjSSxbP4M6tt7qGvvoaXr
      80k+mjp7OdPQRojRwJK5uRytasBsc5CfmUplYzsSsHDmNNp6zeSlJXGqtgWTQUdtWw+KorBs
      /gwqGtvps9iZEhNBiNFA8YkqLHYnsRFhaDQSTZ19nGloJcRoYHHBdIqOVqDRSESFmchOSeTo
      2QbCQgwsmZvnL5fL3I2zt53Q+JRR+4KOBdWrRR4ID3QxxpTlo82E3rYAw7RpgS5KQF33HkB3
      dzdVVVV873vfIzc3l/T0dA4fPsy5c+eQZZkf//jHJCQksHbtWpYuXYqqqlRUVFBRUcGiRYuY
      PXu2f12SJLF06VIef/xxCgsL2bp1Kw8//DBz585l7ty5REZGsnPnTurq6viHf/gHFi5cSEND
      A3V1ddx3331MmzYNq9XKT3/6UzQaDZ988gk5OTn88pe/ZOPGjVRXV+P1evnyl7/Mfffdxze+
      8Q1uv/12AGbNmsXUqVMpKipCVVWio6P5+c9/Tk1NDRs3buTxxx/nySef9Jd148aNzJ07l+Tk
      ZPbu3cumTZv42c9+RmJiIna7nbq6OgCqqqowm810dHTQ3d3NT3/6UxITE6mtrSU2NpYf//jH
      hIeH8/TTT1NeXs7atWtZvnw5TqeT6upqrFYrP/nJT/B6vdxxxx3cddddPP744wB0dnbi9Xr5
      +c9/zp49e+jv7+enP/0p4eHhNDU1sXXrVpYuXUppaSmVlZXY7Xa+9rWvMW/ePFJTU9m2bRuL
      Fi3i3nvvZenSpdTU1PDss89y7tw5ent7KSkp4ZlnnvEHx1e/+lV0usFzgvnz55OSksLWrVvp
      7+9n4cKF/PCHP6SsrIz333+fn/70p/7KH6C8vJzw8HCWL1/O7t27WbZsmf9YA0yfPp309HQO
      HTrElClTKJw9i2yTm5M1zUxLjici1ER1SxdVzR08cNsspibGfr7u+jYevH02ESFG6tq7sTlc
      fGHBLLr6LeSlTWHZ/BloNRq6zYMDgHX0DdBndXBXfjYLZ06jrLaFtIQYoiNCOV3fSmZSPLlT
      E7ktL5Neix2P7KO8vpUHb88nItREe+8AOq2GB26bxYDNSWe/hVCTgcKc9Mu+H+bGygl/Q1g2
      R4Iyvid+GXFeL31r3gj6yeVv6Cbwgw8+iEajYcWKFdx5553k5eXh8XgwGAyoqupvB7ZYLBQW
      FpKSksIvfvELXC4Xf/7zn3G73f5lNBoNsiwjSRK5ublkZ2dz6NAhenp6eOCBB/D5fEiShE6n
      Q6vVotfr+Zd/+RdaWlpYv349kjQ4RonT6cRkMuHz+VAUBUmS0Ov13H///UiShFarxePx+Jdf
      vXo1S5YsISMjAwCdTnfRckajEe8l7YJWq5WMjAzy8/OBwQAbKp/X68Xn8130nqFt2Ww2QkJC
      0Gg0aDQatFotkiQhSRKKomC1Wrn99ttJTExEq9VetMzQ+i/cHgxePQ393m63YzKZcLvdOBwO
      Hn74YYxGI/fffz+yLPPmm29y//33k5iY6C/rhetQzneFu//++9Hr9cyYMYMnn3ySP/3pT3R1
      dWG1WvnrX//KF77wBaKjo/3HS6PR+N+v1Wov2vfQ0FDuvfdeJEnC5XLhcDh49NFH/a+/+uqr
      3HXXXeTm5qIqCh0N1bidg5N6O90yCdERJMVGMjQGjXJRdz0VFRVFVdFIEooKnD8Wiqqinl9C
      UVR8ioKiqkjnF3F6ZAw6LSXlNcxMTyYyNGTwuCqfH8/PtzJ4T0CSQKMZ/Lw0Gg25U6eQn5lC
      0dEzeC75G/G6HFjb6pioBpt/Jl/f/xvhqanBWrQz0MUIKO3zzz///JVeGBgYYPr06bhcLiIi
      IoiJiWFgYMDfnvzFL36RI0eOUFJSQkpKCl/72tfYsWMHXV1dzJkzh48++oj6+nruuusu1q9f
      z8yZMwkNDSUmJoa3336b8PBwwsLCyMnJwWAw8Mknn9DR0cGMGTOIjY1l2rRpuN1uIiIi+PDD
      D2lvb2fZsmUUFxdTWVlJZmYmDzzwAMXFxezZs4evf/3rGI1GUlNTMRqNREdHs27dOoxGI1On
      TqW1tZXS0lJMJhOLFi3CarWSnZ2NxWJhyZIlrFmzhrq6OubNm0dSUhLTpk1jz549tLW1MXPm
      TOLi4li3bh1lZWV86Utf4tChQxw9epSpU6eSm5uLwWCgtLSU06dPExcXx5133onVaiUrKwun
      00lGRgYul4tly5b5j1NhYSEej4ecnBwsFgs5OTlUVlZy5swZ5s6dS1hYGGfPnqWoqIilS5fy
      2WefcebMGVJSUrjtttuIjo7m0KFDOBwOpk+fTnJyMqGhoVRUVHDq1CkSEhJYsGABJ0+epLu7
      m4SEBLZs2UJ+fj45OTlIkkRycjJNTU1s3LgRo9HIkiVLMBgMHD9+nIqKClJSUsjLy8NoNBIb
      G4vH4yE/P5+//OUv9Pf3s3jxYoxGIzabjbS0NPR6PTqdjpMnT+Lz+Zg1axY+n4+IiAj27dsH
      QFKYjpP7dnCqtoUFuRlUNXcyYHOSHD9YEZ2saUaSJHJSEwEIMRrONxNpmJM9lX6rnTP1rWQl
      J1Dd0kV9ew/pU2I529RBc1cfCVHheH0KZ5s6sDpc3D5jGt1mK81dfYSHmMhMiqO1x0xbr5nE
      6AiiwkOICgvhcEUdkgSzMlJwe7wkREfgcnvw+hRO17cSZjKSk5J4WXB4bGZC41PQ6se2D32s
      vZIwz/BmwVLcBpzNyUz0wd9ulbumhtBFd6AND64msCGSOgZ3Qo4cOcLtt99+2RfnVqxZs4a/
      +7u/G4FS3Zr33nuPhx56iMjIy7vMjXbZAr3vI8HjcrLpD89h6x/dmZtOVDeRk5pIROjYjGsT
      EptE/IzbRuRv/EZld20kwVY2rHW42uNxNk3sexjDoQLeLz5I1v/67ph+duPFmASAIAw58elm
      jhdtDHQxRkXCrDsIiUkcs+0NNwBUFaxncvDZJ+7Y/8NhCw3hWEE+Z/Ny+PtF95AZE3v9N00y
      4kEwYczYB/o4vXd7oIsxavrryifUUAM+hwmfPSTQxRhzPo1E2cxc3vvKQ5TPmI5XkthaVRGU
      3UIv6wYqCKNBVVWO7dgYsKkdx4LXZcfSVkvU1OmBLsoNGRz5M3iaPVSgKTWZQwvm0hsT7e9I
      ANBk7qesvY3ClNTAFTAARAAIY6K/s5XaE4cCXYxRZ2mpISw+FZ1pfDerqOrQzF/BwRwZzuF5
      c6nLmIqquXLDR1FNFbOTktFd5fXJKHj2VAgYVVU5VbwVJQiGy1B9XsyNZ8d9c4LPHoLiNga6
      GKPOo9NxaH4BG770ILXT0q9a+QP0OuycaGsZw9IFnrgCEEZdf0cL9RNosLfhcvS0ET4lDVN0
      QqCLckXBMPSDIknUZKZROq8AS2TEDb9vT10Nhcmp6LXB8WCcCABhVKmqSlnxVpSgGnxLpb+h
      kqSCWCTNOKxIFGnSDv2sAn3RUey/YwGtyVNu+v09Djtl7a3cNvXyp74nIxEAwqga6OmgsfxY
      oIsx5mT7ALaORiJSsgJdlMt4reGo3sk38qfTaODIvAIqcrNRhtGOv7+hjsKUqUFxL0AEgDCq
      Kg8OjvoZjAaazg0+IWwYX5OsT7Z5f70aDWdzplE6fy4u0/Dva3TYrFR1d5E/JWkESje+iQAQ
      Ro3TZqH2+OTv+XM1ik/G3HiWuOmFgS6KnyJrkfsnx8QvKtCalMiB2+fRExtzUbfO4TrQWMes
      xCmT/ulgEQDCqKn+bD/uSTRpyq2wd7UQPiUdY+T4eMpUNkei+sbhfYmbZI4I52jhHKqv07Pn
      VtX399FiGSAtanJdLV1q8jdyCQHhlWWqjuwLdDHGAZX++jOoauCfEFbViT/vr0en42hBPh98
      6QHOZWeOSuUPg6PMHmy8uQmlbnZWQFVVLxn19sYoinLdbsY3sgyIABBGSUfdWSw9wxupcrLw
      2MzYOpsDXQxUWY/XGhboYtwSFajJTGPDlx/kyPwC3MbhtfW3na2iYs/gyMZNZaeQXe6LXvd6
      PBw+fQqHx3PD6/zLX/5yc2Voa6OoqOim3gNw+PBhKisr2bZt21VDZ8eOHbS3t19zPTabTTQB
      CaOj6sje6y8URAaaqgiNSx7zIaMv5OmNmnATvwx16zxw+zyaU5JGrJ3f0tVNe1U1mYWF9Le1
      k5idTWNpGQMdneTefSftVeeoOXyEfJ2R22fMpKCggIqKCqZPn05FRQWNjY3k5+fz6aefEhoa
      yt/8zd9cNH1uXV0dW7duZfr06dx///0UFRVRVVXF4sWLmT9/Phs3bqSyspJZs2YB4PV6eeut
      t5Blme985zsUFxdTX1/P448/TkREBBs3bqS7u5tvfvObOJ1OQkJCmDp1KpIkcfr0afbu3csj
      jzxCUlIS77zzDocPH/bPY9LX18c777zDtGnTeOSRR9i8eTO9vb089thj4gpAGHlOm4XmyuEN
      UzzZKLKbgaazAdv+YPPPxGrPdhv0lCycz/tffpDm1OQRvckLMHv5Us7s+nwO8MRp08gonMvJ
      bZ+Qmj+LjMK5ONNT2b17NwAHDhzA7Xbz61//mri4OJKSknjooYdwOByUlpZetO7IyEi+8pWv
      UFxcTFdXF4cPH+bpp59m586dfPzxx0yZMoW/+Zu/uaiZZunSpaSmprJp0yaOHDnCd7/7Xdas
      WYPdbqenp4fvf//7vPHGG/7li4uL8Xq9fPjhh/5peFetWsXDDz/M8uXL/ctt3ryZ2267jYUL
      F7Jnzx4MBgOPPfYYLpdLBIAw8mpPHArarp/XYutswm01X3/BUaC4jPgc46s76tX4NBrO5Gbz
      ztce4dSsPJRReio3JDICY1gY5vYOFJ+X45s/xm42o9XpkJBQVZXWATOdNutF71u0aBH33HMP
      hw8fZseOHRiNRpzOiwc53LBhAydOnMBoNCLLMqmpqej1ekwmE21tbRQUFPhnAQSora1l3bp1
      /lkGY2JiiIiIQHt+32NjYwkNDUWvv/j5DVmWqays5M033yQjIwNZlklJSfFP7QrwzW9+k/r6
      ev74xz/S0tLC7NmziYiIGJzlbzQOrBC8VFWlruxIoIsxPqkq5oaKgAwZ7emLBHV8f91VoD0x
      nk0PLWfPnbfjDBm9oar1ISY0Wi0zliymr6UVSaPB5/XS09iERqvDEBpKb1MztUeP0Wiz8Mc/
      /pGTJ0+i0WiIiRkcRkOv19PV1UVtbS0hISH+6VNhcArVpqYm+vr60Ol0/gmkoqOjue+++3jh
      hRdYu3YtYWGD92S0Wi0Wi4WKigpCQ0M5c+YML774Ivfccw8Au3fv5ne/+x133HEHoaGhGI1G
      oqKiMJlM3HXXXbjdbmRZZvbs2fz2t79lz549/hD47LPP6O/vR6/X88UvfpHXXnuNV155Bbfb
      LSaEEUaWta+b93/7i8E2B+GK4qbPIyxx6rDXc6MTwqgqWE7lorjG7xWANSyU0nkFnMvKGLWe
      PdczNFih5vxZt6IooKokRUbxw9vvxGQ0XvRcgKqq/rnRL5tf+hqvweCZ+9Bc4EPcbrd/+Zde
      eomnn34avV5PT08P27dv51vf+tZFZ/YXbsvr9fpfu3S7Q2XR6/VoNBoURUFRFHQ6nbgJLIys
      xjPHReV/HebGSkJiE9HoxuaGsM8WiuIanyN/enQ6ymdM5/icmcPu2TNcmkuamjTng6jLbsPi
      lQkxXRygkiRhvEqZr/UacFlTDnDR8t/73vf8y8TExPDVr371ipX/0LYuXN+l2720LBqNxr9v
      IgCEEaOqKg1BOO7PzfJ5XAw0VxMzLX9Mtufpi2K8TfyiAg1pqRyeX0BfzPi/OX26o40pOXlj
      tr0Lm5O0Wi0RETc+ounNEAEgjBiHpZ+uhppAF2NCsHU0ED4lHX3o6Hyxh6jqUACMH31RkRy8
      fR6No9CzZ7Sc6exgWXYumglS3hslAkAYMe21Z8fFE68Tgaoo9NeVkzj7zlHdjncgAtUzPkb+
      dBkMHCuYRXnedLz6iVX1dNqsWN0uokyTaw7lifUpCONa67nyQBdhQnEN9ODoaSM0PmVU1v95
      3//AnrUqkkRVdiZHCudgC5+YTyL7VJXavl7mpwz/5v14IgJAGBE+Waa9rirQxZhwzA2VmKIT
      0OhG4Sxd0SCbR7eJ6VpUoDM+jpKF8+lMiJswzT1Xc7arUwSAIFyJuasNu7kv0MWYcLxuB9a2
      OiLTckd86GF5IBzVO/ZfcRVwhJg4Mm8OZ3OyhjU5y3jS0N+H7PNNqukiRQAII6KrqZbBr75w
      syyttYQmpKIPCR+xdaoqeLrHft5fr1ZDed50js6djccYuHGPRsOA20Wvw05SxOSYTwFEAAgj
      pL0ucOPcTHSq4sPcUEH8jNtH7CpAlXXIlpELlOtuD2hKTebgbYUTolvnrWqzWkQACMKFFEWh
      p6Uh0MWY0Jx9nbj6uwiJvfmJzK9ENkeM2cif/ZERHJ4/l7qMqRO+nf966ibZjWARAMKw2c19
      2AdE+/9w9TdUYIyKQ6Md3tdyrEb+dBv0nJg9k7KZeROuW+etahkwo6rqpJkqMjg+NWFU9bU3
      oXi9gS7GhOd12rC21ROVNn1Y61FchlGd+EWRJM5lZfDZ3NkMRAaul1Eg9DkcOGSZMMPkuL8h
      AkAYNnNnW6CLMGlYWmsIS0hBZ7r1CtzTFzUqI3+qQE9sDAdun0drUuKkb+65ErfPS5/DLgJA
      EIb0dQR+usPJQvV5MTdWEZc775aaGVQV5BEe+kEFXEYDh+fP5WzOtFEbn3+i6LRZSYse+x5W
      o0EEgDBs4gpgZDl6Wgmfko4pOv6m3+tzmPA5Rm64Ap9GomJ6NkfmFeAyjc8RRcdam9US6CKM
      GBEAwrB4nA6sfd2BLsak019fTtLce5Fu8iEqT08MIzH0gwq0JiWy747b6I+ODMrmnqvpumSG
      sIlMBIAwLA6rGa/HHehiTDqyw4q1vZ7I1Owbfo+qgNw/vOYfFRiICPd36wzU5CzjWa/DMWl6
      AokAEIbFYTEjJpUbHZaWakLjU9EZb2wmL68tDMV962MKufV6Ts+YzrGC/KDp1nkrHLIHt8+L
      aTTGbxpj4lMWhsXW3xPoIkxaildmoOkssTlzb+hsU77FiV8USaIuYyqH588Num6dt8Lj82H3
      eEQACIJo/x9d9q4WwhLTMEXFXXM5VZHw9Nzcw19D3ToPzy+gaQJNzhJoiqpicbmIC52YQ1tf
      SASAMCy2/t5AF2GSUzE3VjJl9l3XvCEsmyNQfTfePdOt11M6v4AzuTkoWtHOf7P6nU6mBboQ
      I0AEgDAsLoct0EWY9DzWfmydTUQkZ17x9cFpH29s4hdFkqjIzeZI4RycITd2b0G4nG2SdHwQ
      ASAMi9suAmAsDDRXERqXjNZweV981ae97sQvKtA+JYGS2+fRHRcrmnuuQ1VVVHyoigdFlVFU
      D4riQlHdKIqLAWcEcOM9tMYrEQDCsLjFFcCYUGQPA01VxOYUXPaa3BcF12j+sYaFcmjBXGoz
      0yfN5Cw3Q1WVwcpc9aKqXhTFjU9xoaguFMXtr9h9imvw3+f/f3D5wfdeOtdFtyUGuC8QuzOi
      RAAIw+Jy2ANdhKBh62oiPCkDQ/jnff0Hm3+u3Pffo9dRnjedYwWz8EyCsWsGuxsPnpmjKiiq
      94LK2zlYmZ8/Q1cUFz7/v93+yl9lZAYttLknx8NgIgCEW+bzevHJnkAXI3ioKv315STOvsvf
      LVSV9XgtF/dGUSSJxtRkDiycP267dQ5V5oMVuoKiXNjEcr5Cv6ACHzpjV1UZRfGgqvL5M/PA
      cMiT48RHBIBwyxTFhyqmgRxTbksf9q4WwqekAeDpi7xo5M/e6CgO3lYYsG6dqurzt5f7LmhO
      8f+/6kFRnPgUF6rqOX/W7mGiTSfqU5RAF2FEiAAQbpmqKBPtezspDDSdJTQuCdShsX/AaTRw
      fM4sTs/MxTdCo3Uq59vLhypqn3pBG7niwac6L2hDd11QmU9+sm9y7KcIAOGW+bwyIgHGns/j
      YqD5HD6NCdmpcnZ6FqXzCnCEmK541q+qyvk28KHeLJ4L2s0vvQHqRhmq2NWhm5+T42x3JHmV
      yTEBkggA4ZYpXq8YB+gWSOf760vShf+W/K9JQ//1/25wYenC9/Z20R4RxaHlubTGheFTm1Gc
      F7aZO1FVN77zZ+hDN04D2W4+mYgAEIKepNGikTT++wAXjldzacU2+Dsu+p3kXwq0ksb/mub8
      v4d+p5EkNOcrRI3/d5qhLfiX00oSXLDs0DqGKtOhd2g1n6/D/7sLtiVJgyXTXPi788vpNBdu
      /+L3+teLhHTBPkhD+4V0viL/vGIfKqd/b6TPj96Fx8l/vKTPj69da8cZU4zPZ+GsXYNXFX37
      hZsjAkC4ZSF6I1+fdjeSMhgAQxXmRRXbNX53YUUt3LxwJZzbu5YyK6MY95Q+Sge0HLVo6PIM
      XisIo0evnfjdakEEgDAMklZLpCEMJkmPiIkoVhuO9dz9aLOK+WJcN1+I81HjkCgxaym3iauC
      0aLTTI6qc3LshRAYGkmcaI4D6SEmzlQsw5e7j9ikdmaEqcwI82LzwlGLloNmDe3iqmBEiQAQ
      BK0WUakEniRJzIwxcqT8XrzewyRObQQgXAdLY30sifHR6JI4YNZywqrBrYjPbLj02ok/FwCI
      ABCGQ5JArwOf6FkSaFpJYn6CkQPli/B5dSRl1PpvGGskmBaikmny8tUEOGHVUDqgpdEloYoA
      vyXhxvBAF2FEiAAQhsdkBNfkGBp3ojNqJW5LMHDwzO14ZT1Tc85e9FiAJA1eFSyOUbgnWqHZ
      JVFq0XLcosHqE0FwM8IN43OIjZslAkAYnkkwyNhkEmnUUBiv52hlIT7ZQMbMU1ccEUKSID1E
      JT3Ey5fj4aRNw2GzljqnhCKuCq4r3CgCQBAGrwCEcSUpTMOsWB3l1bPwevVkzzl2zWGBTFpY
      FKVwR6RCl0fi0ICGzyxazF4Q93iuTASAIACIWaXGpawoDTZZS0N9Lj5Zz/TCI2i01+6uK0kw
      xajy1UQfj8T7qLBrKDFrqbKLq4JLRZgiA12EESECQBie8Ik/MfZkJEkSs+O12GSVrpZMfD4d
      efMPodXd2A17vQbmRigUhCv0yvCZRUvpgJZuGcRVASSGTwl0EUZE8E0PJIys8NBAl0C4Cq0k
      cdsUHWF6id72NCpK70X23Nw9G0mCeAN8Md7Hv0/z8EyazPwIH3opeMeA0mn0RIVEB7oYI0IE
      gDA84gpgXDNqJe5I0qHXgLkniTOH70V239p9G50GZoSp/L8pXn6V5eHRBC8pRgUpyEaENemM
      RBqvPAvbRCMCQBie0JDBjubCuBVh0DA/UYdGAmt/AqcPLsXluPUrN0mCaD18Ic7Hv2TK/Dhd
      5s4oHyZNcARBpCkKg25y9H4TASAMT2gI6CfHU5GT2WDPoMGJYuyWGE4fXIbTPvyrN40EOaEq
      30728v9le/jmFJmpRoXJPE9EStTUQBdhxIgAEIZHq4VxOu+scLGsKA2ZkYNfeZc9glP7v4Bt
      YOTassO0cG+Mwi8zZf4lU+beaB/h2skXBGkxGYEuwogRASAMX8zkaA+d7IZ6BiWEDDbZedwh
      lB9ciqUvboS3A1NNKo9N8fJ8tofvJstkh0yeewVTowbnYy4uLgZAURT27t17zfc0NTVRUlKC
      3W6nr68PgPXr149uQYHe3l4cDgcARUVFKJeM3Kt9/vnnnx/1UgiTm9UGrR2BLoVwAzSSRGKo
      hg67gkcBxaejpy2N8Kh+QsJtI7otSQKdBKkmlUVRCoWRCkaNSp8s4ZqgA9JJSHyj8AkiTVG8
      99573HPPPSiKwgcffMCdd97J7t27qa6uJjs7m/3793P06FFSU1MZGBigpaWFkydPsm3bNuLi
      4igtLaWvr4++vj7S0gZD5cyZM+zatYvU1FQAtm7disfjITY2lqKiInp6evD5fISHh9PT04PX
      66WiooK9e/ei0+mIi4ujuLiY48ePk56eziuvvMLZs2eJi4sjPDychIQEGhsb2bZtGzExMeIK
      QBgBMZOjS1ywMGolFp7vGQTg8xqoPHoPPW2j17YtSZBy/iGz57I8PJUqkx/mQzvBupOGGsKI
      CYkFoLu7m1deeYUVK1bgcrkoKSnB6XQiyzIlJSWEhYWRnJzM66+/7n9/pHvxEAAAIABJREFU
      ZmYmeXl5pKenMzAwQH5+Pp988gkAFouFTZs2cffdd7Ny5UpKS0vJy8sjLCyMt99+m//b3p0H
      R3nfeR5/P08/faq7JaFW60QnAiEkELcNxmBsGMeOx07sOBvPJjM7STmZeGqqsk5iTybJZrcq
      46lybZyN43N9sfFRnhhzm8vmlriMEEKAQSeHhCR0oLulPp79o5EMGGPAklrS831VUaIkdT/f
      luD36ef3/J7vLzY2lri4OLZu3YrP5+PIkSOcPn2av/71r9xxxx385S9/IRAI4Ha7iYuLY8WK
      FWRkZFBQUEBCQgKbNm0iFArx2muvsXjxYl555RUJADEEYqNBM0W6CnETXBaV2V5t8JauYNDM
      Z4cW0Hgmc9iPbVVhuivET1ID/DrTzzfiAnjMOmPhwnFabAZRlzqBejwefvzjH/P4449js9mo
      qqri+PHjnDt3jr6+PtasWUNjY+PgFAxATEwMEyZMICYmhsTERCZNmkRsbCwQDpTc3FzS0tKw
      WCw4nU6mTp1KdnY2ra2tzJkzh8mTJ3+hJq/XS2pqKikpKTQ1NbF27VpaW1vp6uoiJiYGr9eL
      0xmuua+vD6/XS0pKipwBiCFit0H0+Lg13kgSolTyPZ8Htx4ycap0HvXVOegjMBYrCsRbdO6P
      D58V/DTVz0xXEG0UnxVkxmUN/t1isWA2mzGbzWiaxqJFi2hvbycYDGKxWGhra6O+vh4IX38x
      mUwkJSXx0UcfUVxcjKaFGzEMfExPT6ekpISXXnqJ2NhYQqEQzz33HKtXr2bOnDk8++yzvP32
      23i9Xv785z+zcuVKVFWlqqqKl19+ma6uLkwmExcvXqSurg5FUcjMzGTFihWUlZWhaRo2m42u
      ri5effVVAoEAiq6PxK9ajHt7DsCp6khXIW6SruuUNQep7bj84qBOeu5RJk4+dt0mcsOlIwD7
      203sbVdp6h9d71H/+5J/ZU7a/C/9ejAYJBAIYLVa6e3tRdM0zFctk/b5fJhMpi98HsIXlLu6
      unC5XCiKgs/nw2KxoKoq/f39qKqKyWSivb2d6OhoFEXhueee48c//jEOR/jejp6eHiwWy2Cw
      9Pb2YrFYMJnCYa/rOh0dHbjdbgkAMUQqa2HXvkhXIW5BMKSzvyHAhd7LhwKdlOzPyMw7ghKh
      G7xCOlT3KuxtN1HWqdIb4QvHqqLyf779KnFRnojWcbXz58+TlJR0S4+VZnBiaCTEh8/p5f3E
      mGNSFWYnaOyp89PlH/isQl1VLoGAhUnTD6JGIAQGbjLLtgfojofSTpWidhPnIrSTWZI7ZVT2
      ALrVwR8kAMRQibJDjBva2iNdibgFVpPC3ASNovoA/YOzQQqNp7MIBTRyCvffcCfRoTawk9kd
      sSEWxIQ441PY126itFOlawR3MpueXDhuNoMfML5ejYgcVYXkRAmAMcxtVZmVoLH/fOCy9TgK
      F+rSCAQ0ps4pilgIDFAVyLDrZNgD/G08lHep7G03UdUz/HsW5CUWDOvzR8LousIixrbk8dEj
      3ci8doVpcVcv6VVoa0yhfN+Sm24nPZwcJpgXHeJfJvp5OtPP0tgAbtPwLCe1ajYJACGuy+sB
      s5xUjmWKopAdYyLd/cWhoaPFS3nxXfTfYjvp4TJwk9m3E4L8LrufHyYHyIsa2tYTk+NzsWnj
      b/c7CQAxdCxmSEmMdBViCBRc1jPocl3tEyjbcw+93c4IVPXVLCrMdIf4p1Q//yu7n2/EBZhg
      /vpBcFvGQpRIrIkdZhIAYugoCmRMjHQVYgiYFIXZXg3nNTp993a5OVp8Fz2do/fmP0WBWDPc
      Hx/kt5n9/FOqnxnOINZbuMnMpJiYlTpvGKqMPAkAMbRSk8MtosWYZ9UU5l7WM+hyfT1OyoqW
      0tE2tJ1Eh4OmwjRniB+lBPh1Vj/f8gZItNz4ngW5CXm4x8km8FeTABBDy6xBqkwDjRdui8rs
      BO2aA4W/z86xvYtpb/GMids/Bs4K7p4Q5F8z/fzLRD/z3F+9k9n89PE5/QMSAGKoKQpkjZ8N
      M0R4ZVDeF1YGhQX8Vsr3LqGtMWlMhMAAkwKTo3R+cGl/4+8m+EmzffHCsdlkvm7rh7FOAkAM
      vYkpYBtdK0XErVMU5YrdxK4WCpo5cfAOWs5PHFMhMMClwaLYEL9I9/PzdD8LooPY1fBy0unJ
      s4ixx0a6xGEjvYDE8Nh3CI5XRLoKMYRCus6+81f3DLqMEmLS9EMkZVSObGHDoC8EhztN5OT/
      D3KS5ka6nGEjZwBieORkEZFWkmLYqEq4Z9C1VgYBoKtUls3mXGXumDwTuJxVhQXxcUxKmBHp
      UoaVBIAYHhNiIH70rxARN8dqCq8MsnzZyKGr1Bwr5PSJ6WM+BCyee1DU0XPn83CQABDDQ1Eg
      d1KkqxDDwG1RmeXVUL/0BE/hbEUe1UdnoY/RvX9RbVjjl0W6imEnASCGT0YquEbnHaPi60mI
      Uq/RM+hyCvU1kzlVOp9QaOwNM5bYBZis438589j7zYixQ9NgSnakqxDDJNP95SuDwhSazmby
      2acLCAbGUo8oFVvCg5EuYkRIAIjhlZMJ1vE9j2pUiqJQ4DHhuUbPoMu1nJ/Isf2LCPi/7Orx
      6KK5Z2CKMsb0pQSAGF52m1wLGMdUJbyRzJeuDLqkvTmR8r2L6feN/o6a9uT/gqIYY2g0xqsU
      kZU3GSxyFjBeWb5qZdAlnW3xHN17F3299pEp7BZo7kI0V36kyxgxEgBi+NltMFXOAsYztyW8
      m9hXDSg9HTGUFd1NT5drROq6Wfbk7xnm3T9IAIiRMm1KeL8AMW4lOFSmeb66E6yv28XRoqV0
      d0SPQFU3TnNNR3ONv12/rkcCQIwMmxUKpka6CjHMvnplUFi/z8HRoqV0tHpGoKobYcKe+oNx
      2/Xzy0gAiJEzbTK4oiJdhRhGAyuDvF+xMgjA32+jfO9iLl7wjkBl12eJW4LZNS3SZYw4CQAx
      cjQNZo/v3ioivDJoVoKG6wau+wcDFo7tX8yFusjtJKeYHNhT/2vEjh9JEgBiZGVOhMT4SFch
      hpnVpDA3wXzN3cSuFgpqnCy5ncYzGcNe17VYE75liLt+r0UCQIwsRYG5hbJtpAG4LOF7BG5k
      kNFDJipK51NXNWVEm8iptjTsSd8euQOOMhIAYuTFx4WvB4hxL/4GVwYB6LpKdflMzlVMHaEQ
      UIlKfxzF5BiJg41KEgAiMqbnQfToXAsuhtaNrgwKU6g9MYOaY4Xo+vCuyLF4lqK5Zw3rMUY7
      CQARGRYzzJ8lm8YYwMDKoATHjf6uFeqqplJVNnvYOokqWjSO1P9muGWfV5MAEJGTkijdQodB
      ZVMDz25axwvbNuPz9w/Jc17o7Bh8rk3lR2768Qpwoek47pvoCPL+hmZOHrqdUPDGhqm6xl4A
      dF1n274L163Gkf5TVMuEwc+8++67N17YDdq+fTvnz5+/qcfs3buX9vb2Kz63cuVKfD7fUJY2
      yPS73/3ud8PyzEJ8FUUJrwg6Uwe+vkhXMy7ous4ftnzEk3/zTeKiXKw5/Ckz0zL45Hg5p1ua
      8bhcrD9yGF3X6erz4bbbaWi/iKqolJ6tZcfJ49jNFpw2KxvLSqlobCAtzsOzm9ZR09yMx+nC
      YbEQ73JTeqaWbSeOkTbBQ1t3F4fP1FJUeYpsbyJVTQ1sOXYUj9OFyxbu/RMMBfDYFXZWVHPs
      7CmSYr1oJo2QHuJIzTHOtzWSGOOlqb2Zw9VHOdtcR1bsfGrOBJmY3k5tfSfRLjN7SlqpOtOD
      xazwcXEzwZBOMKTz7y9XoqoK6ckOgiGIizGz80ALJ6q7yEixU1Hbxafl7bT485ky7ydXvPvf
      smULCxYs4MCBA+zevZv4+HiamppwOBxUV1eHf15dXfT19WG32zl06BA7d+4kPj6e7u5uSkpK
      2LNnD9nZ4Tc0H330EVu3bmXOnDnExMTQ3NzMmjVr0HWduLg4NmzYQG1tLZmZmXR0dLB27Vos
      Fgsul4vY2FhKSko4cOAAWVlZ7Nmzh+nTp2O5rJ9WMBhk8+bNnD9/HofDwerVq9E0jbi4OHbt
      2sXu3bvx+/1s27aNpKQkmpubOXjwIOXl5Zw/f57y8nLS09PlDEBEmNkMi+aDKv8Uh0Kvvx+v
      y43DYiEnIZGLvT2sKjmISVVJnTCBF7ZtYUZqGlFWKxuPlhIIBtlfXUljRzsffHqApbn5vFW0
      A5/fT3qch7aebnacPE6mx8ustAy8bjcbjx6huauTzeVl3JEzhZd2bOVgbTWNHe0kuKPZdfI4
      b+zZwYJJk+kPBIDwNNDGo6VUNpzBrbThdU+grPY4AMfOnCSohwgEgxw9fYKtpTvJT8vFolnw
      BwN8sreVY/sWs2F7K9v2NdPbGyQtyU4goFMw2cV76+twOjQmJtmYlReNZlL4uPgCRSWt9PYF
      iYsxs25bIx9sPs+UKTnsPxlLMBi65s/PbrczdepUXnzxRaqrqykpKWH16tWsWrWKtWvXEgwG
      AbBarRQUFPCnP/2JI0eOcObMGdLT09myZQuvv/46qampTJ78+UKHN954g/z8fKxWK6tXryYm
      JoZAIMAnn3zCn/70J+bPn4/FYqGoqIiOjg5sNhtWq5VVq1Zds863336bmJgYkpKSePnll1m8
      eDEffPABnZ2drFq1itmzZ/P+++9TWFjIunXr2LlzJ2azmWPHjmGxWKiqqqK2tlYCQIwC8XEw
      03h3YQ4Hq2amw9eLruuDg2/9xTZuz85hckISiqIwKSGRDM8X78VIio4hKSYGj9NNZVMjW44f
      pT8QoKO3l2i7A6/bjcNiBaC5s4OpySlMnBCH6VJ4z0rLJCMunv5ggO/OvZ0PDu3nyLkzVxxD
      QWFRdiZ3ZScQDIUH08aLFzhz4Rwtna10+bpJ96YS64zBon3eO6qjNZ6msxnUnFaYNz2WSelR
      7DjQQtmpToJBHbOm4HRoeOOsqJf2qqw518NthROYkeumua0fz4Qopi/+DXGeRPRrLDPSdZ3/
      /M//pKqqimAwyLx589i7dy+xsbH09PTQ1taGx+PB7/ezatUqTp06NfjYmTNnkpmZSX9/P11d
      XcycOZMJEz6fYnrsscfYsWMHW7dupaGhgVmzZjF37lzOnj2Lw+EgPT2d9PR0APr6+li1ahXt
      7e1cvHjxmr/nxsZG5s+fT05ODlarldTUVHJycmhtbSU7O5u0tDQmTZpEamoqiqKgKAr5+fl4
      vd7Bj6FQSAJAjBIFU2FicqSrGPNMqkqmx8v/3rKB/7l2JX9bOJs7J+fy7KZ1vLZrGxNj4/jj
      1o18VHaYWEcUL2zfwvojJaiKwmcN9by0fSuqouDr76e7r4+6tlZMqkpWvJf/u2s7x+vrMJtM
      ZHi87Kuu4KXtW0mMjsGkqoMDjaqoHDpdg9tmp7mrc7A2s0nDpKqoqkJylIlYW3iXsGkTp9DT
      10MwFCIpNoGK+mo2lWyjvacTTTVxruU8H336MeebdNx9D/H8igbe/PAMzRf76ewK0NE1cJYB
      /2/1WXx9QcyayuK5cbz0bg0vvFPLnIIY7LEzMbumYTaHg+WVV175vDazGV3XaW5upqGhgUAg
      gMvlorq6mhkzZhAdHY3L5UJRFEKhEC0tLTQ2NuL3+zGZTKiXXr+maaSnp/OHP/yBTZs2DU4z
      HT58GLvdTltbGwsWLOC5557jhRdeYNGiRcTGxvL888/zySefoGkauq7T2trKhQsX0DQNs9mM
      oihX1HvnnXfyzDPPsGLFCqKjo3n55Zc5duwYKSkpaJo2WAuApmlf+JzJZMJms6Ho14pCISLB
      1wfrtkBnd6QrGfO6+/qwahrapRvu/JemLswmEz6/H4umoQAdvl7cNjuKovCHLRv4pyXLsF+a
      a+7q8+GwWFEvDWI9/X1YNfPgO/5QKERXfx9u2xf7+4dCIbr6+nDbv7z3f1DXOdAQoKlHJxQK
      EdRDmE0aoVCI/kA/Nkt48xh/wE9I17Gaw3Vp1k7y5u/EFd1Bb18Qh01DUcLv4Ht9IRz2z+87
      6PeHCIZ0opOWEJX9FIoS/tq5c+coLy/n3nvvvaKmvr7wtSir1Xrdn29/fz+6rl/z+wauF0RF
      RaFe+lnpuk5nZydOpxNVVent7UVV1cHH9/b2hgfkSz/rq+s4f/48hw8f5r777ruiBlVVMZlM
      Vzz3zZAAEKPLhRbYtB38gUhXYjgN7RdJjI4Z0WP2B3X21PvpvMnFSmZrL/m37cAZc+0pksuZ
      7Bm4pj6LqjkHPzcw7I2VZaDDVa9MAYnRJT4Obpst9wdEwEgP/hDeTWxeghnrTXYG8ffZOVq8
      lIvN1+8kqmhuoiY9fcXgDwxOV40Vw1WvBIAYfSZlwIy8SFchRojTojDbq6He5PgW8Fs5tm8x
      bU1f0shNseDMfgrNnv71ixynJADE6KMoUDgNsuU/rlF47AoFcTffIDAU1Dh+YBFNZ9Ov6h+k
      EJXxBJp75pDVOB5JAIjRSVVh4TxpHW0QiqKQ7lbJir75ISkU1Dh1eD6NZ7IGQ8CW9F2s8cvH
      1DRPJMhFYDG6+fpg8w5oaYt0JWIEhHSd/ZdWBt00JUTG1KNMWpCOI+OJwRU/4svJGYAY3WxW
      WL4YYtyRrkSMAFUJXw+4kd3EvkBXCZgfwp4mg/+NkgAQo5/dBsvuBJfzq79XjHkDK4MsNzk6
      JRekU/jtBaiy2dANkwAQY4PLCX+zWELAIJwWhTmJGqYbnMJPnJrKzG8vxKTJ4H8zJADE2OF2
      wd8skY1kDCLerpJ/AyuDUmdkMue7i9Es2ghUNb5IAIixxe2EbyyFuNhIVyJGwFetDEotzGLm
      wwswmeWd/62QVUBibPL1wdZd4dYRYlwLXeoZ1HjVyqCs23OZdu9sVJn2uWUSAGLs8gdgz36o
      ORvpSsQw84d0dp/z0+kHRVXJWz6T7DvyZJ0/4aZwAx1Db5ZMAYmxy6zB4tuhIDfSlYhhZlYV
      5iWacdjNzH70ji8M/uvXr+f3v/89v/3tb2lubh6SYx49epSuri4A1q1bd9OP13Wd9evX3/Tj
      9u7de1Pfv2LFCrq7u9m7d+819zm4HtkSUoxtigLJCeCwQ30jyAntuGVxOUj/9mJislOuGPxD
      oRDvvvsuv/nNb8jNzWXlypXk5OTw6quvUllZiclk4t1338Xv91NTU0NGRgYHDx4kOjqaN954
      g507d9LT00N0dDSvv/46+/btIycnh2eeeYaKigoSEhLw+Xykp6fzzjvvsHXrVrxeLzU1Naxd
      u5ZNmzaRn5/Pxo0b2bRpE9HR0cTHx6MoCnV1dXR2drJy5Uo2b95MXl4eDoeDxsZG3njjDQ4c
      OMD06dMpLi4e3AbyzTffpLe3l8LCwsHX2NzczGuvvUZtbS2dnZ14vV6qqqro7+/n5MmTZGZm
      8utf/5rm5mZcLhf19fV4PB6KiopobGzk+PHjVFZW0tTUxIcffkggECAtLU3OAMQ4oCjhzeWX
      3xkOAjH+JMbD3y5Hu0ZrkK6uLrxeL4qiDO7Ru2LFCh577DEefvhhVq5cyRNPPMHcuXM5fPgw
      ACdOnKC3t5eLFy/ys5/9jOLiYpxOJ7fddhuBQIDS0lLuvPNO/uEf/oFJkyZRUlLCqVOnMJvN
      PPHEE3zwwQd89tln3H333SxbtoyysjKKi4u57777yMjIGKytpKSEqqoqFi5cyDe/+U0OHToE
      QHR0NPPnz6ezs5PS0lI++ugjYmNj+f73v8+CBQv4+7//+yte4zvvvMPf/d3f8eCDD1JeXo7f
      7+fMmTODZzsul4sFCxbw05/+FKfTSUVFBcFgkCNHjnD48GHOnTvH3XffzYYNG3jkkUfYtGkT
      uq5LAIhxQlEgKQEeWBb+KMYHRYG8yeG7wb8k3J1OJw0NDYRCIerr63G73fj9fpxOJxaLBZPJ
      hKZpWCwWQqEQuq5fsbevoiiYTCY2b95MfX09eXl59Pf3oygKwWBw8GzD5/PhdDoHdxSD8EBu
      tVoJhUL8/Oc/p6SkhL/+9a9XvQQFl8uF1WodnKJZv349zc3N5Obm4vf7SUpKYsmSJaiqiq7r
      g8cOhcJ7FwcCARwOx+DG8KFQaPA1XH6cge8feOzApjUPPfQQmqbR2NhISUkJCxYsQNd1mQIS
      44zFDFlp4QvEza2RrkZ8HRYLLJoX3i70OjtdDQzQ7733HkeOHOGHP/whOTk5vPLKK1RWVjJ9
      +nQ++OADfD4fHo+H999/n3PnznHXXXexYsUKqqqqKCwsJC0tjW3bttHS0kJ+fj6ZmZm89dZb
      pKSk4Pf7WbRoERs3bmTXrl0sXboUm81GamoqwWAQVVX5+OOPaW5uJj8/f3B/34aGBhITE/F6
      vZhMJnRdJzk5mZ6eHnbv3k1zczOFhYXouk5ubi6KolBeXs6nn35KV1cXFosFt9tNQkICr7/+
      OrW1teTn5/PWW29x+vRpbrvtNvr7+8nKysJqtbJixQry8/NZu3Ytx44dIzk5mYSEBNLT0wcD
      sLq6Gr/fT0xMjKwCEuPYufNQdBC6eyJdibhZifHhbrDDfNPfn//8Z/75n/95WI9xq06dOsXk
      yZOH7fn3798vASDGub6+cAjUnot0JeJGqCoU5sH0vOu+6x8qoVDopvfRHU8kAMT4F9Kh+jQc
      LIVeX6SrEV8mLhZunwPxE2RL0BEiASCMo7cXDpZBVa0sFx1NLGaYMQ2m5oDc1TuiJACEseh6
      +NrAgVJo74h0NSI1CebNlP0eIkQCQBiTPwAnK6H0OPT3R7oa43G7YP7McADIdE/ESAAIY+vp
      hbLjcKJSpoVGgtUCswpgchbIxi0RJwEghK7Dxfbw2UDtWQmC4WAxQ+4kyJ8CNlukqxGXSAAI
      MUDXoa0djkgQDBmLBXKzYdpksEubjtFGAkCIqw0EwckqqKwJXy8QN8cZBZMywu/6pT/TqCUB
      IMT1dPdAZS18Vil3FN+IuFjIy4GMtHC7bjGqSQAIcSP8/vDy0YoaqGuQ6aHLmc2QkRq+sBsf
      NyJ38IqhIQEwDjQ0NGC1WomNvXKf3M7OTrq7u0lMTPzax2hvb6evrw+v13tLj+/o6MDlckV0
      B6f29nbcbvfXr6GzC6pOQ0U1dHYPTXFjjaJAggey0iEzLby6R4w5EgBj3HvvvUd3dzc9PT08
      /PDDpKSkDH7ts88+o6qqivvvv3+wxeytOnLkCBcuXOCee+75wtdu5Ll3797NwoULv9B35erH
      DvxzHKqgOHToEE6nkylTprBr1y4WLVo0+LWvfQxdD3ccrTkLZ+ugvfNrVjvKqWp40M+YCGkp
      4bl9WcM/pskk3RjX2dlJcnIyy5Ytw2q18vbbb9PU1ITH42HevHkAfPjhh5w6dYqCggJSU1P5
      8MMPSUxM5PHHH8dkMrFhwwYqKirQdZ0f/ehH/OpXvyIlJQWv18vdd9/N66+/Tl9fH8uWLQPg
      zTffpKWlhYKCAqKjo9m5cyd+v59f/vKXvPjii7S0tBAXF8ejjz6Kz+ejoqKC+vp6Fi5cyH/8
      x39gNpt5+OGHWbNmDcFgkKysLB566CFaW1t57rnnMJvN3H///fT09LBnzx4mTZpEYmIie/bs
      IScnB4B7772XkydPomkaq1atwuVy0dPTwy9+8QteeOEFOjo6ePDBB1mzZg1+v59HHnmEqqoq
      8vPzB49x3333UVpaSnt7O9XV1fz+979n69at1NTUkJOTw7e+9a3r//AVJTzlER8Hc6ZD60U4
      3xieKrrQCoFxcPHYZgt35kxJDN+0JYP+uCKTdWPcP/7jP2Kz2fi3f/s3Tp8+jdfrxeVyUVpa
      Ovg927dvZ8qUKRQVFREKhTCZTEyfPn3w3bjH48HhcHD8+HH8fj+FhYU89dRTtLe3s2rVKn71
      q1/x2GOPDT5fMBjE6XSSl5fHxo0byc7Opre3l9OnT1NdXc3TTz/No48+ysaNG/n444+ZM2cO
      ra2tVFVVkZ2dzZNPPonL5aKyspLMzEz27duHruts376dH/zgBzz99NPs2rWLoqIinn76ab7z
      ne9QXFzMU089xSOPPEJ7ezuhUIje3l58Ph/R0dE8+eSTxMfH09XVRXx8PG63m5KSEpYsWcKj
      jz7K7NmzaW1tZceOHXz/+98fPEZnZyc/+9nPuOeee2hrayMYDGK328nPz7+5X4SqgmdCuHf9
      vXfBo9+EexaFNzPxxoXnyccCuw2SE2FmPtx/N3znm7B0YXjHtSiHDP7jjJwBjHEnTpxgzpw5
      BINBDh8+TFlZGU888QR//OMfB78nJiaGadOmkZmZSVJSEj/5yU948cUXmTp1KrGxsaxdu5Zf
      /vKX1NTUAJ9PjSiKgs1mo76+ngsXLgw+3/Lly1EUhVdffZUJEyaQlZVFTk4OXq+XzMxMoqKi
      iIqKorGxEYvFQlxcHACxsbGcPn16cAB3u93MnDlzcAs9r9dLRUUFZrMZm82G3++nqakJTdPQ
      NG3wWofJZKK5uZm6ujoyMjIIBAJ0dnZSV1fHiRMncDqdFBQUcPjwYaxWK01NTfRfavcwcAyL
      xYLNZhvc+WngNS9cuBCTycTzzz/PM888c2u/FEUJv3NOSwn/gXBb6osdcKEFWi6Gzxa6u6Hf
      f2vH+LoUJbxG3+2ECTHh8PJMCPff12RYMArZEWyMa21tZcOGDZjNZh544AHa2to4duwYc+fO
      JTMzE7fbzdy5c9m+fTvx8fE4HA7WrVtHZmYmhYWFg2cBRUVFzJgxg5ycHKKiooiPj8dms7F0
      6VJWr15NX18fs2fPJjo6mrKyMoqKili+fDlLly5lx44dtLW1kZ+fj9PpJCkpCQC73c7kyZNJ
      SEjAbreTnZ2Nruvs2LGDKVOmkJycTHFxMR6Ph9TUVFJTUykvL+fEiRN873vfY/bs2axevRqf
      z8d9993H+vXr8fl83HHHHaxcuRKHw0FhYSFbt26lsbGR5cuXU1BQQHFxMf39/RQWFpKfn8+u
      XbuwWq1kZGQwZ84cysvLOX78OI899hhut5vExEQsFgsej4czZ87t1D8vAAACxUlEQVSwY8cO
      Fi1axMSJE4fuF6Vp4bXxXk94xczUSTB1cnj3sqSE8DRStCv8DtykhltYw62941aU8BmJSQ0H
      UbQ7fNzUJMjOCC/TnJkPs/LD6/TTUsKDv8MuK3gMRi4CizFv3bp1PPDAA5EuY+gFAuEzBL8f
      +vohGIJQCILB8N/1ULifjqp+/seshdsuWCzhjzKgi+uQABBCCIOStwdCCGFQEgBCCGFQEgBC
      CGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBC
      CGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBC
      CGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBC
      CGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBC
      CGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBC
      CGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBC
      CGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBC
      CGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBC
      CGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBC
      CGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQEgBCCGFQ/x/J
      ua20mcMIxAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='Vacancies by Province Map' width='384'>
      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
      AW0YkZtgwUHaAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='Vacancies by Province bar' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='Vacancies by Province trend' width='384'>
      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
      coGLETcAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='Vacancies by Quarter' width='384'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
